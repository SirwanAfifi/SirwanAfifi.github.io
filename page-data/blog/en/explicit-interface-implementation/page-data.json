{"componentChunkName":"component---src-templates-blog-details-js","path":"/blog/en/explicit-interface-implementation","result":{"data":{"markdownRemark":{"frontmatter":{"date":"August 12th, 2016","title":"Explicit Interface Implementation","tags":["C#"],"slug":"Explicit-Interface-Implementation/"},"html":"<p>Let's imagine that you have a class with two methods:</p>\n<pre><code class=\"language-csharp\">public class VendingMachine\n{\n    public bool InsertCoin(float amount)\n    {\n        if (amount &#x3C; 500)\n        {\n            return false;\n        }\n        return true;\n    }\n\n    public string Buy()\n    {\n        return \"Buy\";\n    }\n}\n</code></pre>\n<p>Now when we want to create an instance of this class and call one of those methods, it executes as expected:</p>\n<pre><code class=\"language-csharp\">VendingMachine machine = new VendingMachine();\nmachine.InsertCoin(5); // false\nmachine.Buy();         // \"Buy\"\n</code></pre>\n<p>Now suppose that we have an interface called <code>IVendingMachine</code> that has two methods:</p>\n<pre><code class=\"language-csharp\">public interface IVendingMachine\n{\n    bool InsertCoin(float amount);\n    string Buy();\n}\n</code></pre>\n<p>We want our class to implements this interface:</p>\n<pre><code class=\"language-csharp\">public class VendingMachine : IVendingMachine\n{\n    public bool InsertCoin(float amount)\n    {\n        if (amount &#x3C; 500)\n        {\n            return false;\n        }\n        return true;\n    }\n\n    public string Buy()\n    {\n        return \"Buy\";\n    }\n}\n</code></pre>\n<p>Our class satisfied the interface because it has the methods with the same names. So Visual Studio doesn't give you a compiler error. Now let's imagine that we\nalso want to add interface's methods to this class, So, in this case, we must explicitly prefix the methods with <code>IVendingMachine.</code>:</p>\n<pre><code class=\"language-csharp\">public class VendingMachine : IVendingMachine\n{\n    public bool InsertCoin(float amount)\n    {\n        if (amount &#x3C; 500)\n        {\n            return false;\n        }\n        return true;\n    }\n\n    bool IVendingMachine.InsertCoin(float amount)\n    {\n        if (amount &#x3C; 300)\n        {\n            return true;\n        }\n        return false;\n    }\n\n    public string Buy()\n    {\n        return \"Buy\";\n    }\n\n    string IVendingMachine.Buy()\n    {\n        return \"IVendingMachine Buy\";\n    }\n}\n</code></pre>\n<p>Note that Visual Studio can help you to implement interface explicitly by pressing <code>Ctrl + .</code> on the name of the interface and select <code>Implement interface explicitly</code>:</p>\n<img class=\"img-res\" src=\"/img/explicit_interface_implementation.jpg\" />\nNow, what happens when we call the `InsertCoin` and `Buy` methods? In this case, we should consider two different situations when we create the object:\n<ul>\n<li>Concrete Type</li>\n<li>Interface Variable</li>\n</ul>\n<p>If we want the methods of <code>VendingMachine</code> we should create the object with concrete type:</p>\n<pre><code class=\"language-csharp\">VendingMachine machine = new VendingMachine();\nmachine.InsertCoin(5); // false\nmachine.Buy();         // \"Buy\"\n</code></pre>\n<p>If we want the methods of <code>IVendingMachine</code> we should create the object with interface variable:</p>\n<pre><code class=\"language-csharp\">IVendingMachine machine = new VendingMachine();\nmachine.InsertCoin(5); // true\nmachine.Buy();         // \"IVendingMachine Buy\"\n</code></pre>"}},"pageContext":{"slug":"Explicit-Interface-Implementation/"}},"staticQueryHashes":[]}