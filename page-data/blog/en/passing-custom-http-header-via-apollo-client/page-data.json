{"componentChunkName":"component---src-templates-blog-details-js","path":"/blog/en/passing-custom-http-header-via-apollo-client","result":{"data":{"markdownRemark":{"timeToRead":1,"frontmatter":{"date":"November 6th, 2019","title":"Passing custom HTTP Header via Apollo Client","tags":["React","Apollo Client","C#","Programming Notes"],"slug":"Passing-custom-HTTP-Header-via-Apollo-Client/"},"html":"<p>Today I wanted to send along an array as a parameter with all queries from client to server. But I wanted to find a quick way to accomplish the task as changing all queries took a tremendous amount of time. One thing that came to my mind was making use of Apollo Client by adding a custom header every time a request is sent to the server. <code>Apollo Link</code> is a state management library for our client-side dashboard. It comes with something called <code>Link</code> which is more like the concept of middleware but in a much more flexible and elegant way. The cool thing about this feature is that they are chainable so that we can snap together and define the functionality to handle GraphQL requests by the client. So when we issue a GraphQL request, every single link is applied one after another. So it's the best place to add the custom header:</p>\n<pre><code class=\"language-js\">const addOrigin = setContext(async (_, { headers }) => {\n  const IDs = await localStorage.getItem(\"IDs\")\n  return {\n    headers: {\n      ...headers,\n      customHeaderName: IDs,\n    },\n  }\n})\n\nconst links = [, /* other links */ addOrigin, httpLink]\n\nexport const client = new ApolloClient({\n  cache,\n  link: ApolloLink.from(links),\n})\n</code></pre>\n<p>On the backend we are using <code>graphql-dotnet</code> so all I had to do was to define a class and populate the header:</p>\n<pre><code class=\"language-csharp\">services.AddGraphQL()\n    .AddUserContextBuilder(context => new GraphQLUserContext { User = context.User, Headers = context.Request.Headers})\n    .AddGraphTypes(ServiceLifetime.Scoped);\n\npublic class GraphQLUserContext\n{\n    public IHeaderDictionary Headers { get; set; }\n}\n</code></pre>\n<p>The code captures the headers and then make it available in resolve methods:</p>\n<pre><code class=\"language-csharp\">public class MyGraphType : ObjectGraphType\n{\n    public MyGraphType(MyService myService)\n    {\n        Field&#x3C;ListGraphType&#x3C;MyType>>(\n            \"items\",\n            resolve: context =>\n            {\n                var headers = (context.UserContext as dynamic).Headers as IHeaderDictionary;\n                var ids = headers?[\"customHeaderName\"];\n                if (string.IsNullOrEmpty(ids)) return myService.GetAllAsync();\n                var ids = (ids.Value).ToString().Split(\", \").Select(long.Parse);\n                return myService.GetAllAsync(ids);\n            });\n    }\n}\n\n</code></pre>"}},"pageContext":{"slug":"Passing-custom-HTTP-Header-via-Apollo-Client/"}},"staticQueryHashes":[]}