{"componentChunkName":"component---src-templates-blog-details-js","path":"/blog/en/using-ihostingenvironment-in-a-test-project","result":{"data":{"markdownRemark":{"timeToRead":2,"frontmatter":{"date":"August 9th, 2019","title":"Using IHostingEnvironment in a test project","tags":["ASP.NET Core","xUnit",".NET Core"],"slug":"Using-IHostingEnvironment-in-a-test-project/"},"html":"<p>Assume that you have a service which accepts <code>IHostingEnvironment</code> as its dependency:</p>\n<pre><code class=\"language-csharp\">public class MyService\n{\n    private readonly IHostingEnvironment hostingEnv;\n\n    public MyService(IHostingEnvironment hostingEnv)\n    {\n        this.hostingEnv = hostingEnv;\n    }\n\n    public Task&#x3C;IEnumerable&#x3C;Post>> GetPosts()\n    {\n        var fileInfo = hostingEnv.ContentRootFileProvider.GetFileInfo(\"posts.json\");\n        var file = File.ReadAllText(file.PhysicalPath);\n        var deserializeObject = JsonConvert.DeserializeObject&#x3C;IEnumerable&#x3C;Post>>(file);\n        return Task.FromResult(deserializeObject);\n    }\n}\n</code></pre>\n<p>Now we wan to be able to load that JSON file inside a test project in order to test the service. First of all, we need to make sure we have these packages installed on the test project:</p>\n<pre><code class=\"language-xml\">&#x3C;ItemGroup>\n    &#x3C;PackageReference Include=\"Microsoft.AspNetCore.Hosting\" Version=\"2.2.0\" />\n    &#x3C;PackageReference Include=\"Microsoft.AspNetCore.Hosting.Abstractions\" Version=\"2.2.0\" />\n    &#x3C;PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"2.2.0\" />\n    &#x3C;PackageReference Include=\"Microsoft.Extensions.DependencyInjection.Abstractions\" Version=\"2.2.0\" />\n    &#x3C;PackageReference Include=\"Microsoft.Extensions.FileProviders.Physical\" Version=\"2.2.0\" />\n    &#x3C;PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"16.0.1\" />\n    &#x3C;PackageReference Include=\"xunit\" Version=\"2.4.0\" />\n    &#x3C;PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.0\" />\n&#x3C;/ItemGroup>\n</code></pre>\n<p>We also need to modify the csproj file to copy the JSON file to the build output:</p>\n<pre><code class=\"language-xml\">&#x3C;ItemGroup>\n    &#x3C;None Update=\"data.json\">\n        &#x3C;CopyToOutputDirectory>PreserveNewest&#x3C;/CopyToOutputDirectory>\n    &#x3C;/None>\n&#x3C;/ItemGroup>\n</code></pre>\n<p>Then we need a base class to configure the built-in DI container and register <code>IHostingEnvironment</code>:</p>\n<pre><code class=\"language-csharp\">namespace GreatSpot.Tests\n{\n    public class BaseTest\n    {\n        public static IServiceProvider Services { get; private set; }\n        public BaseTest()\n        {\n            var serviceCollection = new ServiceCollection();\n            serviceCollection.AddSingleton&#x3C;IHostingEnvironment>(new HostingEnvironment\n            {\n                ContentRootFileProvider = new PhysicalFileProvider(Environment.CurrentDirectory)\n            });\n            Services = serviceCollection.BuildServiceProvider();\n        }\n    }\n}\n</code></pre>\n<p>Now we can use the registred service in our test methods:</p>\n<pre><code class=\"language-csharp\">public class PostTests : BaseTest\n{\n    [Fact]\n    public async Task Get_All_Posts()\n    {\n        var hostingEnvironment = Services.GetService&#x3C;IHostingEnvironment>();\n\n        var myService = new MyService(hostingEnvironment);\n        var data = await myService.GetPosts();\n        Assert.Equal(10, data.Count);\n    }\n}\n</code></pre>"}},"pageContext":{"slug":"Using-IHostingEnvironment-in-a-test-project/"}},"staticQueryHashes":[]}