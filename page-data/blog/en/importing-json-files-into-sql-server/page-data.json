{"componentChunkName":"component---src-templates-blog-details-js","path":"/blog/en/importing-json-files-into-sql-server","result":{"data":{"markdownRemark":{"timeToRead":2,"frontmatter":{"date":"September 18th, 2019","title":"Importing JSON files into SQL Server","tags":["SQL Server","TSQL"],"slug":"Importing-JSON-files-into-SQL-Server/"},"html":"<p>I was assigned to a task to import a <a href=\"https://en.wikipedia.org/wiki/GeoJSON\">GeoJSON</a> file into a SQL Server database. The file was pretty big; I couldn't even open the file in an editor. At first, I wanted to write a simple program (with C# or Python) to open the file and then loop through the entries, parse each one of the entry and then save it into the database. But it would have taken time if I followed that process. All I wanted to do was save a JSON file right into the database. That's where I gave <code>OPENROWSET</code> a try. Everything went well, and I successfully saved the file into the database:</p>\n<pre><code class=\"language-sql\">DECLARE @GeoJSON nvarchar(max)\n\nSELECT @GeoJSON = BulkColumn\n FROM OPENROWSET (BULK 'C:\\areas.json', SINGLE_CLOB) as j\n\nINSERT INTO dbo.Areas (Area,Coordinates)\nSELECT\n\tArea,\n\tCoordinates\nFROM\n    OPENJSON(@GeoJSON, '$.features')\n             WITH (\n                 Area varchar(50) '$.properties.name',\n                 Coordinates nvarchar(max) '$.geometry.coordinates' as JSON\n                 )\n</code></pre>\n<p>As you might already know, the <code>OPENROWSET</code> is a table value function which returns a table with a single column called <code>Bulk</code>. What above code does is first open the JSON file and assign it to a variable called <code>GeoJSON</code>. Then I used another table value column called <code>OPENJSON</code> to parse the JSON. The first thing we can do is to set our root element, which is <code>features</code> in my case. Then elements can be referenced with the prefix <code>$</code>. There are two important things to mention. First, if you want to save a JSON element into a string column you will need to make sure the column type is <code>nvarchar(max)</code> and you add <code>as JSON</code> inside the <code>WITH</code> clause for that specific column.</p>\n<p>You can also build a geography value if you have a column with that type:</p>\n<pre><code class=\"language-sql\">DECLARE @GeoJSON nvarchar(max)\n\nSELECT @GeoJSON = BulkColumn\n FROM OPENROWSET (BULK 'C:\\areas.json', SINGLE_CLOB) as j\n\nINSERT INTO dbo.Areas (Area,Coordinates)\nSELECT\n\tArea,\n\tCoordinates,\n    geography::STPointFromText('POINT (' + Longitude + ' ' + Latitude + ')', 4326) AS Geography,\n    Longitude,\n    Latitude\nFROM\n    OPENJSON(@GeoJSON, '$.features')\n             WITH (\n                 Area varchar(50) '$.properties.name',\n                 Coordinates nvarchar(max) '$.geometry.coordinates' as JSON,\n                 Longitude varchar(100) '$.lon',\n                 Latitude varchar(100) '$.lat'\n                 )\n</code></pre>"}},"pageContext":{"slug":"Importing-JSON-files-into-SQL-Server/"}},"staticQueryHashes":[]}