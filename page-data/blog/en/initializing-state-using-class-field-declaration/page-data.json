{"componentChunkName":"component---src-templates-blog-details-js","path":"/blog/en/initializing-state-using-class-field-declaration","result":{"data":{"markdownRemark":{"frontmatter":{"date":"October 29th, 2019","title":"Initializing state using class field declaration","tags":["React"],"slug":"Initializing-state-using-class-field-declaration/"},"html":"<p>If you want to initialize state in a class based component we have two options:</p>\n<ul>\n<li>In constructor</li>\n<li>As a class property</li>\n</ul>\n<p>For class based components I used to initialize state in the constructor:</p>\n<pre><code class=\"language-js\">import React, { Component } from \"react\"\n\nexport class SampleComponent extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      items: [\n        { id: this.getRandomInt(5), name: \"Item 1\" },\n        { id: this.getRandomInt(5), name: \"Item 2\" },\n      ],\n    }\n  }\n\n  getRandomInt = max => {\n    return Math.floor(Math.random() * Math.floor(max))\n  }\n\n  render() {\n    return (\n      &#x3C;ul>\n                        \n        {this.state.items.map(item => (\n          &#x3C;li key={item.id}>\n            {item.name} - {item.id}\n          &#x3C;/li>\n        ))}\n                    \n      &#x3C;/ul>\n    )\n  }\n}\n</code></pre>\n<p>This approach is fine, but you will have to make sure you call <code>super(props)</code>. Sometimes we might forget to call <code>super(props)</code> in the constructor; in this case, the parent's constructor won't be executed, which will cause the following error:</p>\n<blockquote>\n<p>ReferenceError: Must call the <code>super(props)</code> constructor in derived class before accessing 'this' or returning from derived constructor</p>\n</blockquote>\n<p>It's where using class field declaration comes in handy. It saves us a few keystrokes, so you don't need to worry about calling <code>super(props)</code> anymore. So the previous example can be written as:</p>\n<pre><code class=\"language-js\">import React, { Component } from \"react\"\n\nexport class SampleComponent extends Component {\n  getRandomInt = max => {\n    return Math.floor(Math.random() * Math.floor(max))\n  }\n\n  state = {\n    items: [\n      { id: this.getRandomInt(5), name: \"Item 1\" },\n      { id: this.getRandomInt(5), name: \"Item 2\" },\n    ],\n  }\n\n  render() {\n    return (\n      &#x3C;ul>\n                        \n        {this.state.items.map(item => (\n          &#x3C;li key={item.id}>\n            {item.name} - {item.id}\n          &#x3C;/li>\n        ))}\n                    \n      &#x3C;/ul>\n    )\n  }\n}\n</code></pre>\n<p>The key point to remember here is that if you are going to call a method inside the <code>state</code> (<code>getRandomInt</code> in our case), you must declare your methods before declaring the state otherwise you will get the following error:</p>\n<blockquote>\n<p>TypeError: this.getRandomInt is not a function</p>\n</blockquote>\n<p>If you are using TypeScript then it has got your back and immediately yelling at you:</p>\n<img class=\"img-res\" src=\"/img/typescript_state.png\">"}},"pageContext":{"slug":"Initializing-state-using-class-field-declaration/"}},"staticQueryHashes":[]}