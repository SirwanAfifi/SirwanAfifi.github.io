{"componentChunkName":"component---src-templates-blog-details-js","path":"/blog/en/designing-fluent-interfaces-in-c","result":{"data":{"markdownRemark":{"timeToRead":1,"frontmatter":{"date":"October 26th, 2016","title":"Designing Fluent Interfaces in C#","tags":["C#","Design Patterns"],"slug":"Designing-Fluent-Interfaces-in-C/"},"html":"<p>The concept of <a href=\"martinfowler.com/bliki/FluentInterface.html\">Fluent Interface</a> was coined by Martin Fowler to create various objects and wire them up together. This pattern is often used for object configuration and setup. For example in ASP.NET Core applications we have following code for configuring the server:</p>\n<pre><code class=\"language-csharp\">using System;\nusing Microsoft.AspNetCore.Hosting;\n\nnamespace aspnetcoreapp\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var host = new WebHostBuilder()\n                .UseKestrel()\n                .UseStartup&#x3C;Startup>()\n                .Build();\n\n            host.Run();\n        }\n    }\n}\n</code></pre>\n<p>As you can see we can chain methods together easily and the intention is to produce an API that is readable and flows. This pattern is heavily used in programming, Here's an example of using this approach in jQuery:</p>\n<pre><code class=\"language-js\">$(\"#result\")\n  .css(\"background\", \"yellow\")\n  .width(200)\n  .height(200)\n  .text(\"This is the result\")\n</code></pre>\n<p>For C#, there is LINQ:</p>\n<pre><code class=\"language-csharp\">var person = PersonDataSource\n\t.Where(p => p.Age > 20)\n\t.OrderBy(p => p.Name)\n\t.Select(p => new {\n\t\tName = p.Name,\n\t\tLastName = p.LastName\n});\n</code></pre>\n<p>You might ask how to implement this pattern, well, it is very simple you just need to return <code>this</code> during method call. The <code>Calculator</code> defined below contains three methods. These methods are returing <code>Calculator</code> object using <code>this</code> keyword, which allow to chain the methods:</p>\n<pre><code class=\"language-csharp\">public class Calculator\n{\n\tpublic int Initial { get; private set; }\n\tpublic Calculator(int intial)\n\t{\n\t\tInitial = intial;\n\t}\n\n\tpublic Calculator Add(int x)\n\t{\n\t\tInitial = Initial + x;\n\t\treturn this;\n\t}\n\n\tpublic Calculator Divide(int x)\n\t{\n\t\tInitial = Initial / x;\n\t\treturn this;\n\t}\n\n\tpublic Calculator Substract(int x)\n\t{\n\t\tInitial = Initial - x;\n\t\treturn this;\n\t}\n}\n</code></pre>\n<p>Now we can use the class this way:</p>\n<pre><code class=\"language-csharp\">var calc = new Calculator(5)\n\t\t\t.Add(5)\n\t\t\t.Divide(5)\n\t\t\t.Substract(2);\n\nSystem.Console.WriteLine(calc.Initial);\n</code></pre>\n<p>As you can see this approach makes our code concise and easier to read.</p>"}},"pageContext":{"slug":"Designing-Fluent-Interfaces-in-C/"}},"staticQueryHashes":[]}