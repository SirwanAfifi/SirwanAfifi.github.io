{"componentChunkName":"component---src-templates-blog-details-js","path":"/blog/en/developing-console-based-ui-in-c","result":{"data":{"markdownRemark":{"frontmatter":{"date":"May 2nd, 2018","title":"Developing Console-based UI in C#","tags":["C#",".NET Core"],"slug":"Developing-Console-based-UI-in-C/"},"html":"<p>As you know Console Applications don't have graphical user interface or GUI. Instead, they run from Command Line, for example instead of writing a name into a textbox and clicking a button we would instead invoke the Console Application and provide the name as a parameter. In fact, in Console Applications we instead interact with the user using text inputs. For example, we could prompt something like this:</p>\n<img class=\"img-res\" src=\"/img/consoleTest.jpg\" />\n<p>The user can then write a name and hit enter then we can read that text input into our application.</p>\n<p>Wouldn't be better to make it beautiful? This is where we can use <a href=\"https://github.com/migueldeicaza/gui.cs\">Terminal.Gui</a> a cross-platform GUI toolkit:</p>\n<img class=\"img-res\" src=\"/img/guics.png\" alt=\"Sample app\" />\n<blockquote>\n<p>Terminal.Gui is a library intended to create console-based applications using C#. The framework has been designed to make it easy to write applications that will work on monochrome terminals, as well as modern color terminals with mouse support. This library works across Windows, Linux and MacOS.</p>\n</blockquote>\n<p>Using this UI toolkit is pretty simple, all you need to do is adding its package into your project:</p>\n<pre><code>dotnet add package Terminal.Gui\n</code></pre>\n<p>The simplest application looks like this:</p>\n<pre><code class=\"language-csharp\">using System;\n\nnamespace consoleTest\n{\n    using Terminal.Gui;\n\n    class Demo {\n        static int Main ()\n        {\n            Application.Init ();\n\n            var n = MessageBox.Query (50, 7,\n                \"Question\", \"Do you like console apps?\", \"Yes\", \"No\");\n\n            return n;\n        }\n    }\n}\n\n</code></pre>\n<p>This example shows a prompt and returns an integer value depending on which value was selected by the user (Yes, No, or if they use chose not to make a decision and instead pressed the ESC key):</p>\n<img class=\"img-res\" src=\"/img/firstTerminalUIapp.png\" alt=\"Sample app\" />\n<p>As you can see the first thing to do is calling <code>Application.Init ();</code> to actually initialize the application. We can also create a window and then add a menu to it:</p>\n<pre><code class=\"language-csharp\">Application.Init ();\nvar top = Application.Top;\n\n// Creates the top-level window to show\nvar win = new Window (new Rect (0, 1, top.Frame.Width, top.Frame.Height-1), \"MyApp\");\ntop.Add (win);\n\n// Creates a menubar, the item \"New\" has a help menu.\nvar menu = new MenuBar (new MenuBarItem [] {\n    new MenuBarItem (\"_File\", new MenuItem [] {\n        new MenuItem (\"_New\", \"Creates new file\", ()=> {}),\n        new MenuItem (\"_Close\", \"\", () => {}),\n        new MenuItem (\"_Quit\", \"\", () => { top.Running = false; })\n    }),\n    new MenuBarItem (\"_Edit\", new MenuItem [] {\n        new MenuItem (\"_Copy\", \"\", null),\n        new MenuItem (\"C_ut\", \"\", null),\n        new MenuItem (\"_Paste\", \"\", null)\n    })\n});\ntop.Add (menu);\n\n// Add some controls\nwin.Add (\n    new Label (3, 2, \"Login: \"),\n    new TextField (14, 2, 40, \"\"),\n    new Label (3, 4, \"Password: \"),\n    new TextField (14, 4, 40, \"\") {  },\n    new CheckBox (3, 6, \"Remember me\"),\n    new RadioGroup (3, 8, new [] { \"_Personal\", \"_Company\" }),\n    new Button (3, 14, \"Ok\"),\n    new Button (10, 14, \"Cancel\"),\n    new Label (3, 18, \"Press ESC and 9 to activate the menubar\"));\n\nApplication.Run ();\n</code></pre>\n<img class=\"img-res\" src=\"/img/sampleTerminalUI.png\" alt=\"Sample app\" />\n<p>You can build even complex console-based UI using this toolkit:</p>\n<pre><code class=\"language-csharp\">using System;\nusing System.Linq;\nusing NStack;\nusing Terminal.Gui;\nusing TestingGuiCS.Models;\n\nnamespace TestingGuiCS\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Application.Init ();\n            var top = Application.Top;\n\n            // Creates a menubar, the item \"New\" has a help menu.\n            var menu = new MenuBar (new MenuBarItem [] {\n                new MenuBarItem (\"_File\", new MenuItem [] {\n                    new MenuItem (\"_Quit\", \"\", () => { top.Running = false; })\n                })\n            });\n            top.Add (menu);\n\n\n            // Creates the top-level window to show\n            var win = new Window (new Rect (0, 1, top.Frame.Width, top.Frame.Height-1), \"Movie Db\");\n            top.Add (win);\n\n            // Add some controls\n            var txtSearchLbl = new Label(3, 1, \"Movie Name: \");\n            var txtSearch = new TextField(15, 1, 30, \"\");\n            var forKidsOnly = new CheckBox(3, 3, \"For Kids?\");\n            var minimumRatingLbl = new Label(25, 3, \"Minimum Rating: \");\n            var minimumRatingTxt = new TextField(41, 3, 10, \"\");\n            var searchBtn = new Button(3, 5, \"Filter\");\n            var allMoviesListView = new ListView(new Rect(4, 8, top.Frame.Width, 200), MovieDataSource.GetList(forKidsOnly.Checked, 0).ToList());\n            searchBtn.Clicked = () =>\n            {\n\n                double rating = 0;\n                var isDouble = double.TryParse(minimumRatingTxt.Text.ToString(), out rating);\n                if(!string.IsNullOrEmpty(minimumRatingTxt.Text.ToString()) &#x26;&#x26; !isDouble)\n                {\n                    MessageBox.ErrorQuery(30, 6, \"Error\", \"Rating must be number\");\n                    minimumRatingTxt.Text = ustring.Empty;\n                    return;\n                }\n\n                win.Remove(allMoviesListView);\n                if (string.IsNullOrEmpty(txtSearch.Text.ToString()) || string.IsNullOrEmpty(minimumRatingTxt.Text.ToString()))\n                {\n                    allMoviesListView = new ListView(new Rect(4, 8, top.Frame.Width, 200),\n                        MovieDataSource.GetList(forKidsOnly.Checked, rating).ToList());\n                    win.Add(allMoviesListView);\n                }\n                else\n                {\n                    win.Remove(allMoviesListView);\n                    win.Add(new ListView(new Rect(4, 8, top.Frame.Width, 200),\n                        MovieDataSource.GetList(forKidsOnly.Checked, rating)\n                            .Where(x =>\n                            x.Name.Contains(txtSearch.Text.ToString(), StringComparison.OrdinalIgnoreCase)\n                        ).ToList()));\n                }\n\n            };\n            win.Add (\n                txtSearchLbl,\n                txtSearch,\n                forKidsOnly,\n                minimumRatingLbl,\n                minimumRatingTxt,\n                searchBtn,\n                new Label (3, 7, \"-------------Search Result--------------\")\n            );\n\n            Application.Run ();\n        }\n    }\n}\n</code></pre>\n<img class=\"img-res\" src=\"/img/terminalUI.gif\" alt=\"Sample app\" />\n<p>You can grab the working sample project from <a href=\"https://github.com/SirwanAfifi/Console-based-UI\">GitHub</a>.</p>\n<h3>What about cross platform UI frameworks?</h3>\n<p>Developing cross platform UIs is not officially supported by Microsoft, But there are some open source projects out there for doing so:</p>\n<ul>\n<li><a href=\"https://github.com/AvaloniaUI/Avalonia\">Avalonia</a></li>\n<li><a href=\"https://github.com/picoe/Eto\">Eto.Forms</a></li>\n</ul>"}},"pageContext":{"slug":"Developing-Console-based-UI-in-C/"}},"staticQueryHashes":[]}