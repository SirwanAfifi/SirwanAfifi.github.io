{"componentChunkName":"component---src-templates-blog-details-js","path":"/blog/en/uploading-file-in-vuejs","result":{"data":{"markdownRemark":{"frontmatter":{"date":"June 4th, 2018","title":"Uploading file in Vue.js","tags":["TypeScript","Vue.js","JavaScript","ASP.NET Core"],"slug":"Uploading-file-in-Vue.js/"},"html":"<p>In this blog post I am going to show you how you can upload file using Vue.js. On the backend we will use ASP.NET Core MVC to expose an endpoint to the client to receive file. Let's say we have a HTML form for saving a coffee, this form contains a file input to accept coffee's image:</p>\n<img class=\"img-res\" src=\"/img/vue-upload-file.png\" alt=\"Vue Upload File\" />\n<p>To allow the user to pick a file we need to have a reference to the file input field using <code>ref</code> attribute then we can easily access this input using <code>$refs</code> object inside our Vue instance this is like selecting an element using jQuery:</p>\n<pre><code class=\"language-html\">&#x3C;input required type=\"file\" ref=\"image\" />\n</code></pre>\n<p>As you can see we named this input <code>image</code> so we can access the element this way:</p>\n<pre><code class=\"language-js\">this.\\$refs.image\n</code></pre>\n<p>Before we can submit the form we can encapsulate functionality inside a service:</p>\n<pre><code class=\"language-js\">import axios from \"axios\"\n\nclass CoffeeService {\n  saveCoffee(coffee: any, file: any): any {\n    const formData = new FormData()\n    for (const key in coffee) {\n      if (coffee.hasOwnProperty(key)) {\n        formData.append(key, coffee[key])\n      }\n    }\n    formData.append(file.name, file)\n\n    return axios.post(\"/Coffees/SaveCoffee\", formData)\n  }\n}\n\n// Export a singletone instance in the global namespace\nexport const coffeeService = new CoffeeService()\n</code></pre>\n<p>This service has a method called <code>saveCoffee</code> which accepts two parameters one is the coffee itself and the second one is uploaded file then we are using <code>FormData</code> to combine these data together and sending it to the server using <code>axios</code> library. Keep in mind, this method returns a promise which means that the caller can use <code>then</code> syntax to get server's response. So inside the <code>CoffeeComponent</code> we can use <code>Coffeeservice</code> like this:</p>\n<pre><code class=\"language-html\">&#x3C;template>\n  &#x3C;div class=\"container\">\n    &#x3C;h3>Add a new Coffee&#x3C;/h3>\n    &#x3C;form v-on:submit.prevent=\"submitted\">\n      &#x3C;div class=\"form-group\">\n        &#x3C;label class=\"control-label\">Coffee Name&#x3C;/label>\n        &#x3C;input\n          required\n          type=\"text\"\n          class=\"form-control\"\n          name=\"Name\"\n          v-model=\"model.name\"\n        />\n      &#x3C;/div>\n\n      &#x3C;div class=\"form-group\">\n        &#x3C;label class=\"control-label\">Coffee Type&#x3C;/label>\n        &#x3C;select\n          class=\"form-control\"\n          name=\"CoffeeType\"\n          v-model=\"model.coffeeType\"\n        >\n          &#x3C;option\n            v-for=\"coffeeType in coffeeTypes\"\n            :value=\"coffeeType.value\"\n            v-bind:key=\"coffeeType.value\"\n            >{{ coffeeType.name }}&#x3C;/option\n          >\n        &#x3C;/select>\n      &#x3C;/div>\n\n      &#x3C;div class=\"form-group\">\n        &#x3C;label class=\"control-label\">Coffee Image&#x3C;/label>\n        &#x3C;input\n          required\n          type=\"file\"\n          multiple\n          class=\"form-control\"\n          name=\"Image\"\n          @change=\"fileChange\"\n          ref=\"image\"\n        />\n      &#x3C;/div>\n\n      &#x3C;button class=\"btn btn-primary\" type=\"submit\">Save&#x3C;/button>\n    &#x3C;/form>\n  &#x3C;/div>\n&#x3C;/template>\n\n&#x3C;script lang=\"ts\">\n  import Vue from \"vue\"\n  import { Component, Prop, Watch } from \"vue-property-decorator\"\n  import { coffeeService } from \"../services/CoffeeService\"\n  /// &#x3C;reference path=\"./toaster.d.ts\" />\n\n  @Component({\n    components: { UploadFileSimpleComponent },\n  })\n  export default class UploadFileSimpleComponent extends Vue {\n    coffeeTypes = [\n      { name: \"Espresso\", value: 0 },\n      { name: \"Latte\", value: 1 },\n      { name: \"Mocha\", value: 2 },\n    ]\n\n    model = {}\n\n    submitted() {\n      coffeeService\n        .saveCoffee(this.model, (&#x3C;any>this.$refs.image).files)\n        .then(function(response: any) {\n          toastr.success(response.data)\n        })\n        .catch(function(error: any) {\n          toastr.error(error)\n        })\n    }\n  }\n&#x3C;/script>\n</code></pre>\n<h3>Showing upload progress</h3>\n<p>Now we want to show upload progress, axios makes this easy all we need to do is add a third argument to the <code>post</code> method, this argument is actually an object, inside this object we can configure the request inside this object we have access to an event handler called <code>onUploadProgress</code> which we can do the calculation. let's change the <code>CoffeeService</code> to this:</p>\n<pre><code class=\"language-js\">import axios from \"axios\"\nimport { eventBus } from \"../main\"\n\nclass CoffeeService {\n  saveCoffee(coffee: any, file: any): any {\n    const formData = new FormData()\n    for (const key in coffee) {\n      if (coffee.hasOwnProperty(key)) {\n        formData.append(key, coffee[key])\n      }\n    }\n\n    formData.append(file.name, file)\n\n    let startTime = Date.now()\n\n    return axios.post(\"/Coffees/SaveCoffee\", formData, {\n      onUploadProgress: uploadEvent => {\n        const queueProgress = Math.round(\n          (uploadEvent.loaded / uploadEvent.total) * 100\n        )\n        const timeElapsed = Date.now() - startTime\n        const uploadSpeedFirst = uploadEvent.loaded / (timeElapsed / 1000)\n        const uploadTimeRemaining = Math.ceil(\n          (uploadEvent.total - uploadEvent.loaded) / uploadSpeedFirst\n        )\n        const uploadTimeElapsed = Math.ceil(timeElapsed / 1000)\n        const uploadSpeed = uploadSpeedFirst / 1024 / 1024\n\n        eventBus.$emit(\"uploadData\", {\n          queueProgress,\n          uploadTimeRemaining,\n          uploadTimeElapsed,\n          uploadSpeed,\n        })\n      },\n    })\n  }\n}\n\n// Export a singletone instance in the global namespace\nexport const coffeeService = new CoffeeService()\n</code></pre>\n<p>Inside the method we construct an object, this object will notify all subscribers with current progress. This notification is done using <code>$emit</code> method. We also need to update the template to show this progress:</p>\n<pre><code class=\"language-html\">&#x3C;div v-if=\"uploadDetails.queueProgress > 0\">\n  &#x3C;table class=\"table\">\n    &#x3C;thead>\n      &#x3C;tr>\n        &#x3C;th width=\"15%\">Event&#x3C;/th>\n        &#x3C;th>Status&#x3C;/th>\n      &#x3C;/tr>\n    &#x3C;/thead>\n    &#x3C;tbody>\n      &#x3C;tr>\n        &#x3C;td>&#x3C;strong>Elapsed time&#x3C;/strong>&#x3C;/td>\n        &#x3C;td nowrap>{{uploadDetails.uploadTimeElapsed | number}} second(s)&#x3C;/td>\n      &#x3C;/tr>\n      &#x3C;tr>\n        &#x3C;td>&#x3C;strong>Remaining time&#x3C;/strong>&#x3C;/td>\n        &#x3C;td nowrap>{{uploadDetails.uploadTimeRemaining | number}} second(s)&#x3C;/td>\n      &#x3C;/tr>\n      &#x3C;tr>\n        &#x3C;td>&#x3C;strong>Upload speed&#x3C;/strong>&#x3C;/td>\n        &#x3C;td nowrap>{{uploadDetails.uploadSpeed | number}} MB/s&#x3C;/td>\n      &#x3C;/tr>\n      &#x3C;tr>\n        &#x3C;td>&#x3C;strong>Queue progress&#x3C;/strong>&#x3C;/td>\n        &#x3C;td>\n          &#x3C;div\n            class=\"progress-bar progress-bar-info progress-bar-striped\"\n            role=\"progressbar\"\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            :aria-valuenow=\"uploadDetails.queueProgress\"\n            :style=\"{ 'width': uploadDetails.queueProgress + '%' }\"\n          >\n            {{uploadDetails.queueProgress}}%\n          &#x3C;/div>\n        &#x3C;/td>\n      &#x3C;/tr>\n    &#x3C;/tbody>\n  &#x3C;/table>\n&#x3C;/div>\n</code></pre>\n<p>The backend is a simple MVC controller, all it does is uploading the file and saving the coffee into the database:</p>\n<pre><code class=\"language-csharp\">public async Task&#x3C;IActionResult> SaveCoffee(Coffee coffee)\n{\n// Uploading files\nvar fileName = await UploadFiles();\n\n    // Saving data\n    coffee.Image = fileName;\n    _coffeeService.Add(coffee);\n    _coffeeService.SaveChanges();\n\n    return Json(\"Coffee has been saved!\");\n\n}\n\nprivate async Task&#x3C;string> UploadFiles()\n{\nvar uploadsRootFolder = Path.Combine(\\_environment.WebRootPath, \"uploads\");\nif (!Directory.Exists(uploadsRootFolder))\n{\nDirectory.CreateDirectory(uploadsRootFolder);\n}\n\n    var files = Request.Form.Files;\n    foreach (var file in files)\n\n    {\n        if (file == null || file.Length == 0)\n        {\n            continue;\n        }\n\n        var filePath = Path.Combine(uploadsRootFolder, file.FileName);\n        using (var fileStream = new FileStream(filePath, FileMode.Create))\n        {\n            await file.CopyToAsync(fileStream).ConfigureAwait(false);\n            return file.FileName;\n        }\n    }\n\n    return string.Empty;\n\n}\n\n</code></pre>\n<img class=\"img-res\" src=\"/img/upload-file-vue.gif\" alt=\"Upload file using Vue.js\" />\n<p>You can grab the working sample project from <a href=\"https://github.com/SirwanAfifi/vue-experiments\">GitHub</a>.</p>"}},"pageContext":{"slug":"Uploading-file-in-Vue.js/"}},"staticQueryHashes":[]}