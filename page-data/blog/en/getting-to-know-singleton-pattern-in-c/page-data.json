{"componentChunkName":"component---src-templates-blog-details-js","path":"/blog/en/getting-to-know-singleton-pattern-in-c","result":{"data":{"markdownRemark":{"timeToRead":2,"frontmatter":{"date":"November 8th, 2016","title":"Getting to know Singleton pattern in C#","tags":["C#","Design Patterns"],"slug":"Getting-to-know-Singletone-Pattern/"},"html":"<p>This pattern helps us to ensure a class has only one instance. The term comes from the <a href=\"https://en.wikipedia.org/wiki/Singleton_(mathematics)\">mathematical concept of a singleton</a>:</p>\n<blockquote>\n<p>In mathematics, a singleton, also known as a unit set,[1] is a set with exactly one element. For example, the set {0} is a singleton.</p>\n</blockquote>\n<p>Eventually we must have a class that only gives us a single instance:</p>\n<pre><code class=\"language-csharp\">var sigleInstance = MySingletonClass.GetInstance();\n</code></pre>\n<p>As you can see the only way to access the instance is by calling a public static method called <code>GetInstance()</code>, the single object instance under consideration is created only for the first time it is requested. suppose the following class:</p>\n<pre><code class=\"language-csharp\">public class MySingletonClass\n{\n    public MySingletonClass()\n    {\n\n    }\n}\n</code></pre>\n<p>Now I want to make this class singleton, So the first step is to ensure that no one can instantiate our class for doing so we must make the constrauctor <code>private</code>:</p>\n<pre><code class=\"language-csharp\">public class MySingletonClass\n{\n    private MySingletonClass()\n    {\n\n    }\n}\n</code></pre>\n<p>Now whenever you want to create a new instance of <code>MySingletonClass</code> using <code>new</code> keyword, Visual Studio gives you this error:</p>\n<img class=\"img-res\" src=\"/img/singleton_error.jpg\" />\n<p>But we can still instantiate it from within the class. So next step is to create a new variable of type <code>MySingletonClass</code> inside the class, this class is going to be the only instance of the class:</p>\n<pre><code class=\"language-csharp\">public class MySingletonClass\n{\n\tprivate static MySingletonClass _instance;\n\n\tprivate MySingletonClass() { }\n}\n</code></pre>\n<p>So we are getting close to implementing the pattern. Now we need a way to get access the single instance. So we need a method like this:</p>\n<pre><code class=\"language-csharp\">public static MySingletonClass GetInstance()\n{\n\tif (_instance == null)\n\t{\n\t\t_instance = new MySingletonClass();\n\t}\n\treturn _instance;\n}\n</code></pre>\n<p>This method instantiates <code>MySingletonClass</code> if an instance doesn't already exist, otherwise it return the existing instance. To demonstrate the object lifetime we can print value of <code>GetHashCode()</code> fo these objects:</p>\n<pre><code class=\"language-csharp\">var mySingleInstance   = MySingletonClass.GetInstance();\nvar mySingleInstance_2 = MySingletonClass.GetInstance();\nvar mySingleInstance_3 = MySingletonClass.GetInstance();\nvar mySingleInstance_4 = MySingletonClass.GetInstance();\n\nConsole.WriteLine($\"obj1: {mySingleInstance.GetHashCode()}\");\nConsole.WriteLine($\"obj2: {mySingleInstance_2.GetHashCode()} \");\nConsole.WriteLine($\"obj3: {mySingleInstance_3.GetHashCode()} \");\nConsole.WriteLine($\"obj4: {mySingleInstance_4.GetHashCode()} \");\n</code></pre>\n<img class=\"img-res\" src=\"/img/singleton_GetHashCode.jpg\" />\n<p>As you can see all of the objects are the same and share the same instance. The problem with this implementation is that, it's not <a href=\"http://csharpindepth.com/Articles/General/Singleton.aspx\">thread-safe</a>; it means that if seperate threads of execution access the <code>_instance</code> at the same time, more that one instance of the <code>MySingletonClass</code> object may be created. One of the solution is by using .NET 4's <code>Lazy&#x3C;T></code> type:</p>\n<pre><code class=\"language-csharp\">public class MySingletonClass\n{\n\tprivate static readonly Lazy&#x3C;MySingletonClass> _instance =\n\t\tnew Lazy&#x3C;MySingletonClass>(() => new MySingletonClass());\n\n    private MySingletonClass() { }\n\n    public static MySingletonClass GetInstance()\n    {\n    \treturn _instance.Value;\n    }\n\n}\n</code></pre>"}},"pageContext":{"slug":"Getting-to-know-Singletone-Pattern/"}},"staticQueryHashes":[]}