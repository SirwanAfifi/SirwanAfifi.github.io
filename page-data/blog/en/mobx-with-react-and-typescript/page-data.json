{"componentChunkName":"component---src-templates-blog-details-js","path":"/blog/en/mobx-with-react-and-typescript","result":{"data":{"markdownRemark":{"timeToRead":5,"frontmatter":{"date":"January 5th, 2020","title":"MobX with React and TypeScript","tags":["React","State Management","MobX"],"slug":"MobX-with-React-and-TypeScript/"},"html":"<p>MobX is one of the popular state management libraries. One of the great things about MobX is that we can store state in a simple data structure and allow the library to take care of keeping everything up to date. The MobX API is pretty simple; in fact, it has these four simple building blocks at its core:</p>\n<ul>\n<li>Observable</li>\n<li>Actions</li>\n<li>Computed</li>\n<li>Reactions</li>\n</ul>\n<h2>Observable</h2>\n<p>The idea is that when the data changes, the observable object notifies the observers. To define a property as observable, all we need to do is to use <code>@observable</code> decorator:</p>\n<pre><code class=\"language-js\">class TodoStore {\n  @observable todos: Todo[]\n}\n</code></pre>\n<p>Now When a new value is assigned to <code>todos</code> array, the notifications will fire, and all the associated observers will be notified.</p>\n<h2>Actions</h2>\n<p>Action is a way to change an observable (update the state). To define an action, we decorate methods inside the store with <code>@action</code>:</p>\n<pre><code class=\"language-js\">@action toggleTodo = (id: string) => {\n    this.todos = this.todos.map(todo => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          completed: !todo.completed\n        };\n      }\n      return todo;\n    });\n};\n</code></pre>\n<h2>Computed</h2>\n<p>Computed can be used to derive values from the existing state or other computed values:</p>\n<pre><code class=\"language-js\">@computed get info() {\n    return {\n      total: this.todos.length,\n      completed: this.todos.filter(todo => todo.completed).length,\n      notCompleted: this.todos.filter(todo => !todo.completed).length\n    };\n}\n</code></pre>\n<h2>Reactions</h2>\n<p>Reactions track observables from inside the store itself. In the example below if the action to set <code>todos</code> is called, then it runs the second argument.</p>\n<pre><code>class TodoStore {\n  constructor() {\n    reaction(\n      () => this.todos,\n      _ => console.log(this.todos.length)\n    );\n  }\n</code></pre>\n<h1>Creating a Simple Todo App with MobX and React</h1>\n<p>Now that we have talked about the main concepts, let's create a simple todo app using React, MobX and TypeScript:</p>\n<img class=\"img-res\" src=\"/img/mobx-project.png\" alt=\"MobX project\" />\n<p>So go to the terminal, create a directory then CD into it then type in this command to scaffold a new React project:</p>\n<pre><code class=\"language-js\">npx create-react-app . --typescript\n</code></pre>\n<p>For this project, I am using Bootstrap so let's add it as a dependency to the newly created project:</p>\n<pre><code class=\"language-js\">yarn add bootstrap --save\n</code></pre>\n<p>Now go to <code>index.tsx</code> and import <code>bootstrap.css</code>:</p>\n<pre><code class=\"language-js\">import \"bootstrap/dist/css/bootstrap.css\"\n</code></pre>\n<p>Now we'll install the needed dependencies:</p>\n<pre><code class=\"language-js\">yarn add mobx mobx-react-lite uuid @types/uuid --save\n</code></pre>\n<p>The next thing we have to do is to set <code>experimentalDecorators</code> flag to true in <code>tsconfig.json</code> in order for the MobX decorators to compile properly:</p>\n<pre><code class=\"language-json\">{\n  \"compilerOptions\": {\n    // other stuff...\n\n    \"experimentalDecorators\": true\n  }\n}\n</code></pre>\n<p>After all the above stuff is done, we have MobX ready to go. Now let's create a store inside the project <code>src/stores/TodoStore.ts</code>. Add the following code to it:</p>\n<pre><code class=\"language-js\">import { observable, action, computed, reaction } from \"mobx\"\nimport { createContext } from \"react\"\nimport uuidv4 from \"uuid/v4\"\n\nexport interface Todo {\n  id?: string;\n  title: string;\n  completed: boolean;\n}\n\nclass TodoStore {\n  constructor() {\n    reaction(() => this.todos, _ => console.log(this.todos.length))\n  }\n\n  @observable todos: Todo[] = [\n    { id: uuidv4(), title: \"Item #1\", completed: false },\n    { id: uuidv4(), title: \"Item #2\", completed: false },\n    { id: uuidv4(), title: \"Item #3\", completed: false },\n    { id: uuidv4(), title: \"Item #4\", completed: false },\n    { id: uuidv4(), title: \"Item #5\", completed: true },\n    { id: uuidv4(), title: \"Item #6\", completed: false },\n  ]\n\n  @action addTodo = (todo: Todo) => {\n    this.todos.push({ ...todo, id: uuidv4() })\n  }\n\n  @action toggleTodo = (id: string) => {\n    this.todos = this.todos.map(todo => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        }\n      }\n      return todo\n    })\n  }\n\n  @action removeTodo = (id: string) => {\n    this.todos = this.todos.filter(todo => todo.id !== id)\n  }\n\n  @computed get info() {\n    return {\n      total: this.todos.length,\n      completed: this.todos.filter(todo => todo.completed).length,\n      notCompleted: this.todos.filter(todo => !todo.completed).length,\n    }\n  }\n}\n\nexport default createContext(new TodoStore())\n</code></pre>\n<p>Now create a new folder called components in the <code>src</code> directory and add <code>TodoAdd.tsx</code> and <code>TodoList.tsx</code>.</p>\n<h3>TodoAdd</h3>\n<pre><code class=\"language-js\">import React, { useContext, useState } from \"react\"\nimport TodoStore from \"../stores/TodoStore\"\nimport { observer } from \"mobx-react-lite\"\n\nconst AddTodo = () => {\n  const [title, setTitle] = useState(\"\")\n  const todoStore = useContext(TodoStore)\n  const { addTodo, info } = todoStore\n\n  return (\n    &#x3C;>\n      &#x3C;div className=\"alert alert-primary\">\n        &#x3C;div className=\"d-inline col-4\">\n          Total items: &#x26;nbsp;\n          &#x3C;span className=\"badge badge-info\">{info.total}&#x3C;/span>\n        &#x3C;/div>\n        &#x3C;div className=\"d-inline col-4\">\n          Finished items: &#x26;nbsp;\n          &#x3C;span className=\"badge badge-info\">{info.completed}&#x3C;/span>\n        &#x3C;/div>\n        &#x3C;div className=\"d-inline col-4\">\n          Unfinished items: &#x26;nbsp;\n          &#x3C;span className=\"badge badge-info\">{info.notCompleted}&#x3C;/span>\n        &#x3C;/div>\n      &#x3C;/div>\n      &#x3C;div className=\"form-group\">\n        &#x3C;input\n          className=\"form-control\"\n          type=\"text\"\n          value={title}\n          placeholder=\"Todo title...\"\n          onChange={e => setTitle(e.target.value)}\n        />\n      &#x3C;/div>\n      &#x3C;div className=\"form-group\">\n        &#x3C;button\n          className=\"btn btn-primary\"\n          onClick={_ => {\n            addTodo({\n              title: title,\n              completed: false,\n            })\n            setTitle(\"\")\n          }}\n        >\n          Add Todo\n        &#x3C;/button>\n      &#x3C;/div>\n    &#x3C;/>\n  )\n}\n\nexport default observer(AddTodo)\n</code></pre>\n<h3>TodoList</h3>\n<pre><code class=\"language-js\">import React, { useContext } from \"react\";\nimport TodoStore from \"../stores/TodoStore\";\nimport { observer } from \"mobx-react-lite\";\n\nconst TodoList = () => {\n  const todoStore = useContext(TodoStore);\n  const { todos, toggleTodo, removeTodo } = todoStore;\n  return (\n    &#x3C;>\n      &#x3C;div className=\"row\">\n        &#x3C;table className=\"table table-hover\">\n          &#x3C;thead className=\"thead-light\">\n            &#x3C;tr>\n              &#x3C;th>Title&#x3C;/th>\n              &#x3C;th>Completed?&#x3C;/th>\n              &#x3C;th>Actions&#x3C;/th>\n            &#x3C;/tr>\n          &#x3C;/thead>\n          &#x3C;tbody>\n            {todos.map(todo => (\n              &#x3C;tr key={todo.id}>\n                &#x3C;td>{todo.title}&#x3C;/td>\n                &#x3C;td>{todo.completed ? \"âœ…\" : \"\"}&#x3C;/td>\n                &#x3C;td>\n                  &#x3C;button\n                    className=\"btn btn-sm btn-info\"\n                    onClick={_ => toggleTodo(todo.id!)}\n                  >\n                    Toggle\n                  &#x3C;/button>\n                  &#x3C;button\n                    className=\"btn btn-sm btn-danger\"\n                    onClick={_ => removeTodo(todo.id!)}\n                  >\n                    Remove\n                  &#x3C;/button>\n                &#x3C;/td>\n              &#x3C;/tr>\n            ))}\n          &#x3C;/tbody>\n        &#x3C;/table>\n      &#x3C;/div>\n    &#x3C;/>\n  );\n};\n\nexport default observer(TodoList);\n\n</code></pre>\n<p>Both components use <code>observer</code> which is an <a href=\"https://sirwan.info/archive/2019/09/22/Higher-Order-Components/\">HOC</a> to make the components observers of our store. So any changes to any of the observable will cause the React components to re-render.</p>\n<p>Thatâ€™s it ðŸš€ Youâ€™re now up and going with MobX in your React application.</p>\n<p><a href=\"https://github.com/SirwanAfifi/mobxwithts\">Here</a>'s the source for the project.</p>"}},"pageContext":{"slug":"MobX-with-React-and-TypeScript/"}},"staticQueryHashes":[]}