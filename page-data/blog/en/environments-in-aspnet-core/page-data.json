{"componentChunkName":"component---src-templates-blog-details-js","path":"/blog/en/environments-in-aspnet-core","result":{"data":{"markdownRemark":{"timeToRead":1,"frontmatter":{"date":"November 23rd, 2016","title":"Environments in ASP.NET Core","tags":["C#","ASP.NET Core"],"slug":"Environments-in-ASP.NET-Core/"},"html":"<p>In ASP.NET Core we can have different hosting environments, this is supported by an environment variable called <code>ASPNETCORE_ENVIRONMENT</code>. You can see this value is already set to <code>Development</code>:</p>\n<img class=\"img-res\" src=\"/img/environment.jpg\" />\n<p>This value is active as long as you run your application inside Visual Studio, So when you deploy your application you must change this value. Actually, this value comes from a file called <code>launchSettings.json</code>:</p>\n<pre><code class=\"language-csharp\">{\n  \"iisSettings\": {\n    \"windowsAuthentication\": false,\n    \"anonymousAuthentication\": true,\n    \"iisExpress\": {\n      \"applicationUrl\": \"http://localhost:13880/\",\n      \"sslPort\": 0\n    }\n  },\n  \"profiles\": {\n    \"IIS Express\": {\n      \"commandName\": \"IISExpress\",\n      \"launchBrowser\": true,\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    },\n    \"ProjectName\": {\n      \"commandName\": \"Project\",\n      \"launchBrowser\": true,\n      \"launchUrl\": \"http://localhost:5000\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    }\n  }\n}\n</code></pre>\n<p>You can determine what the environment is by using <code>IHostingEnvironment</code>:</p>\n<pre><code class=\"language-csharp\">public void Configure(IApplicationBuilder app,\n\tIHostingEnvironment env, ILoggerFactory loggerFactory)\n{\n\tloggerFactory.AddConsole();\n\n\tif (env.IsDevelopment())\n\t{\n\t\tapp.UseDeveloperExceptionPage();\n\t}\n\telse\n\t{\n\t\tapp.UseExceptionHandler(new ExceptionHandlerOptions\n\t\t{\n\t\t\tExceptionHandler = context => context.Response.WriteAsync(\"Opps!\")\n\t\t});\n\t}\n\n\t// other configurations\n}\n</code></pre>\n<p>This object also has a method called <code>IsEnvironment</code> for using custom environment:</p>\n<pre><code class=\"language-csharp\">if (env.IsEnvironment(\"envName\"))\n{\n    // some config\n}\n</code></pre>\n<p>One interesting thing is that the Startup class itself supports different environments, it means that for each environment you can have both <code>Configure</code> and <code>ConfigureServices</code>:</p>\n<pre><code class=\"language-csharp\">public void ConfigureDevelopment(IApplicationBuilder app, .....\npublic void ConfigureServicesDevelopment(IServiceCollection services)\n\npublic void ConfigureStaging(IApplicationBuilder app, .....\npublic void ConfigureServicesStaging(IServiceCollection services)\n\npublic void ConfigureProduction(IApplicationBuilder app, .....\npublic void ConfigureServicesProduction(IServiceCollection services)\n</code></pre>\n<p>Now you might ask how we can set this environment variable, well there are several ways that you can use, this great <a href=\"http://andrewlock.net/how-to-set-the-hosting-environment-in-asp-net-core/\">post</a> explains them in details.</p>"}},"pageContext":{"slug":"Environments-in-ASP.NET-Core/"}},"staticQueryHashes":[]}