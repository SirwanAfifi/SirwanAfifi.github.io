{"componentChunkName":"component---src-templates-blog-details-js","path":"/blog/en/typescript-and-vuejs","result":{"data":{"markdownRemark":{"frontmatter":{"date":"May 28th, 2018","title":"TypeScript and Vue.js","tags":["TypeScript","Vue.js","JavaScript","ASP.NET Core"],"slug":"TypeScript-and-Vue.js/"},"html":"<img class=\"img-res\" src=\"/img/vuepost.png\" alt=\"Webpack\" />\n<p>You might be wondering why do we need to worry about yet another framework when we already know there are things like Angular, React, ... the answer is simplicity. I have used Angular in some of my previous projects by Angular I mean the first version of it (AngularJS 1.x) but these days I feel like Angular team is going to force developers to migrate to Angular (2, 3, 4, 5, 6, ...). I really like Vue.js, it's really a great one because I think Vue.js is Declarative, Easy to Maintain and Powerful.\nAlso, the integration between Vue and TypeScript is really good. Just like other frameworks Vue also has CLI which helps you to scaffold your project quickly. In this blog post, I would like to show how to combine Vue.js with TypeScript inside an ASP.NET Core 2.x application.</p>\n<h3>Project Setup</h3>\n<p>The easiest way to get started is by using dotnet cli tool to create a project:</p>\n<pre><code class=\"language-bash\">dotnet new mvc --name aspnet-vue-typescript\n\n</code></pre>\n<p>Then cd to that directory and then use <code>code .</code> to open VSCode. At this point the project structure looks like this:</p>\n<img class=\"img-res\" src=\"/img/dotnet-new.png\" alt=\"Sample app\" />\n<p>To get started with our client side code we need to install some packages, for doing so we need <code>package.json</code> file:</p>\n<pre><code class=\"language-json\">{\n  \"name\": \"aspnet-vue-typescript\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &#x26;&#x26; exit 1\"\n  },\n  \"author\": \"Sirwan Afifi\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"ts-loader\": \"^4.3.0\",\n    \"typescript\": \"^2.8.3\",\n    \"vue\": \"^2.5.16\",\n    \"vue-class-component\": \"^6.2.0\",\n    \"vue-property-decorator\": \"^6.1.0\",\n    \"webpack\": \"^4.9.1\",\n    \"webpack-dev-server\": \"^3.1.4\"\n  },\n  \"devDependencies\": {\n    \"aspnet-webpack\": \"^2.0.3\",\n    \"css-loader\": \"^0.28.11\",\n    \"file-loader\": \"^1.1.11\",\n    \"sass-loader\": \"^7.0.1\",\n    \"style-loader\": \"^0.21.0\",\n    \"vue-loader\": \"^15.2.1\",\n    \"vue-template-compiler\": \"^2.5.16\",\n    \"webpack-cli\": \"^2.1.4\",\n    \"webpack-hot-middleware\": \"^2.22.2\"\n  }\n}\n</code></pre>\n<p>Once you installed this packages using <code>npm install</code>, we'll create our <code>webpack.config.js</code> file:</p>\n<pre><code class=\"language-js\">let webpack = require(\"webpack\")\nconst VueLoaderPlugin = require(\"vue-loader/lib/plugin\")\nlet path = require(\"path\")\n\nmodule.exports = {\n  entry: {\n    main: \"./ClientApp/main\",\n  },\n  output: {\n    path: path.resolve(__dirname, \"wwwroot\", \"js\"),\n    filename: \"[name].js\",\n    publicPath: \"/js/\",\n  },\n  module: {\n    rules: [\n      { test: /\\.vue$/, loader: \"vue-loader\" },\n      {\n        test: /\\.tsx?$/,\n        loader: \"ts-loader\",\n        exclude: /node_modules/,\n        options: { appendTsSuffixTo: [/\\.vue$/] },\n      },\n    ],\n  },\n  resolve: {\n    extensions: [\".tsx\", \".ts\", \".js\"],\n    alias: {\n      vue$: \"vue/dist/vue.esm.js\", // 'vue/dist/vue.common.js' for webpack 1\n    },\n  },\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        commons: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          name: \"main\",\n          chunks: \"all\",\n        },\n      },\n    },\n  },\n  plugins: [new VueLoaderPlugin()],\n}\n</code></pre>\n<p>As you can see we're telling webpack where the entry point is, so create a new directory inside the project called <code>ClientApp</code>, this directory contains all Vue's related files, Inside this directory, create a ts file called <code>main.ts</code> this file is going to be our entry point:</p>\n<pre><code class=\"language-js\">import Vue from \"vue\"\nimport MyComponent from \"./components/MyComponent.vue\"\n\nVue.config.productionTip = false\n\nconst v = new Vue({\n  el: \"#app\",\n  data() {\n    return {\n      name: \"Sirwan\",\n    }\n  },\n  components: {\n    MyComponent,\n  },\n})\n</code></pre>\n<p>Next, we have specified the output which is <code>bundle.js</code> file, this file doesn't yet exist, it's going to be created by webpack. Then we have specified TypeScript loader for webpack. Next thing left to do is adding <code>tsconfig.json</code> file to the project:</p>\n<pre><code class=\"language-js\">{\n    \"compilerOptions\": {\n        \"sourceMap\": true,\n        \"noImplicitReturns\": true,\n        \"noImplicitAny\": true,\n        \"experimentalDecorators\": true,\n        \"emitDecoratorMetadata\": true,\n        \"target\": \"es5\",\n        \"strict\": true,\n        \"module\": \"es2015\",\n        \"moduleResolution\": \"node\",\n        \"lib\": [\n            \"es2016\",\n            \"dom\"\n        ]\n    },\n    \"exclude\": [\n        \"node_modules\",\n        \"wwwroot\"\n    ]\n}\n</code></pre>\n<p>At this point if you run <code>npx webpack</code> you'll see the bundle file:</p>\n<img class=\"img-res\" src=\"/img/npx-webpack.png\" alt=\"Webpack\" />\n<p>Now we can add a script reference inside <code>Views/Shared/_Layout.cshtml</code> to <code>bundle.js</code> file:</p>\n<pre><code class=\"language-html\">&#x3C;script src=\"~/js/bundle.js\" asp-append-version=\"true\">&#x3C;/script>\n</code></pre>\n<p>Now we can use Vue inside our views:</p>\n<pre><code class=\"language-csharp\">@{\n    ViewData[\"Title\"] = \"Home Page\";\n}\n\n&#x3C;div class=\"jumbotron\">\n  &#x3C;h1 class=\"display-4\">Hello, {{ name }}&#x3C;/h1>\n&#x3C;/div>\n</code></pre>\n<h3>Hot Module Replacement</h3>\n<p>Webpack has something called Hot <a href=\"https://webpack.js.org/concepts/hot-module-replacement/\">Module Replacement</a>:</p>\n<blockquote>\n<p>Hot Module Replacement (HMR) exchanges, adds, or removes modules while an application is running, without a full reload. This can significantly speed up development in a few ways:\nRetain application state which is lost during a full reload.\nSave valuable development time by only updating what's changed.\nTweak styling faster -- almost comparable to changing styles in the browser's debugger.</p>\n</blockquote>\n<p>For adding this functionality we need to install <code>webpack-hot-middleware</code> package:</p>\n<pre><code class=\"language-bash\">npm i -D webpack-hot-middleware\n\n</code></pre>\n<p>Then we need to register this component into MVC's HTTP request pipeline in the <code>Configure</code> method, for doing this we need to install <a href=\"https://www.nuget.org/packages/Microsoft.AspNetCore.SpaServices\">Microsoft.AspNetCore.SpaServices</a>:</p>\n<pre><code class=\"language-csharp\">app.UseWebpackDevMiddleware(new WebpackDevMiddlewareOptions\n{\n    HotModuleReplacement = true\n});\n</code></pre>\n<p>This middleware looks for webpack file and automatically executes it for us when we change client side code:</p>\n<img class=\"img-res\" src=\"/img/reload-webpack.gif\" alt=\"Webpack\" />"}},"pageContext":{"slug":"TypeScript-and-Vue.js/"}},"staticQueryHashes":[]}