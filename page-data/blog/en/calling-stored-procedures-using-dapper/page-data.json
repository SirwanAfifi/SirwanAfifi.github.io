{"componentChunkName":"component---src-templates-blog-details-js","path":"/blog/en/calling-stored-procedures-using-dapper","result":{"data":{"markdownRemark":{"timeToRead":1,"frontmatter":{"date":"June 7th, 2019","title":"Calling Stored Procedures using Dapper","tags":["EF Core","Dapper","C#"],"slug":"Calling-Stored-Procedures/"},"html":"<p>Today I wanted to call a Stored Procedure using Entity Framework Core. It is possible using <code>DbSet.FromSql()</code> method, which is one of the powerful features of Entity Framework Core. It gives us the ability to run RAW SQL queries directly against a database:</p>\n<pre><code class=\"language-csharp\">var blogs = context.Blogs\n    .FromSql(\"CALL GetBlogs\")\n    .ToList();\n</code></pre>\n<p>But the problem is that the column names in the result set must match the column names that properties are mapped to. So, for example, given this Stored Procedure:</p>\n<pre><code class=\"language-sql\">CREATE DEFINER=`root`@`%` PROCEDURE `GetBlogs`()\nBEGIN\n\tselect avg(Rating) as average, min(Rating)as minimum, max(Rating) as maximum\n\tfrom blogs\nEND\n</code></pre>\n<p>In this case, your model must be exactly the same as the result set. Otherwise, you'd get an exception. Most of our Stored Procedure use some Aggregate functions. So I had to find another solution for it which was using Dapper. As you probably know, Dapper is nothing but a set of extension methods on top of <code>IDbConnection</code>. So to use it, you will need to install <code>Dapper</code> and register it using built-in IoC container in your ASP.NET Core application:</p>\n<pre><code class=\"language-csharp\">services.AddTransient&#x3C;IDbConnection>((sp) => new MySqlConnection(configuration.GetConnectionString(\"MyConnection\")));\n\n</code></pre>\n<p>Then you can use it inside your services:</p>\n<pre><code class=\"language-csharp\">public class MyService\n{\n    private readonly IDbConnection _dbConnection;\n\n    public MyService(IDbConnection dbConnection)\n    {\n        _dbConnection = dbConnection;\n    }\n\n    public Task&#x3C;IEnumerable&#x3C;BlogViewModel>> GetBlogs(long authorId)\n    {\n        var query = _dbConnection.QueryAsync&#x3C;BlogViewModel>(\"GetBlogs\", new { AuthorId = authorId },\n            commandType: CommandType.StoredProcedure);\n        return query;\n    }\n}\n</code></pre>"}},"pageContext":{"slug":"Calling-Stored-Procedures/"}},"staticQueryHashes":[]}