{"componentChunkName":"component---src-templates-blog-details-js","path":"/blog/en/getting-started-with-sequelize","result":{"data":{"markdownRemark":{"frontmatter":{"date":"October 12th, 2020","title":"Getting Started With Sequelize","tags":["Node.js","Sequelize"],"slug":"getting-started-with-sequelize/"},"html":"<p>Sequelize is an Object Relational Mapper (ORM) which enables us to query and manipulate data stored in a relational database. There are several ORM for Node.js out there. Sequelize is one of them and it's pretty popular. In this short tutorial we will have a quick look at Sequelize then we will write a simple Node.js application to connect to a MySQL database.</p>\n<h2>Setting up the project</h2>\n<p>To start off, head over to command line and type the following commands to initialise the project:</p>\n<pre><code class=\"language-js\">take sequelize_todo\nyarn init -y\nyarn add sequelize mysql2 dotenv ts-node typescript -D\n</code></pre>\n<p>Next, create a file called <code>dbConnection.ts</code> in the root of the project:</p>\n<pre><code class=\"language-js\">import { Sequelize } from \"sequelize\"\n\nconst sequelize = new Sequelize({\n  dialect: \"mysql\",\n  username: process.env.DATABASE_USERNAME,\n  password: process.env.DATABASE_PASSWORD,\n  database: process.env.DATABASE_NAME,\n  port: +process.env.DATABASE_PORT || 3306,\n})\n\nexport const database = {\n  sequelize,\n}\n</code></pre>\n<p>As you can see we have constructed an object using <code>Sequelize</code> constructor. This class needs some options which are required to connect to our MySQL database (that's why we have set <code>dialect</code> to \"mysql\". You can changes that to connect to other relational databases like SQL server, ...). Then we exported the newly created object.</p>\n<p>Next, create an <code>index.ts</code> file in the root of the project:</p>\n<pre><code class=\"language-js\">import * as dotenv from \"dotenv\"\ndotenv.config()\nimport { database } from \"./dbConnection\"\n\n;(async () => {\n  await database.sequelize.sync()\n})()\n</code></pre>\n<p>The first couple of lines are used to load <code>.env</code> file into <code>process.env</code>. This means that we will need to create another file in the root of the project to define our secret values:</p>\n<pre><code class=\"language-js\">DATABASE_HOST = localhost\nDATABASE_USERNAME = root\nDATABASE_PASSWORD = PASSWORD\nDATABASE_NAME = DBNAME\nDATABASE_PORT = 3306\n</code></pre>\n<p><strong>NOTE</strong>: Make sure you gitignore the <code>.env</code> file before pushing the code into remote repository.</p>\n<h2>Creating your first entity</h2>\n<p>Now we need to define our entity which is an abstraction that represents a table in your database. An entity is just a class that extends <code>Model</code>. So let's create a directory called <code>models</code> then create a file called <code>User.ts</code> inside that directory:</p>\n<pre><code class=\"language-js\">import * as Sequelize from \"sequelize\"\n\nclass User extends Sequelize.Model {\n  username: string\n  createdAt: Date\n}\nexport const InitUser = (sequelize: Sequelize.Sequelize) => {\n  User.init(\n    {\n      username: Sequelize.DataTypes.STRING,\n      createdAt: Sequelize.DataTypes.DATE,\n    },\n    {\n      sequelize,\n      tableName: \"Users\",\n    }\n  )\n}\n</code></pre>\n<p>To define our entity and its properties (Columns) we need to have access to the <code>sequelize</code> object which we exported previously. So let's head over to the <code>dbConnection.ts</code> file and update the file by passing <code>sequelize</code> object to the <code>InitUser</code> (which we have just exported):</p>\n<pre><code class=\"language-js\">export const database = {\n  sequelize,\n  User: InitUser(sequelize),\n}\n</code></pre>\n<p>Now if you run the project <code>ts-node index.ts</code> you will get this error:</p>\n<pre><code class=\"language-js\">(node:11377) UnhandledPromiseRejectionWarning: SequelizeConnectionError: Unknown database 'sequelize_sample'\n</code></pre>\n<p>It's because Sequelize doesn't know how to created the database so it needs a database to start with. So let's create the schema in MySQL:</p>\n<pre><code class=\"language-sql\">CREATE SCHEMA `sequelize_sample` ;\n</code></pre>\n<p>Now if you run the project one more time, Sequelize is able to create the table for you:</p>\n<pre><code class=\"language-js\">Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `username` VARCHAR(255), `createdAt` DATETIME, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;\nExecuting (default): SHOW FULL COLUMNS FROM `Users`;\nExecuting (default): SELECT CONSTRAINT_NAME as constraint_name,CONSTRAINT_NAME as constraintName,CONSTRAINT_SCHEMA as constraintSchema,CONSTRAINT_SCHEMA as constraintCatalog,TABLE_NAME as tableName,TABLE_SCHEMA as tableSchema,TABLE_SCHEMA as tableCatalog,COLUMN_NAME as columnName,REFERENCED_TABLE_SCHEMA as referencedTableSchema,REFERENCED_TABLE_SCHEMA as referencedTableCatalog,REFERENCED_TABLE_NAME as referencedTableName,REFERENCED_COLUMN_NAME as referencedColumnName FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = 'Users' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='sequelize_sample' AND REFERENCED_TABLE_NAME IS NOT NULL;\nExecuting (default): ALTER TABLE `Users` CHANGE `username` `username` VARCHAR(255);\nExecuting (default): ALTER TABLE `Users` CHANGE `createdAt` `createdAt` DATETIME;\nExecuting (default): ALTER TABLE `Users` CHANGE `updatedAt` `updatedAt` DATETIME NOT NULL;\nExecuting (default): SHOW INDEX FROM `Users` FROM `sequelize_sample`\n</code></pre>\n<p>In the next blog post I will explain how to query and manipulate data. You can find the code here on GitHub. (<a href=\"https://github.com/SirwanAfifi/sequelize_sample\">https://github.com/SirwanAfifi/sequelize_sample</a>)</p>"}},"pageContext":{"slug":"getting-started-with-sequelize/"}},"staticQueryHashes":[]}