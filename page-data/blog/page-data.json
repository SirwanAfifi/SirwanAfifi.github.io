{"componentChunkName":"component---src-pages-blog-js","path":"/blog/","webpackCompilationHash":"c871001d7f3203a6495a","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"Higher-Order Components","date":"September 22nd, 2019","slug":"Higher-Order-Components/"},"html":"<p>Before we get started, we need to understand what a higher-order function is. In JavaScript functions are first-class citizens because they are treated like any other variables:</p>\n<ul>\n<li>They can be created using literals:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// function body</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>They can be assigned to other types:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">myFunction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// function body</span>\n<span class=\"token punctuation\">}</span>\nmyArray<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// function body</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nmyObj<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">data</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// function body</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>A function can be passed to another function as an argument:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">myFunction</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// function body</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>A function can return another function:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// function body, inside this scope we can also have access to outter scope</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>We can add new properties to a function:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">myFunction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// function body</span>\n<span class=\"token punctuation\">}</span>\nmyFunction<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Function name\"</span></code></pre></div>\n<h2>Higher-Order Component(Function)</h2>\n<p>Now talking about Higher-Order function makes more sense. A higher-order function is basically a function that can take another function as an argument, or returns a function as a result. In React it's pretty much the same concept; It takes a component as an argument and returns a component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> Component <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Component <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>this<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It's great becuase we can wrap a component with another component; this means that we can add extra functionalities to a component so it can be usfuel to share common functionality between components without repeating code. They are often used for <code class=\"language-text\">cross-cutting</code> concerns. An example of it could be private routes inside a React application:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Route<span class=\"token punctuation\">,</span> Redirect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PrivateRoute</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> component<span class=\"token punctuation\">:</span> Component<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Route\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span>\n    render<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">props</span> <span class=\"token operator\">=></span>\n      <span class=\"token function\">isUserAuthenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>Component <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>Redirect\n          to<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            pathname<span class=\"token punctuation\">:</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span>\n            state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">:</span> props<span class=\"token punctuation\">.</span>location <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Here, the <code class=\"language-text\">PrivateRoute</code> is itself a function that is used to enhance another component. The way it enhance is to wrap the incoming component with <code class=\"language-text\">Route</code> component.</p>","excerpt":"Before we get started, we need to understand what a higher-order function is. In JavaScript functions are first-class citizens because they…","fields":{"slug":"2019-09-22-Higher-Order-Components"}}},{"node":{"frontmatter":{"title":"Importing JSON files into SQL Server","date":"September 18th, 2019","slug":"Importing-JSON-files-into-SQL-Server/"},"html":"<p>I was assigned to a task to import a <a href=\"https://en.wikipedia.org/wiki/GeoJSON\">GeoJSON</a> file into a SQL Server database. The file was pretty big; I couldn't even open the file in an editor. At first, I wanted to write a simple program (with C# or Python) to open the file and then loop through the entries, parse each one of the entry and then save it into the database. But it would have taken time if I followed that process. All I wanted to do was save a JSON file right into the database. That's where I gave <code class=\"language-text\">OPENROWSET</code> a try. Everything went well, and I successfully saved the file into the database:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@GeoJSON</span> nvarchar<span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@GeoJSON</span> <span class=\"token operator\">=</span> BulkColumn\n <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">OPENROWSET</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">BULK</span> <span class=\"token string\">'C:\\areas.json'</span><span class=\"token punctuation\">,</span> SINGLE_CLOB<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> j\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dbo<span class=\"token punctuation\">.</span>Areas <span class=\"token punctuation\">(</span>Area<span class=\"token punctuation\">,</span>Coordinates<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SELECT</span>\n\tArea<span class=\"token punctuation\">,</span>\n\tCoordinates\n<span class=\"token keyword\">FROM</span>\n    OPENJSON<span class=\"token punctuation\">(</span><span class=\"token variable\">@GeoJSON</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'$.features'</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">WITH</span> <span class=\"token punctuation\">(</span>\n                 Area <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token string\">'$.properties.name'</span><span class=\"token punctuation\">,</span>\n                 Coordinates nvarchar<span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span> <span class=\"token string\">'$.geometry.coordinates'</span> <span class=\"token keyword\">as</span> JSON\n                 <span class=\"token punctuation\">)</span></code></pre></div>\n<p>As you might already know, the <code class=\"language-text\">OPENROWSET</code> is a table value function which returns a table with a single column called <code class=\"language-text\">Bulk</code>. What above code does is first open the JSON file and assign it to a variable called <code class=\"language-text\">GeoJSON</code>. Then I used another table value column called <code class=\"language-text\">OPENJSON</code> to parse the JSON. The first thing we can do is to set our root element, which is <code class=\"language-text\">features</code> in my case. Then elements can be referenced with the prefix <code class=\"language-text\">$</code>. There are two important things to mention. First, if you want to save a JSON element into a string column you will need to make sure the column type is <code class=\"language-text\">nvarchar(max)</code> and you add <code class=\"language-text\">as JSON</code> inside the <code class=\"language-text\">WITH</code> clause for that specific column.</p>\n<p>You can also build a geography value if you have a column with that type:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@GeoJSON</span> nvarchar<span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@GeoJSON</span> <span class=\"token operator\">=</span> BulkColumn\n <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">OPENROWSET</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">BULK</span> <span class=\"token string\">'C:\\areas.json'</span><span class=\"token punctuation\">,</span> SINGLE_CLOB<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> j\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dbo<span class=\"token punctuation\">.</span>Areas <span class=\"token punctuation\">(</span>Area<span class=\"token punctuation\">,</span>Coordinates<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SELECT</span>\n\tArea<span class=\"token punctuation\">,</span>\n\tCoordinates<span class=\"token punctuation\">,</span>\n    geography::STPointFromText<span class=\"token punctuation\">(</span><span class=\"token string\">'POINT ('</span> <span class=\"token operator\">+</span> Longitude <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> Latitude <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4326</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> Geography<span class=\"token punctuation\">,</span>\n    Longitude<span class=\"token punctuation\">,</span>\n    Latitude\n<span class=\"token keyword\">FROM</span>\n    OPENJSON<span class=\"token punctuation\">(</span><span class=\"token variable\">@GeoJSON</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'$.features'</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">WITH</span> <span class=\"token punctuation\">(</span>\n                 Area <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token string\">'$.properties.name'</span><span class=\"token punctuation\">,</span>\n                 Coordinates nvarchar<span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span> <span class=\"token string\">'$.geometry.coordinates'</span> <span class=\"token keyword\">as</span> JSON<span class=\"token punctuation\">,</span>\n                 Longitude <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token string\">'$.lon'</span><span class=\"token punctuation\">,</span>\n                 Latitude <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token string\">'$.lat'</span>\n                 <span class=\"token punctuation\">)</span></code></pre></div>","excerpt":"I was assigned to a task to import a GeoJSON file into a SQL Server database. The file was pretty big; I couldn't even open the file in an…","fields":{"slug":"2019-09-18-Importing-JSON-files-into-SQL-SERVER"}}},{"node":{"frontmatter":{"title":"Using IHostingEnvironment in a test project","date":"August 9th, 2019","slug":"Using-IHostingEnvironment-in-a-test-project/"},"html":"<p>Assume that you have a service which accepts <code class=\"language-text\">IHostingEnvironment</code> as its dependency:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IHostingEnvironment</span> hostingEnv<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MyService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IHostingEnvironment</span> hostingEnv<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hostingEnv <span class=\"token operator\">=</span> hostingEnv<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> Task<span class=\"token operator\">&lt;</span>IEnumerable<span class=\"token operator\">&lt;</span>Post<span class=\"token operator\">>></span> <span class=\"token function\">GetPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> fileInfo <span class=\"token operator\">=</span> hostingEnv<span class=\"token punctuation\">.</span>ContentRootFileProvider<span class=\"token punctuation\">.</span><span class=\"token function\">GetFileInfo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"posts.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> file <span class=\"token operator\">=</span> File<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAllText</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span>PhysicalPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> deserializeObject <span class=\"token operator\">=</span> JsonConvert<span class=\"token punctuation\">.</span>DeserializeObject<span class=\"token operator\">&lt;</span>IEnumerable<span class=\"token operator\">&lt;</span>Post<span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">FromResult</span><span class=\"token punctuation\">(</span>deserializeObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we wan to be able to load that JSON file inside a test project in order to test the service. First of all, we need to make sure we have these packages installed on the test project:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.AspNetCore.Hosting<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2.2.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.AspNetCore.Hosting.Abstractions<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2.2.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.Extensions.DependencyInjection<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2.2.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.Extensions.DependencyInjection.Abstractions<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2.2.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.Extensions.FileProviders.Physical<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2.2.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Test.Sdk<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>16.0.1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>xunit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2.4.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>xunit.runner.visualstudio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2.4.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>We also need to modify the csproj file to copy the JSON file to the build output:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Update</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>data.json<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CopyToOutputDirectory</span><span class=\"token punctuation\">></span></span>PreserveNewest<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>CopyToOutputDirectory</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>None</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Then we need a base class to configure the built-in DI container and register <code class=\"language-text\">IHostingEnvironment</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> GreatSpot<span class=\"token punctuation\">.</span>Tests\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseTest</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">IServiceProvider</span> Services <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">BaseTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> serviceCollection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServiceCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            serviceCollection<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IHostingEnvironment</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HostingEnvironment</span>\n            <span class=\"token punctuation\">{</span>\n                ContentRootFileProvider <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PhysicalFileProvider</span><span class=\"token punctuation\">(</span>Environment<span class=\"token punctuation\">.</span>CurrentDirectory<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Services <span class=\"token operator\">=</span> serviceCollection<span class=\"token punctuation\">.</span><span class=\"token function\">BuildServiceProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we can use the registred service in our test methods:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostTests</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">BaseTest</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">Fact</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token class-name\">Task</span> <span class=\"token function\">Get_All_Posts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> hostingEnvironment <span class=\"token operator\">=</span> Services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetService</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IHostingEnvironment</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">var</span> myService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyService</span><span class=\"token punctuation\">(</span>hostingEnvironment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> myService<span class=\"token punctuation\">.</span><span class=\"token function\">GetPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"Assume that you have a service which accepts  as its dependency: Now we wan to be able to load that JSON file inside a test project in order…","fields":{"slug":"2019-08-09-Using-IHostingEnvironment-in-a-test-project"}}},{"node":{"frontmatter":{"title":"Migrating To Gatsby","date":"July 22nd, 2019","slug":"Migrating-To-Gatsby/"},"html":"<p>Jekyll got me into blogging mostly because of its markdown support. When I first saw it, it was clear to me I had to have it. I'd say it was(still is) a fast possible way for blogging and I liked it. Also, the additional bonus was to host the blog using GitHub pages. Jekyll is excellent; It gets you started quickly without having to worry about how to set up things. Recently I decided to use JavaScript-based solutions. Gatsby has been the 1st item in my list. I've been playing around with it, and so far I'm quite happy. It's basically a framework based on React and GraphQL that makes it easy to create both website and web applications. It's also a static website generator. The cool thing about Gatsby is that we can also use it for building complex web apps with data storage, authentication and more. These abstractions allow us to connect any data source to our application.</p>\n<img class=\"center-image\" src=\"/img/gatsby.png\" alt=\"gatsby\" width=\"600\">\n<h2>Why Gatsby?</h2>\n<ul>\n<li>It's super fast</li>\n<li>It's super easy to work with</li>\n<li>It has so many features baked right in</li>\n<li>We can create a web project in a matter of minutes without needing to install/customise build tools</li>\n<li>It comes with everything we need to get started right away</li>\n</ul>\n<p>Publishing a blog post can be done in a few lines now:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">git add <span class=\"token punctuation\">.</span> <span class=\"token operator\">&amp;&amp;</span> git commit <span class=\"token operator\">-</span>m <span class=\"token string\">\"new blog\"</span>\nnpm run deploy<span class=\"token punctuation\">:</span>github</code></pre></div>\n<p>I feel like everything feels more under control now:</p>\n<img class=\"center-image\" src=\"/img/gatsby_project.png\" alt=\"gatsby\" width=\"600\">","excerpt":"Jekyll got me into blogging mostly because of its markdown support. When I first saw it, it was clear to me I had to have it. I'd say it was…","fields":{"slug":"2019-07-22-Migrating-To-Gatsby"}}},{"node":{"frontmatter":{"title":"Morse code","date":"July 8th, 2019","slug":"Programming-challenges-morse-code/"},"html":"<img class=\"center-image\" src=\"/img/morse_code.png\" alt=\"Morse Code table\" width=\"600\">\n<p>Morse Code is a set of dots and dashes (short mark, dot or 'dit' (·) and longer mark, dash or 'dah' (-)). Basically, it's a character encoding scheme for transmitting cryptographic messages which used in telecommunication. Think of it as the early version of texting. The system is named after the American artist Samuel Finley Breese Morse who co-developed an electrical telegraph system at the beginning of 1836. In fact it was heavily used for (secret) transmissions during WWI and WWII. Different combination of dots and dashes will produce different letters it also means that different combination of letters will be eventually your encoded messages.</p>\n<img class=\"center-image\" src=\"/img/International_Morse_Code.svg\" alt=\"Morse Code table\" width=\"700\">\n<p>I thought it might be a good idea to write my name in Morse code to see how it looks like. Since I am a lazy developer, so I ended up writing a React application to do the job for me:</p>\n<img class=\"center-image\" src=\"/img/morse_code_translator.gif\" alt=\"Morse Code video\" width=\"700\">\n<p>Here's the implementation in JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> language <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  alphabets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">A</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">B</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">C</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">D</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">E</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">F</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">G</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">H</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">I</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">J</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">K</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">M</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">N</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">L</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">N</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">O</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">P</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">Q</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−•−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">R</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">S</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">T</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">U</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">V</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">W</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">X</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−••−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">Y</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">Z</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−••\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  numeral<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−−−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•••−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•••••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"6\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−••••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"7\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−•••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"8\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−−••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"9\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−−−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−−−−\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  punctuations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"•\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−•−•−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\",\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−••−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"?\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−−••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\":\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−−•••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\";\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•−•−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"−\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−••••−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−••−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'\"'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−••−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−−−−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•−−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\")\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•−−•−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"=\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•••−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−•−•\"</span><span class=\"token punctuation\">,</span>\n    $<span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−••−\"</span><span class=\"token punctuation\">,</span>\n    q<span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−•−••\"</span><span class=\"token punctuation\">,</span>\n    _<span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−−•−\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">translateToMorseCode</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">input</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> inputArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>input<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> morseCode <span class=\"token operator\">=</span> inputArray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span>\n      language<span class=\"token punctuation\">.</span>alphabets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span>\n      language<span class=\"token punctuation\">.</span>numeral<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span>\n      language<span class=\"token punctuation\">.</span>punctuations<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> code <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> morseCode<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">translateToEnglish</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">input</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> inputArray <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> engWord <span class=\"token operator\">=</span> inputArray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span>\n      Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">.</span>alphabets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> language<span class=\"token punctuation\">.</span>alphabets<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> i\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span>\n      Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">.</span>punctuations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> language<span class=\"token punctuation\">.</span>punctuations<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> i\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span>\n      Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">.</span>numeral<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> language<span class=\"token punctuation\">.</span>numeral<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> i\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">?</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> engWord<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Since the original idea of Morse Code was to signal the message in a form perceptible to the human senses, such as sound waves or visible light, so I have added the ability to play a sound while coding the message:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> output<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">of</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">translateToMorseCode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> <span class=\"token string\">\"•\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">playSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> <span class=\"token string\">\"−\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">playSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">playSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> output<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>output <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> i <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can grab the working sample project from <a href=\"https://github.com/SirwanAfifi/morse\">GitHub</a>.</p>","excerpt":"Morse Code is a set of dots and dashes (short mark, dot or 'dit' (·) and longer mark, dash or 'dah' (-)). Basically, it's a character…","fields":{"slug":"2019-07-08-Programming-challenges-morse-code"}}},{"node":{"frontmatter":{"title":"Calling Stored Procedures using Dapper","date":"June 7th, 2019","slug":"Calling-Stored-Procedures/"},"html":"<p>Today I wanted to call a Stored Procedure using Entity Framework Core. It is possible using <code class=\"language-text\">DbSet.FromSql()</code> method, which is one of the powerful features of Entity Framework Core. It gives us the ability to run RAW SQL queries directly against a database:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> blogs <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>Blogs\n    <span class=\"token punctuation\">.</span><span class=\"token function\">FromSql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CALL GetBlogs\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But the problem is that the column names in the result set must match the column names that properties are mapped to. So, for example, given this Stored Procedure:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DEFINER</span><span class=\"token operator\">=</span><span class=\"token punctuation\">`</span>root<span class=\"token punctuation\">`</span><span class=\"token variable\">@`%`</span> <span class=\"token keyword\">PROCEDURE</span> <span class=\"token punctuation\">`</span>GetBlogs<span class=\"token punctuation\">`</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span>\n\t<span class=\"token keyword\">select</span> <span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>Rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> average<span class=\"token punctuation\">,</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>Rating<span class=\"token punctuation\">)</span><span class=\"token keyword\">as</span> minimum<span class=\"token punctuation\">,</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>Rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> maximum\n\t<span class=\"token keyword\">from</span> blogs\n<span class=\"token keyword\">END</span></code></pre></div>\n<p>In this case, your model must be exactly the same as the result set. Otherwise, you'd get an exception. Most of our Stored Procedure use some Aggregate functions. So I had to find another solution for it which was using Dapper. As you probably know, Dapper is nothing but a set of extension methods on top of <code class=\"language-text\">IDbConnection</code>. So to use it, you will need to install <code class=\"language-text\">Dapper</code> and register it using built-in IoC container in your ASP.NET Core application:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddTransient</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IDbConnection</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySqlConnection</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">.</span><span class=\"token function\">GetConnectionString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyConnection\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then you can use it inside your services:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IDbConnection</span> _dbConnection<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MyService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IDbConnection</span> dbConnection<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _dbConnection <span class=\"token operator\">=</span> dbConnection<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> Task<span class=\"token operator\">&lt;</span>IEnumerable<span class=\"token operator\">&lt;</span>BlogViewModel<span class=\"token operator\">>></span> <span class=\"token function\">GetBlogs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> authorId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> query <span class=\"token operator\">=</span> _dbConnection<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">QueryAsync</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BlogViewModel</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GetBlogs\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> AuthorId <span class=\"token operator\">=</span> authorId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            commandType<span class=\"token punctuation\">:</span> CommandType<span class=\"token punctuation\">.</span>StoredProcedure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> query<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"Today I wanted to call a Stored Procedure using Entity Framework Core. It is possible using  method, which is one of the powerful features…","fields":{"slug":"2019-06-07-Calling-Stored-Procedures"}}},{"node":{"frontmatter":{"title":"Highlighting Current Link in Razor Pages","date":"May 31st, 2019","slug":"Razor-Pages-Highlight-Current-Link/"},"html":"<p>Let's say you have several pages in your Razor Pages application. Now you want to make the menu items active depending on the page you are currently on:</p>\n<img class=\"center-image\" src=\"/img/active_menu.png\" alt=\"Active menu\" width=\"700\">\n<p>The solution is pretty simple; all you need to do is checking the request path in <code class=\"language-text\">_Layout</code> file. To access the Request object, you need to inject <code class=\"language-text\">IHttpContextAccessor</code> in the layout file. Before injecting this interface into our view we must register it in <code class=\"language-text\">ConfigureServices</code> method in Startup class:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IHttpContextAccessor</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpContextAccessor</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>Note</em>: If you are using ASP.NET Core 2.1+ you can use <code class=\"language-text\">AddHttpContextAccessor</code> helper extension method to correctly register the <code class=\"language-text\">IHttpContextAccessor</code> with the correct lifetime (singleton):</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddHttpContextAccessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we should be able to access current <code class=\"language-text\">HttpContext</code> inside our views:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">@inject Microsoft.AspNetCore.Http.IHttpContextAccessor Accessor\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Layout<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/css/shared.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    @RenderSection(\"styles\", false)\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>header-shadow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>container is-fluid header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nav</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>navbar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>navbar-menu navbar-end<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>mainNavMenu<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                    &lt;a class=\"navbar-item @(Accessor.HttpContext.Request.Path.Value == \"/\" ? \"nav-item-selected\" : \"\" )\" href=\"/\">Home<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n                    &lt;a class=\"navbar-item @(Accessor.HttpContext.Request.Path.Value == \"/Services\" ? \"nav-item-selected\" : \"\" )\" href=\"/Services\">Services<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n                    &lt;a class=\"navbar-item @(Accessor.HttpContext.Request.Path.Value == \"/About\" ? \"nav-item-selected\" : \"\" )\" href=\"/About\">About Us<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n                    &lt;a class=\"navbar-item @(Accessor.HttpContext.Request.Path.Value == \"/Contact\" ? \"nav-item-selected\" : \"\" )\" href=\"/Contact\">Contact<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nav</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span>\n\n    @RenderBody()\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>","excerpt":"Let's say you have several pages in your Razor Pages application. Now you want to make the menu items active depending on the page you are…","fields":{"slug":"2019-05-31-Razor-Pages-Highlight-Current-Link"}}},{"node":{"frontmatter":{"title":"Passed Exam 70-483 - Programming in C#","date":"May 25th, 2019","slug":"Passed-Exam-70-483-exam/"},"html":"<p><a href=\"https://www.youracclaim.com/badges/4f0b2269-04b6-4d81-8b37-e25f7956dc4f\"><img class=\"center-image\" src=\"/img/csharp_badge.png\" alt=\"CSharp notes\" width=\"230\"></a></p>\n<p>I have been developing with C# for a while, and I decided to pass Exam 70-483 in order to validate my skill. In order to pass the exam, you should be able to perform the following skills:</p>\n<h2>Manage program flow (25–30%)</h2>\n<ul>\n<li>Implement multithreading and asynchronous processing</li>\n<li>Manage multithreading</li>\n<li>Implement program flow</li>\n<li>Iterate across collection and array items; program decisions by using switch statements, if/then, and operators; evaluate expressions</li>\n<li>Create and implement events and callbacks</li>\n<li>Create event handlers; subscribe to and unsubscribe from events; use built-in delegate types to create events; create delegates; lambda expressions; anonymous methods</li>\n<li>Implement exception handling</li>\n</ul>\n<h2>Create and use types (25–30%)</h2>\n<ul>\n<li>Create types</li>\n<li>Consume types</li>\n<li>Enforce encapsulation</li>\n<li>Create and implement a class hierarchy</li>\n<li>Find, execute, and create types at runtime by using reflection</li>\n<li>Manage the object life cycle</li>\n<li>Manipulate strings</li>\n</ul>\n<h2>Debug applications and implement security (25–30%)</h2>\n<ul>\n<li>Validate application input</li>\n<li>Perform symmetric and asymmetric encryption</li>\n<li>Manage assemblies</li>\n<li>Debug an application</li>\n<li>Implement diagnostics in an application</li>\n</ul>\n<h2>Implement data access (25–30%)</h2>\n<ul>\n<li>Perform I/O operations</li>\n<li>Consume data</li>\n<li>Query and manipulate data and objects by using LINQ</li>\n<li>Serialize and deserialize data</li>\n<li>Store data in and retrieve data from collections</li>\n</ul>\n<p>You can check the details in the <a href=\"https://www.microsoft.com/en-us/learning/exam-70-483.aspx\">Exam 70–483 Official Website</a>.</p>\n<h1>Resources</h1>\n<p>These are the books I used for passing the exam.</p>\n<img class=\"center-image\" src=\"/img/books.jpg\" alt=\"CSharp notes\" width=\"400\">\n<ul>\n<li><a href=\"https://www.amazon.com/Exam-Ref-70-483-Programming-Miles/dp/1509306986\">Exam Ref 70-483 Programming in C#, 2nd Edition By Rob Miles</a></li>\n<li><a href=\"https://www.amazon.com/C-6-0-Nutshell-Definitive-Reference/dp/1491927062/ref=sr_1_4?crid=218XJSHWO1SYD&#x26;keywords=c+in+a+nutshell&#x26;qid=1560670921&#x26;s=books&#x26;sprefix=C%23+in+a+%2Cstripbooks-intl-ship%2C380&#x26;sr=1-4\">C# 6.0 in a Nutshell: The Definitive Reference</a></li>\n</ul>\n<p>The way I read these books was by reading them from cover to cover and highlight important things:</p>\n<img class=\"center-image\" src=\"/img/csharp_notes.png\" alt=\"CSharp notes\" width=\"400\">\n<p>I also kept track of the notes somewhere else to review them after finishing the books:</p>\n<img class=\"center-image\" src=\"/img/csharp_notes_doc.png\" alt=\"CSharp notes\" width=\"400\">","excerpt":"I have been developing with C# for a while, and I decided to pass Exam 70-483 in order to validate my skill. In order to pass the exam, you…","fields":{"slug":"2019-05-25-Passed-Exam-70-483-exam"}}},{"node":{"frontmatter":{"title":"Hosting React app on IIS","date":"April 9th, 2019","slug":"Hosting-react-app-on-iis/"},"html":"<p>Today I wanted to host a React application; the first and easiest option was hosting the app using a package called <a href=\"https://github.com/zeit/serve\">serve</a> which is basically a static file serving tool. The process was easy, all I had to do was first prepare a production build of my application using <code class=\"language-text\">npm run build</code> then run the <code class=\"language-text\">npx serve</code> command inside my build's directory:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cd build\nserve <span class=\"token operator\">-</span>s</code></pre></div>\n<p>This is great but the problem is that my application is using React Router and when I wanted to navigate between pages I got <code class=\"language-text\">404</code> error:</p>\n<img class=\"center-image\" src=\"/img/react-serve-404.png\" alt=\"React App 404\" width=\"700\">\n<p>based on the officail React docs:</p>\n<blockquote>\n<p>If you use routers that use the HTML5 pushState history API under the hood (for example, React Router with browserHistory), many static file servers will fail. For example, if you used React Router with a route for /todos/42, the development server will respond to localhost:3000/todos/42 properly, but an Express serving a production build as above will not. This is because when there is a fresh page load for a /todos/42, the server looks for the file build/todos/42 and does not find it. The server needs to be configured to respond to a request to /todos/42 by serving index.html</p>\n</blockquote>\n<p>So I decided to host the app on IIS and define a URL rewrite to redirect all unknown paths to <code class=\"language-text\">index.html</code>. URL Rewrite isn't installed by defualt so you must <a href=\"https://www.iis.net/downloads/microsoft/url-rewrite\">install</a> it if you haven't already. Here's what I did to host my React application:</p>\n<p>1- Adding a new website on IIS</p>\n<img class=\"center-image\" src=\"/img/create-website-react-app.png\" alt=\"Create website on IIS for React app\" width=\"700\">\n<p>2- Adding the following rule to URL rewrite:</p>\n<img class=\"center-image\" src=\"/img/url-rewite-ui.png\" alt=\"URL Rewrite UI\" width=\"700\">\n<p>As you know, this configuration is also saved in somewhere else which is the location of the newly created website inside a file called <code class=\"language-text\">web.config</code>, So this means that what we created in the UI is generated into this XML file. If we open up the file, we can see the following configuration:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>system.webServer</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rewrite</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rules</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rule</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>React Routes<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stopProcessing</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>match</span> <span class=\"token attr-name\">url</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>.*<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>conditions</span> <span class=\"token attr-name\">logicalGrouping</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>MatchAll<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">input</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{REQUEST_FILENAME}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">matchType</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>IsFile<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">negate</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">input</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{REQUEST_FILENAME}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">matchType</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>IsDirectory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">negate</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>conditions</span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>action</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Rewrite<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">url</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/index.html<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rule</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rules</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rewrite</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>system.webServer</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The critical part is inside the <code class=\"language-text\">rules</code> tag. The tag name is an arbitrary string you can change it to whatever you want, and then we have a pattern <code class=\"language-text\">.*</code> Which means everything using regular expression syntax, then we have our rules, we are basically saying if the input contains a file name or a directory name at the end of URL, an action occurs in this case the action is redirecting to <code class=\"language-text\">index.html</code>. You might be wondering why I set <code class=\"language-text\">stopProcessing=&quot;true&quot;</code>, by setting this flag to true it will stop the processing of further rules, and the request will be passed to the IIS request pipeline. Now the unknown paths are handed off to the client side router, and the rest is history.</p>","excerpt":"Today I wanted to host a React application; the first and easiest option was hosting the app using a package called serve which is basically…","fields":{"slug":"2019-04-09-Hosting-react-app-on-iis"}}},{"node":{"frontmatter":{"title":"Hosting a WCF Service as a Windows Service Using Topshelf","date":"March 7th, 2019","slug":"Hosting-WCF-Service/"},"html":"<p>You might be wondering why I am blogging about WCF. Is it still relevant? This is part of a legacy WCF project, and I am responsible for adding some functionalities to it, I like it though. By the way, it's been a long time since it went out of fashion, but many large enterprise applications still use it.</p>\n<p>As you know, WCF services need to run in a host process so when clients want to consume the services we need to make sure the services are alive. The host process needs to provide a host, and this host is responsible for setting up the services and listening for incoming messages then creating instances of the service and respond to the client by dispatching a call to the service class. As I mentioned in a legacy application we wanted to host our services as a Windows Service, this app had been using a Console application, but the problem with Console applications is that you need to make sure the app is open all the time. For example, if the server gets restarted you should manually open the app, you could say we should add this app as a startup process so whenever the system boots up this app is opened but we can achieve a better result by writing a Windows service instead. Windows services are a great way to run code in the background; this means that we don’t need a Console Application to run the application. Once you installed the service it keeps running, we can control how to start the service for example when can set it to automatically started when the system boots or be configured when a user logs in. Both of these approaches are considered as two hosting options because they are self-hosted applications; it means that both are running inside a .NET process.</p>\n<h2>Installing Topshelf</h2>\n<p>Topshelf is an open source .NET Windows Service library, it makes the process of creating Windows services much easier for us so that we can only focus on the service functionality as opposed to setting up the boilerplate service code. To install TopShelf all we need to do is installing its NuGet package:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Install-Package Topshelf</code></pre></div>\n<p>The next step is wrapping your service functionality inside a class with two methods <code class=\"language-text\">Start</code> and <code class=\"language-text\">Stop</code> these methods are going to be used by TopShelf to start and stop the service:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ServiceHost</span> usersHost<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">try</span>\n        <span class=\"token punctuation\">{</span>\n            usersHost <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServiceHost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>UsersService<span class=\"token punctuation\">.</span>UsersService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            usersHost<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Service Running...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Press a key to quit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">finally</span>\n        <span class=\"token punctuation\">{</span>\n            usersHost<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        usersHost<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The next step is adding this class to TopShelf for creating our Windows Service:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        HostFactory<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>serviceConfig <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            serviceConfig<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Service</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyService</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>serviceInstance <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                serviceInstance<span class=\"token punctuation\">.</span><span class=\"token function\">ConstructUsing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                serviceInstance<span class=\"token punctuation\">.</span><span class=\"token function\">WhenStarted</span><span class=\"token punctuation\">(</span>execute <span class=\"token operator\">=></span> execute<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                serviceInstance<span class=\"token punctuation\">.</span><span class=\"token function\">WhenStopped</span><span class=\"token punctuation\">(</span>execute <span class=\"token operator\">=></span> execute<span class=\"token punctuation\">.</span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            serviceConfig<span class=\"token punctuation\">.</span><span class=\"token function\">SetServiceName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My Service\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            serviceConfig<span class=\"token punctuation\">.</span><span class=\"token function\">SetDisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My Service\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            serviceConfig<span class=\"token punctuation\">.</span><span class=\"token function\">SetDescription</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hosting WCF services\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            serviceConfig<span class=\"token punctuation\">.</span><span class=\"token function\">StartAutomatically</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Installing our service into Windows</h2>\n<ul>\n<li>Run Command Prompt as Admin</li>\n<li>cd into to bin\\Debug folder</li>\n<li>{AssebmlyName}.exe install</li>\n</ul>\n<h2>Adding NLog</h2>\n<p>We can add logging functionality to the mix using NLog, for doing so we first need to add the following package:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Install-Package Topshelf.NLog</code></pre></div>\n<p>The next step is to add the following configuration to <code class=\"language-text\">app.config</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configSections</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>nlog<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>NLog.Config.ConfigSectionHandler, NLog<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configSections</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nlog</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>targets</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>target</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>consoleTarget<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Console<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>targets</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rules</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>logger</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>*<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">minlevel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Debug<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">writeTo</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>consoleTarget<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rules</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nlog</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Then we need to register NLog service in the <code class=\"language-text\">Program.cs</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        HostFactory<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>serviceConfig <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            serviceConfig<span class=\"token punctuation\">.</span><span class=\"token function\">UseNLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// as before</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we can use the logger in our service:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// our service declarations</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">LogWriter</span> _log <span class=\"token operator\">=</span> HostLogger<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Get</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyService</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span>\n            <span class=\"token punctuation\">{</span>\n               _log<span class=\"token punctuation\">.</span><span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Starting services\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","excerpt":"You might be wondering why I am blogging about WCF. Is it still relevant? This is part of a legacy WCF project, and I am responsible for…","fields":{"slug":"2019-03-07-Hosting-WCF-Service"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}