{"componentChunkName":"component---src-templates-blog-list-template-js","path":"/page/2","webpackCompilationHash":"c6dba3db61326977b9c5","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"Calling Stored Procedures using Dapper","date":"June 7th, 2019","slug":"Calling-Stored-Procedures/"},"html":"<p>Today I wanted to call a Stored Procedure using Entity Framework Core. It is possible using <code class=\"language-text\">DbSet.FromSql()</code> method, which is one of the powerful features of Entity Framework Core. It gives us the ability to run RAW SQL queries directly against a database:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> blogs <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>Blogs\n    <span class=\"token punctuation\">.</span><span class=\"token function\">FromSql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CALL GetBlogs\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But the problem is that the column names in the result set must match the column names that properties are mapped to. So, for example, given this Stored Procedure:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DEFINER</span><span class=\"token operator\">=</span><span class=\"token punctuation\">`</span>root<span class=\"token punctuation\">`</span><span class=\"token variable\">@`%`</span> <span class=\"token keyword\">PROCEDURE</span> <span class=\"token punctuation\">`</span>GetBlogs<span class=\"token punctuation\">`</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span>\n\t<span class=\"token keyword\">select</span> <span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>Rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> average<span class=\"token punctuation\">,</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>Rating<span class=\"token punctuation\">)</span><span class=\"token keyword\">as</span> minimum<span class=\"token punctuation\">,</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>Rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> maximum\n\t<span class=\"token keyword\">from</span> blogs\n<span class=\"token keyword\">END</span></code></pre></div>\n<p>In this case, your model must be exactly the same as the result set. Otherwise, you'd get an exception. Most of our Stored Procedure use some Aggregate functions. So I had to find another solution for it which was using Dapper. As you probably know, Dapper is nothing but a set of extension methods on top of <code class=\"language-text\">IDbConnection</code>. So to use it, you will need to install <code class=\"language-text\">Dapper</code> and register it using built-in IoC container in your ASP.NET Core application:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddTransient</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IDbConnection</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySqlConnection</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">.</span><span class=\"token function\">GetConnectionString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyConnection\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then you can use it inside your services:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IDbConnection</span> _dbConnection<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MyService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IDbConnection</span> dbConnection<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _dbConnection <span class=\"token operator\">=</span> dbConnection<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> Task<span class=\"token operator\">&lt;</span>IEnumerable<span class=\"token operator\">&lt;</span>BlogViewModel<span class=\"token operator\">>></span> <span class=\"token function\">GetBlogs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> authorId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> query <span class=\"token operator\">=</span> _dbConnection<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">QueryAsync</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BlogViewModel</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GetBlogs\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> AuthorId <span class=\"token operator\">=</span> authorId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            commandType<span class=\"token punctuation\">:</span> CommandType<span class=\"token punctuation\">.</span>StoredProcedure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> query<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"Today I wanted to call a Stored Procedure using Entity Framework Core. It is possible using  method, which is one of the powerful featuresâ€¦","fields":{"slug":"2019-06-07-Calling-Stored-Procedures"}}},{"node":{"frontmatter":{"title":"Highlighting Current Link in Razor Pages","date":"May 31st, 2019","slug":"Razor-Pages-Highlight-Current-Link/"},"html":"<p>Let's say you have several pages in your Razor Pages application. Now you want to make the menu items active depending on the page you are currently on:</p>\n<img class=\"center-image\" src=\"/img/active_menu.png\" alt=\"Active menu\" width=\"700\">\n<p>The solution is pretty simple; all you need to do is checking the request path in <code class=\"language-text\">_Layout</code> file. To access the Request object, you need to inject <code class=\"language-text\">IHttpContextAccessor</code> in the layout file. Before injecting this interface into our view we must register it in <code class=\"language-text\">ConfigureServices</code> method in Startup class:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IHttpContextAccessor</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpContextAccessor</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>Note</em>: If you are using ASP.NET Core 2.1+ you can use <code class=\"language-text\">AddHttpContextAccessor</code> helper extension method to correctly register the <code class=\"language-text\">IHttpContextAccessor</code> with the correct lifetime (singleton):</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddHttpContextAccessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we should be able to access current <code class=\"language-text\">HttpContext</code> inside our views:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">@inject Microsoft.AspNetCore.Http.IHttpContextAccessor Accessor\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Layout<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/css/shared.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    @RenderSection(\"styles\", false)\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>header-shadow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>container is-fluid header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nav</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>navbar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>navbar-menu navbar-end<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>mainNavMenu<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                    &lt;a class=\"navbar-item @(Accessor.HttpContext.Request.Path.Value == \"/\" ? \"nav-item-selected\" : \"\" )\" href=\"/\">Home<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n                    &lt;a class=\"navbar-item @(Accessor.HttpContext.Request.Path.Value == \"/Services\" ? \"nav-item-selected\" : \"\" )\" href=\"/Services\">Services<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n                    &lt;a class=\"navbar-item @(Accessor.HttpContext.Request.Path.Value == \"/About\" ? \"nav-item-selected\" : \"\" )\" href=\"/About\">About Us<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n                    &lt;a class=\"navbar-item @(Accessor.HttpContext.Request.Path.Value == \"/Contact\" ? \"nav-item-selected\" : \"\" )\" href=\"/Contact\">Contact<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nav</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span>\n\n    @RenderBody()\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>","excerpt":"Let's say you have several pages in your Razor Pages application. Now you want to make the menu items active depending on the page you areâ€¦","fields":{"slug":"2019-05-31-Razor-Pages-Highlight-Current-Link"}}},{"node":{"frontmatter":{"title":"Passed Exam 70-483 - Programming in C#","date":"May 25th, 2019","slug":"Passed-Exam-70-483-exam/"},"html":"<p><a href=\"https://www.youracclaim.com/badges/4f0b2269-04b6-4d81-8b37-e25f7956dc4f\"><img class=\"center-image\" src=\"/img/csharp_badge.png\" alt=\"CSharp notes\" width=\"230\"></a></p>\n<p>I have been developing with C# for a while, and I decided to pass Exam 70-483 in order to validate my skill. In order to pass the exam, you should be able to perform the following skills:</p>\n<h2>Manage program flow (25â€“30%)</h2>\n<ul>\n<li>Implement multithreading and asynchronous processing</li>\n<li>Manage multithreading</li>\n<li>Implement program flow</li>\n<li>Iterate across collection and array items; program decisions by using switch statements, if/then, and operators; evaluate expressions</li>\n<li>Create and implement events and callbacks</li>\n<li>Create event handlers; subscribe to and unsubscribe from events; use built-in delegate types to create events; create delegates; lambda expressions; anonymous methods</li>\n<li>Implement exception handling</li>\n</ul>\n<h2>Create and use types (25â€“30%)</h2>\n<ul>\n<li>Create types</li>\n<li>Consume types</li>\n<li>Enforce encapsulation</li>\n<li>Create and implement a class hierarchy</li>\n<li>Find, execute, and create types at runtime by using reflection</li>\n<li>Manage the object life cycle</li>\n<li>Manipulate strings</li>\n</ul>\n<h2>Debug applications and implement security (25â€“30%)</h2>\n<ul>\n<li>Validate application input</li>\n<li>Perform symmetric and asymmetric encryption</li>\n<li>Manage assemblies</li>\n<li>Debug an application</li>\n<li>Implement diagnostics in an application</li>\n</ul>\n<h2>Implement data access (25â€“30%)</h2>\n<ul>\n<li>Perform I/O operations</li>\n<li>Consume data</li>\n<li>Query and manipulate data and objects by using LINQ</li>\n<li>Serialize and deserialize data</li>\n<li>Store data in and retrieve data from collections</li>\n</ul>\n<p>You can check the details in the <a href=\"https://www.microsoft.com/en-us/learning/exam-70-483.aspx\">Exam 70â€“483 Official Website</a>.</p>\n<h1>Resources</h1>\n<p>These are the books I used for passing the exam.</p>\n<img class=\"center-image\" src=\"/img/books.jpg\" alt=\"CSharp notes\" width=\"400\">\n<ul>\n<li><a href=\"https://www.amazon.com/Exam-Ref-70-483-Programming-Miles/dp/1509306986\">Exam Ref 70-483 Programming in C#, 2nd Edition By Rob Miles</a></li>\n<li><a href=\"https://www.amazon.com/C-6-0-Nutshell-Definitive-Reference/dp/1491927062/ref=sr_1_4?crid=218XJSHWO1SYD&#x26;keywords=c+in+a+nutshell&#x26;qid=1560670921&#x26;s=books&#x26;sprefix=C%23+in+a+%2Cstripbooks-intl-ship%2C380&#x26;sr=1-4\">C# 6.0 in a Nutshell: The Definitive Reference</a></li>\n</ul>\n<p>The way I read these books was by reading them from cover to cover and highlight important things:</p>\n<img class=\"center-image\" src=\"/img/csharp_notes.png\" alt=\"CSharp notes\" width=\"400\">\n<p>I also kept track of the notes somewhere else to review them after finishing the books:</p>\n<img class=\"center-image\" src=\"/img/csharp_notes_doc.png\" alt=\"CSharp notes\" width=\"400\">","excerpt":"I have been developing with C# for a while, and I decided to pass Exam 70-483 in order to validate my skill. In order to pass the exam, youâ€¦","fields":{"slug":"2019-05-25-Passed-Exam-70-483-exam"}}},{"node":{"frontmatter":{"title":"Hosting React app on IIS","date":"April 9th, 2019","slug":"Hosting-react-app-on-iis/"},"html":"<p>Today I wanted to host a React application; the first and easiest option was hosting the app using a package called <a href=\"https://github.com/zeit/serve\">serve</a> which is basically a static file serving tool. The process was easy, all I had to do was first prepare a production build of my application using <code class=\"language-text\">npm run build</code> then run the <code class=\"language-text\">npx serve</code> command inside my build's directory:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cd build\nserve <span class=\"token operator\">-</span>s</code></pre></div>\n<p>This is great but the problem is that my application is using React Router and when I wanted to navigate between pages I got <code class=\"language-text\">404</code> error:</p>\n<img class=\"center-image\" src=\"/img/react-serve-404.png\" alt=\"React App 404\" width=\"700\">\n<p>based on the officail React docs:</p>\n<blockquote>\n<p>If you use routers that use the HTML5 pushState history API under the hood (for example, React Router with browserHistory), many static file servers will fail. For example, if you used React Router with a route for /todos/42, the development server will respond to localhost:3000/todos/42 properly, but an Express serving a production build as above will not. This is because when there is a fresh page load for a /todos/42, the server looks for the file build/todos/42 and does not find it. The server needs to be configured to respond to a request to /todos/42 by serving index.html</p>\n</blockquote>\n<p>So I decided to host the app on IIS and define a URL rewrite to redirect all unknown paths to <code class=\"language-text\">index.html</code>. URL Rewrite isn't installed by defualt so you must <a href=\"https://www.iis.net/downloads/microsoft/url-rewrite\">install</a> it if you haven't already. Here's what I did to host my React application:</p>\n<p>1- Adding a new website on IIS</p>\n<img class=\"center-image\" src=\"/img/create-website-react-app.png\" alt=\"Create website on IIS for React app\" width=\"700\">\n<p>2- Adding the following rule to URL rewrite:</p>\n<img class=\"center-image\" src=\"/img/url-rewite-ui.png\" alt=\"URL Rewrite UI\" width=\"700\">\n<p>As you know, this configuration is also saved in somewhere else which is the location of the newly created website inside a file called <code class=\"language-text\">web.config</code>, So this means that what we created in the UI is generated into this XML file. If we open up the file, we can see the following configuration:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>system.webServer</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rewrite</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rules</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rule</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>React Routes<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stopProcessing</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>match</span> <span class=\"token attr-name\">url</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>.*<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>conditions</span> <span class=\"token attr-name\">logicalGrouping</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>MatchAll<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">input</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{REQUEST_FILENAME}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">matchType</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>IsFile<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">negate</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">input</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{REQUEST_FILENAME}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">matchType</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>IsDirectory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">negate</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>conditions</span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>action</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Rewrite<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">url</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/index.html<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rule</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rules</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rewrite</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>system.webServer</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The critical part is inside the <code class=\"language-text\">rules</code> tag. The tag name is an arbitrary string you can change it to whatever you want, and then we have a pattern <code class=\"language-text\">.*</code> Which means everything using regular expression syntax, then we have our rules, we are basically saying if the input contains a file name or a directory name at the end of URL, an action occurs in this case the action is redirecting to <code class=\"language-text\">index.html</code>. You might be wondering why I set <code class=\"language-text\">stopProcessing=&quot;true&quot;</code>, by setting this flag to true it will stop the processing of further rules, and the request will be passed to the IIS request pipeline. Now the unknown paths are handed off to the client side router, and the rest is history.</p>","excerpt":"Today I wanted to host a React application; the first and easiest option was hosting the app using a package called serve which is basicallyâ€¦","fields":{"slug":"2019-04-09-Hosting-react-app-on-iis"}}},{"node":{"frontmatter":{"title":"Hosting a WCF Service as a Windows Service Using Topshelf","date":"March 7th, 2019","slug":"Hosting-WCF-Service/"},"html":"<p>You might be wondering why I am blogging about WCF. Is it still relevant? This is part of a legacy WCF project, and I am responsible for adding some functionalities to it, I like it though. By the way, it's been a long time since it went out of fashion, but many large enterprise applications still use it.</p>\n<p>As you know, WCF services need to run in a host process so when clients want to consume the services we need to make sure the services are alive. The host process needs to provide a host, and this host is responsible for setting up the services and listening for incoming messages then creating instances of the service and respond to the client by dispatching a call to the service class. As I mentioned in a legacy application we wanted to host our services as a Windows Service, this app had been using a Console application, but the problem with Console applications is that you need to make sure the app is open all the time. For example, if the server gets restarted you should manually open the app, you could say we should add this app as a startup process so whenever the system boots up this app is opened but we can achieve a better result by writing a Windows service instead. Windows services are a great way to run code in the background; this means that we donâ€™t need a Console Application to run the application. Once you installed the service it keeps running, we can control how to start the service for example when can set it to automatically started when the system boots or be configured when a user logs in. Both of these approaches are considered as two hosting options because they are self-hosted applications; it means that both are running inside a .NET process.</p>\n<h2>Installing Topshelf</h2>\n<p>Topshelf is an open source .NET Windows Service library, it makes the process of creating Windows services much easier for us so that we can only focus on the service functionality as opposed to setting up the boilerplate service code. To install TopShelf all we need to do is installing its NuGet package:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Install-Package Topshelf</code></pre></div>\n<p>The next step is wrapping your service functionality inside a class with two methods <code class=\"language-text\">Start</code> and <code class=\"language-text\">Stop</code> these methods are going to be used by TopShelf to start and stop the service:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ServiceHost</span> usersHost<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">try</span>\n        <span class=\"token punctuation\">{</span>\n            usersHost <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServiceHost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>UsersService<span class=\"token punctuation\">.</span>UsersService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            usersHost<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Service Running...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Press a key to quit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">finally</span>\n        <span class=\"token punctuation\">{</span>\n            usersHost<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        usersHost<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The next step is adding this class to TopShelf for creating our Windows Service:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        HostFactory<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>serviceConfig <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            serviceConfig<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Service</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyService</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>serviceInstance <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                serviceInstance<span class=\"token punctuation\">.</span><span class=\"token function\">ConstructUsing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                serviceInstance<span class=\"token punctuation\">.</span><span class=\"token function\">WhenStarted</span><span class=\"token punctuation\">(</span>execute <span class=\"token operator\">=></span> execute<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                serviceInstance<span class=\"token punctuation\">.</span><span class=\"token function\">WhenStopped</span><span class=\"token punctuation\">(</span>execute <span class=\"token operator\">=></span> execute<span class=\"token punctuation\">.</span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            serviceConfig<span class=\"token punctuation\">.</span><span class=\"token function\">SetServiceName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My Service\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            serviceConfig<span class=\"token punctuation\">.</span><span class=\"token function\">SetDisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My Service\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            serviceConfig<span class=\"token punctuation\">.</span><span class=\"token function\">SetDescription</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hosting WCF services\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            serviceConfig<span class=\"token punctuation\">.</span><span class=\"token function\">StartAutomatically</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Installing our service into Windows</h2>\n<ul>\n<li>Run Command Prompt as Admin</li>\n<li>cd into to bin\\Debug folder</li>\n<li>{AssebmlyName}.exe install</li>\n</ul>\n<h2>Adding NLog</h2>\n<p>We can add logging functionality to the mix using NLog, for doing so we first need to add the following package:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Install-Package Topshelf.NLog</code></pre></div>\n<p>The next step is to add the following configuration to <code class=\"language-text\">app.config</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configSections</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>nlog<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>NLog.Config.ConfigSectionHandler, NLog<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configSections</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nlog</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>targets</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>target</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>consoleTarget<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Console<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>targets</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rules</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>logger</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>*<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">minlevel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Debug<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">writeTo</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>consoleTarget<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rules</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nlog</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Then we need to register NLog service in the <code class=\"language-text\">Program.cs</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        HostFactory<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>serviceConfig <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            serviceConfig<span class=\"token punctuation\">.</span><span class=\"token function\">UseNLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// as before</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we can use the logger in our service:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// our service declarations</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">LogWriter</span> _log <span class=\"token operator\">=</span> HostLogger<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Get</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyService</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span>\n            <span class=\"token punctuation\">{</span>\n               _log<span class=\"token punctuation\">.</span><span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Starting services\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","excerpt":"You might be wondering why I am blogging about WCF. Is it still relevant? This is part of a legacy WCF project, and I am responsible forâ€¦","fields":{"slug":"2019-03-07-Hosting-WCF-Service"}}},{"node":{"frontmatter":{"title":"What's Elasticsearch","date":"December 5th, 2018","slug":"What's-Elasticsearch/"},"html":"<p>Wikipedia:</p>\n<blockquote>\n<p>Elasticsearch is a search engine based on the Lucene library. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface and schema-free JSON documents. Elasticsearch is developed in Java and is released as open source under the terms of the Apache License. Official clients are available in Java, .NET (C#), PHP, Python, Apache Groovy, Ruby and many other languages.5 According to the DB-Engines ranking, Elasticsearch is the most popular enterprise search engine followed by Apache Solr, also based on Lucene.</p>\n</blockquote>\n<p>Executing SELECT * FROM .... all the time consumes a lot of CPU also it doesn't have index, One solution would be using FTS (Full Text Search) in RDBMS but in NoSQL world If you need a high performance search engine you'd better use Elasticsearch.</p>\n<img class=\"center-image\" src=\"/img/elastic_stack.jpg\" alt=\"Elastic Stack\" width=\"700\">\n<h3>History</h3>\n<ul>\n<li>\n<p>1999 - Lucene</p>\n<ul>\n<li>It helped all search engines back then index the data that they were adjusting from the internet and provide reasonable ways of retrieving that information based fuzzy matching.</li>\n</ul>\n</li>\n<li>\n<p>2004 - Compass</p>\n<ul>\n<li>Built on top of Lucene, the same services but in a more scalable manner, idea was to provide a distributed search solution.</li>\n</ul>\n</li>\n<li>\n<p>2010 - Elasticsearch</p>\n<ul>\n<li>Distributed, RESTful search and analytical engine</li>\n</ul>\n</li>\n</ul>\n<h3>Use cases</h3>\n<ul>\n<li>Security/log analytics</li>\n<li>\n<p>Marketing = Use this data to find things:</p>\n<ul>\n<li>How people find our website?</li>\n<li>Where they came from?</li>\n<li>What device they are using?</li>\n<li>What part of the world they are coming from?</li>\n</ul>\n</li>\n<li>Search = ES was built with idea of great search engine</li>\n</ul>\n<h3>Concepts</h3>\n<ul>\n<li>Near Real Time (NRT)</li>\n<li>\n<p>Cluster:</p>\n<ul>\n<li>collection of our nodes</li>\n<li>has a unique name</li>\n</ul>\n</li>\n<li>\n<p>Node:</p>\n<ul>\n<li>part of the cluster to store the data</li>\n<li>has a unique name</li>\n</ul>\n</li>\n<li>\n<p>Index:</p>\n<ul>\n<li>a collection of similar documents</li>\n</ul>\n</li>\n<li>\n<p>Type:</p>\n<ul>\n<li>a category or a partition of your index</li>\n</ul>\n</li>\n<li>\n<p>Document:</p>\n<ul>\n<li>in JSON format</li>\n<li>customer</li>\n<li>event</li>\n</ul>\n</li>\n</ul>\n<h3>Querying</h3>\n<ul>\n<li>\n<p>Simple query:</p>\n<ul>\n<li>get all accounts: GET bank/account/_search</li>\n<li>\n<p>get all accounts in state of CA:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token constant\">GET</span> bank<span class=\"token operator\">/</span>account<span class=\"token operator\">/</span>_search\n<span class=\"token punctuation\">{</span>\n<span class=\"token string\">\"query\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"match\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"state\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"CA\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>-Â multiple conditions:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token constant\">GET</span> bank<span class=\"token operator\">/</span>account<span class=\"token operator\">/</span>_search\n<span class=\"token punctuation\">{</span>\n<span class=\"token string\">\"query\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"bool\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"state\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"CA\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>boost: 3 = three times more important than state</li>\n<li><code class=\"language-text\">_score</code>: How ES identifies the relevance of a document based on your search query</li>\n</ul>\n</li>\n</ul>\n<h3>Bulk loading data into Elasticsearch</h3>\n<p>_bulk: The endpoint for bulk api, this is where we send request to when we want to bulk load data. it expects new-line delimited JSON data (including a new-line at the very end, which is important, otherwise we'll get errors). It allows us to <code class=\"language-text\">Index</code>, <code class=\"language-text\">Create</code>, <code class=\"language-text\">Delete</code>, <code class=\"language-text\">Update</code>. When using this we need to make sure we are using <code class=\"language-text\">--data-binary</code> flag from the curl command.</p>\n<ul>\n<li>/_bulk</li>\n<li>new-line JSON</li>\n<li>Index, Create, Delete, Update</li>\n<li>--data-binary</li>\n</ul>\n<h4>How to bulk load data</h4>\n<ul>\n<li>Create a file that has some data in it:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> <span class=\"token string\">\"index\"</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"_index\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"indexName\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"_type\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"typeName\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"_id\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Web Developer II\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"author\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Chrysler Clerk\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Proin risus. Praesent lectus.\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"publishedDate\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"2018-02-03T17:51:14Z\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Load the data into Elasticsearch using curl:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">curl <span class=\"token operator\">-</span>s <span class=\"token operator\">-</span><span class=\"token constant\">H</span> <span class=\"token string\">\"Content-Type: application/x-ndjson\"</span> <span class=\"token operator\">-</span><span class=\"token constant\">XPOST</span> localhost<span class=\"token punctuation\">:</span><span class=\"token number\">9200</span><span class=\"token operator\">/</span>_bulk <span class=\"token operator\">--</span>data<span class=\"token operator\">-</span>binary <span class=\"token string\">\"@reqs\"</span><span class=\"token punctuation\">;</span> echo</code></pre></div>","excerpt":"Wikipedia: Elasticsearch is a search engine based on the Lucene library. It provides a distributed, multitenant-capable full-text searchâ€¦","fields":{"slug":"2018-12-05-What's-Elasticsearch"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"limit":6,"skip":6,"numPages":6,"currentPage":2}}}