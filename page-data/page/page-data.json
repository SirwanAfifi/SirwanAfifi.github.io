{"componentChunkName":"component---src-templates-blog-list-template-js","path":"/page","webpackCompilationHash":"88a8341dd341caf161cd","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"Using IHostingEnvironment in a test project","date":"August 9th, 2019","slug":"Using-IHostingEnvironment-in-a-test-project/"},"html":"<p>Assume that you have a service which accepts <code class=\"language-text\">IHostingEnvironment</code> as its dependency:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IHostingEnvironment</span> hostingEnv<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MyService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IHostingEnvironment</span> hostingEnv<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hostingEnv <span class=\"token operator\">=</span> hostingEnv<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> Task<span class=\"token operator\">&lt;</span>IEnumerable<span class=\"token operator\">&lt;</span>Post<span class=\"token operator\">>></span> <span class=\"token function\">GetPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> fileInfo <span class=\"token operator\">=</span> hostingEnv<span class=\"token punctuation\">.</span>ContentRootFileProvider<span class=\"token punctuation\">.</span><span class=\"token function\">GetFileInfo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"posts.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> file <span class=\"token operator\">=</span> File<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAllText</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span>PhysicalPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> deserializeObject <span class=\"token operator\">=</span> JsonConvert<span class=\"token punctuation\">.</span>DeserializeObject<span class=\"token operator\">&lt;</span>IEnumerable<span class=\"token operator\">&lt;</span>Post<span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">FromResult</span><span class=\"token punctuation\">(</span>deserializeObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we wan to be able to load that JSON file inside a test project in order to test the service. First of all, we need to make sure we have these packages installed on the test project:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.AspNetCore.Hosting<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2.2.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.AspNetCore.Hosting.Abstractions<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2.2.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.Extensions.DependencyInjection<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2.2.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.Extensions.DependencyInjection.Abstractions<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2.2.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.Extensions.FileProviders.Physical<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2.2.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Test.Sdk<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>16.0.1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>xunit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2.4.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>xunit.runner.visualstudio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2.4.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>We also need to modify the csproj file to copy the JSON file to the build output:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Update</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>data.json<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CopyToOutputDirectory</span><span class=\"token punctuation\">></span></span>PreserveNewest<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>CopyToOutputDirectory</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>None</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Then we need a base class to configure the built-in DI container and register <code class=\"language-text\">IHostingEnvironment</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> GreatSpot<span class=\"token punctuation\">.</span>Tests\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseTest</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">IServiceProvider</span> Services <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">BaseTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> serviceCollection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServiceCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            serviceCollection<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IHostingEnvironment</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HostingEnvironment</span>\n            <span class=\"token punctuation\">{</span>\n                ContentRootFileProvider <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PhysicalFileProvider</span><span class=\"token punctuation\">(</span>Environment<span class=\"token punctuation\">.</span>CurrentDirectory<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Services <span class=\"token operator\">=</span> serviceCollection<span class=\"token punctuation\">.</span><span class=\"token function\">BuildServiceProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we can use the registred service in our test methods:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostTests</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">BaseTest</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token class-name\">Fact</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token class-name\">Task</span> <span class=\"token function\">Get_All_Posts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> hostingEnvironment <span class=\"token operator\">=</span> Services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetService</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IHostingEnvironment</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">var</span> myService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyService</span><span class=\"token punctuation\">(</span>hostingEnvironment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> myService<span class=\"token punctuation\">.</span><span class=\"token function\">GetPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"Assume that you have a service which accepts  as its dependency: Now we wan to be able to load that JSON file inside a test project in order…","fields":{"slug":"2019-08-09-Using-IHostingEnvironment-in-a-test-project"}}},{"node":{"frontmatter":{"title":"Migrating To Gatsby","date":"July 22nd, 2019","slug":"Migrating-To-Gatsby/"},"html":"<p>Jekyll got me into blogging mostly because of its markdown support. When I first saw it, it was clear to me I had to have it. I'd say it was(still is) a fast possible way for blogging and I liked it. Also, the additional bonus was to host the blog using GitHub pages. Jekyll is excellent; It gets you started quickly without having to worry about how to set up things. Recently I decided to use JavaScript-based solutions. Gatsby has been the 1st item in my list. I've been playing around with it, and so far I'm quite happy. It's basically a framework based on React and GraphQL that makes it easy to create both website and web applications. It's also a static website generator. The cool thing about Gatsby is that we can also use it for building complex web apps with data storage, authentication and more. These abstractions allow us to connect any data source to our application.</p>\n<img class=\"center-image\" src=\"/img/gatsby.png\" alt=\"gatsby\" width=\"600\">\n<h2>Why Gatsby?</h2>\n<ul>\n<li>It's super fast</li>\n<li>It's super easy to work with</li>\n<li>It has so many features baked right in</li>\n<li>We can create a web project in a matter of minutes without needing to install/customise build tools</li>\n<li>It comes with everything we need to get started right away</li>\n</ul>\n<p>Publishing a blog post can be done in a few lines now:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">git add <span class=\"token punctuation\">.</span> <span class=\"token operator\">&amp;&amp;</span> git commit <span class=\"token operator\">-</span>m <span class=\"token string\">\"new blog\"</span>\nnpm run deploy<span class=\"token punctuation\">:</span>github</code></pre></div>\n<p>I feel like everything feels more under control now:</p>\n<img class=\"center-image\" src=\"/img/gatsby_project.png\" alt=\"gatsby\" width=\"600\">","excerpt":"Jekyll got me into blogging mostly because of its markdown support. When I first saw it, it was clear to me I had to have it. I'd say it was…","fields":{"slug":"2019-07-22-Migrating-To-Gatsby"}}},{"node":{"frontmatter":{"title":"Morse code","date":"July 8th, 2019","slug":"Programming-challenges-morse-code/"},"html":"<img class=\"center-image\" src=\"/img/morse_code.png\" alt=\"Morse Code table\" width=\"600\">\n<p>Morse Code is a set of dots and dashes (short mark, dot or 'dit' (·) and longer mark, dash or 'dah' (-)). Basically, it's a character encoding scheme for transmitting cryptographic messages which used in telecommunication. Think of it as the early version of texting. The system is named after the American artist Samuel Finley Breese Morse who co-developed an electrical telegraph system at the beginning of 1836. In fact it was heavily used for (secret) transmissions during WWI and WWII. Different combination of dots and dashes will produce different letters it also means that different combination of letters will be eventually your encoded messages.</p>\n<img class=\"center-image\" src=\"/img/International_Morse_Code.svg\" alt=\"Morse Code table\" width=\"700\">\n<p>I thought it might be a good idea to write my name in Morse code to see how it looks like. Since I am a lazy developer, so I ended up writing a React application to do the job for me:</p>\n<img class=\"center-image\" src=\"/img/morse_code_translator.gif\" alt=\"Morse Code video\" width=\"700\">\n<p>Here's the implementation in JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> language <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  alphabets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">A</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">B</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">C</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">D</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">E</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">F</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">G</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">H</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">I</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">J</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">K</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">M</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">N</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">L</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">N</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">O</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">P</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">Q</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−•−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">R</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">S</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">T</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">U</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">V</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">W</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">X</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−••−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">Y</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">Z</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−••\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  numeral<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−−−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•••−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•••••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"6\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−••••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"7\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−•••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"8\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−−••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"9\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−−−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−−−−\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  punctuations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"•\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−•−•−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\",\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−••−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"?\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−−••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\":\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−−•••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\";\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•−•−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"−\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−••••−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−••−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'\"'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−••−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−−−−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•−−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\")\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•−−•−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"=\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•••−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−•−•\"</span><span class=\"token punctuation\">,</span>\n    $<span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−••−\"</span><span class=\"token punctuation\">,</span>\n    q<span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−•−••\"</span><span class=\"token punctuation\">,</span>\n    _<span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−−•−\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">translateToMorseCode</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">input</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> inputArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>input<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> morseCode <span class=\"token operator\">=</span> inputArray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span>\n      language<span class=\"token punctuation\">.</span>alphabets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span>\n      language<span class=\"token punctuation\">.</span>numeral<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span>\n      language<span class=\"token punctuation\">.</span>punctuations<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> code <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> morseCode<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">translateToEnglish</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">input</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> inputArray <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> engWord <span class=\"token operator\">=</span> inputArray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span>\n      Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">.</span>alphabets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> language<span class=\"token punctuation\">.</span>alphabets<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> i\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span>\n      Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">.</span>punctuations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> language<span class=\"token punctuation\">.</span>punctuations<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> i\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span>\n      Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">.</span>numeral<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> language<span class=\"token punctuation\">.</span>numeral<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> i\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">?</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> engWord<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Since the original idea of Morse Code was to signal the message in a form perceptible to the human senses, such as sound waves or visible light, so I have added the ability to play a sound while coding the message:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> output<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">of</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">translateToMorseCode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> <span class=\"token string\">\"•\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">playSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> <span class=\"token string\">\"−\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">playSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">playSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> output<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>output <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> i <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can grab the working sample project from <a href=\"https://github.com/SirwanAfifi/morse\">GitHub</a>.</p>","excerpt":"Morse Code is a set of dots and dashes (short mark, dot or 'dit' (·) and longer mark, dash or 'dah' (-)). Basically, it's a character…","fields":{"slug":"2019-07-08-Programming-challenges-morse-code"}}},{"node":{"frontmatter":{"title":"Calling Stored Procedures using Dapper","date":"June 7th, 2019","slug":"Calling-Stored-Procedures/"},"html":"<p>Today I wanted to call a Stored Procedure using Entity Framework Core. It is possible using <code class=\"language-text\">DbSet.FromSql()</code> method, which is one of the powerful features of Entity Framework Core. It gives us the ability to run RAW SQL queries directly against a database:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> blogs <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>Blogs\n    <span class=\"token punctuation\">.</span><span class=\"token function\">FromSql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CALL GetBlogs\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But the problem is that the column names in the result set must match the column names that properties are mapped to. So, for example, given this Stored Procedure:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DEFINER</span><span class=\"token operator\">=</span><span class=\"token punctuation\">`</span>root<span class=\"token punctuation\">`</span><span class=\"token variable\">@`%`</span> <span class=\"token keyword\">PROCEDURE</span> <span class=\"token punctuation\">`</span>GetBlogs<span class=\"token punctuation\">`</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span>\n\t<span class=\"token keyword\">select</span> <span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>Rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> average<span class=\"token punctuation\">,</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>Rating<span class=\"token punctuation\">)</span><span class=\"token keyword\">as</span> minimum<span class=\"token punctuation\">,</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>Rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> maximum\n\t<span class=\"token keyword\">from</span> blogs\n<span class=\"token keyword\">END</span></code></pre></div>\n<p>In this case, your model must be exactly the same as the result set. Otherwise, you'd get an exception. Most of our Stored Procedure use some Aggregate functions. So I had to find another solution for it which was using Dapper. As you probably know, Dapper is nothing but a set of extension methods on top of <code class=\"language-text\">IDbConnection</code>. So to use it, you will need to install <code class=\"language-text\">Dapper</code> and register it using built-in IoC container in your ASP.NET Core application:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddTransient</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IDbConnection</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySqlConnection</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">.</span><span class=\"token function\">GetConnectionString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyConnection\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then you can use it inside your services:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IDbConnection</span> _dbConnection<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MyService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IDbConnection</span> dbConnection<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _dbConnection <span class=\"token operator\">=</span> dbConnection<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> Task<span class=\"token operator\">&lt;</span>IEnumerable<span class=\"token operator\">&lt;</span>BlogViewModel<span class=\"token operator\">>></span> <span class=\"token function\">GetBlogs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> authorId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> query <span class=\"token operator\">=</span> _dbConnection<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">QueryAsync</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BlogViewModel</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GetBlogs\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> AuthorId <span class=\"token operator\">=</span> authorId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            commandType<span class=\"token punctuation\">:</span> CommandType<span class=\"token punctuation\">.</span>StoredProcedure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> query<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"Today I wanted to call a Stored Procedure using Entity Framework Core. It is possible using  method, which is one of the powerful features…","fields":{"slug":"2019-06-07-Calling-Stored-Procedures"}}},{"node":{"frontmatter":{"title":"Highlighting Current Link in Razor Pages","date":"May 31st, 2019","slug":"Razor-Pages-Highlight-Current-Link/"},"html":"<p>Let's say you have several pages in your Razor Pages application. Now you want to make the menu items active depending on the page you are currently on:</p>\n<img class=\"center-image\" src=\"/img/active_menu.png\" alt=\"Active menu\" width=\"700\">\n<p>The solution is pretty simple; all you need to do is checking the request path in <code class=\"language-text\">_Layout</code> file. To access the Request object, you need to inject <code class=\"language-text\">IHttpContextAccessor</code> in the layout file. Before injecting this interface into our view we must register it in <code class=\"language-text\">ConfigureServices</code> method in Startup class:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IHttpContextAccessor</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpContextAccessor</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>Note</em>: If you are using ASP.NET Core 2.1+ you can use <code class=\"language-text\">AddHttpContextAccessor</code> helper extension method to correctly register the <code class=\"language-text\">IHttpContextAccessor</code> with the correct lifetime (singleton):</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddHttpContextAccessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we should be able to access current <code class=\"language-text\">HttpContext</code> inside our views:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">@inject Microsoft.AspNetCore.Http.IHttpContextAccessor Accessor\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Layout<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/css/shared.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    @RenderSection(\"styles\", false)\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>header-shadow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>container is-fluid header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nav</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>navbar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>navbar-menu navbar-end<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>mainNavMenu<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                    &lt;a class=\"navbar-item @(Accessor.HttpContext.Request.Path.Value == \"/\" ? \"nav-item-selected\" : \"\" )\" href=\"/\">Home<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n                    &lt;a class=\"navbar-item @(Accessor.HttpContext.Request.Path.Value == \"/Services\" ? \"nav-item-selected\" : \"\" )\" href=\"/Services\">Services<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n                    &lt;a class=\"navbar-item @(Accessor.HttpContext.Request.Path.Value == \"/About\" ? \"nav-item-selected\" : \"\" )\" href=\"/About\">About Us<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n                    &lt;a class=\"navbar-item @(Accessor.HttpContext.Request.Path.Value == \"/Contact\" ? \"nav-item-selected\" : \"\" )\" href=\"/Contact\">Contact<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nav</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span>\n\n    @RenderBody()\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>","excerpt":"Let's say you have several pages in your Razor Pages application. Now you want to make the menu items active depending on the page you are…","fields":{"slug":"2019-05-31-Razor-Pages-Highlight-Current-Link"}}},{"node":{"frontmatter":{"title":"Passed Exam 70-483 - Programming in C#","date":"May 25th, 2019","slug":"Passed-Exam-70-483-exam/"},"html":"<p><a href=\"https://www.youracclaim.com/badges/4f0b2269-04b6-4d81-8b37-e25f7956dc4f\"><img class=\"center-image\" src=\"/img/csharp_badge.png\" alt=\"CSharp notes\" width=\"230\"></a></p>\n<p>I have been developing with C# for a while, and I decided to pass Exam 70-483 in order to validate my skill. In order to pass the exam, you should be able to perform the following skills:</p>\n<h2>Manage program flow (25–30%)</h2>\n<ul>\n<li>Implement multithreading and asynchronous processing</li>\n<li>Manage multithreading</li>\n<li>Implement program flow</li>\n<li>Iterate across collection and array items; program decisions by using switch statements, if/then, and operators; evaluate expressions</li>\n<li>Create and implement events and callbacks</li>\n<li>Create event handlers; subscribe to and unsubscribe from events; use built-in delegate types to create events; create delegates; lambda expressions; anonymous methods</li>\n<li>Implement exception handling</li>\n</ul>\n<h2>Create and use types (25–30%)</h2>\n<ul>\n<li>Create types</li>\n<li>Consume types</li>\n<li>Enforce encapsulation</li>\n<li>Create and implement a class hierarchy</li>\n<li>Find, execute, and create types at runtime by using reflection</li>\n<li>Manage the object life cycle</li>\n<li>Manipulate strings</li>\n</ul>\n<h2>Debug applications and implement security (25–30%)</h2>\n<ul>\n<li>Validate application input</li>\n<li>Perform symmetric and asymmetric encryption</li>\n<li>Manage assemblies</li>\n<li>Debug an application</li>\n<li>Implement diagnostics in an application</li>\n</ul>\n<h2>Implement data access (25–30%)</h2>\n<ul>\n<li>Perform I/O operations</li>\n<li>Consume data</li>\n<li>Query and manipulate data and objects by using LINQ</li>\n<li>Serialize and deserialize data</li>\n<li>Store data in and retrieve data from collections</li>\n</ul>\n<p>You can check the details in the <a href=\"https://www.microsoft.com/en-us/learning/exam-70-483.aspx\">Exam 70–483 Official Website</a>.</p>\n<h1>Resources</h1>\n<p>These are the books I used for passing the exam.</p>\n<img class=\"center-image\" src=\"/img/books.jpg\" alt=\"CSharp notes\" width=\"400\">\n<ul>\n<li><a href=\"https://www.amazon.com/Exam-Ref-70-483-Programming-Miles/dp/1509306986\">Exam Ref 70-483 Programming in C#, 2nd Edition By Rob Miles</a></li>\n<li><a href=\"https://www.amazon.com/C-6-0-Nutshell-Definitive-Reference/dp/1491927062/ref=sr_1_4?crid=218XJSHWO1SYD&#x26;keywords=c+in+a+nutshell&#x26;qid=1560670921&#x26;s=books&#x26;sprefix=C%23+in+a+%2Cstripbooks-intl-ship%2C380&#x26;sr=1-4\">C# 6.0 in a Nutshell: The Definitive Reference</a></li>\n</ul>\n<p>The way I read these books was by reading them from cover to cover and highlight important things:</p>\n<img class=\"center-image\" src=\"/img/csharp_notes.png\" alt=\"CSharp notes\" width=\"400\">\n<p>I also kept track of the notes somewhere else to review them after finishing the books:</p>\n<img class=\"center-image\" src=\"/img/csharp_notes_doc.png\" alt=\"CSharp notes\" width=\"400\">","excerpt":"I have been developing with C# for a while, and I decided to pass Exam 70-483 in order to validate my skill. In order to pass the exam, you…","fields":{"slug":"2019-05-25-Passed-Exam-70-483-exam"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"limit":6,"skip":0,"numPages":6,"currentPage":1}}}