{"componentChunkName":"component---src-templates-blog-list-template-js","path":"/page/6","webpackCompilationHash":"c871001d7f3203a6495a","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"Object Oriented JavaScript Part 2","date":"December 11th, 2015","slug":"Object-Oriented-JavaScript-Part-2/"},"html":"<h3>Classes</h3>\n<p>In many programming languages a <a href=\"https://en.wikipedia.org/wiki/Class_(computer_programming)\">class</a> is a standard unit of work, which means that you normally create all of your code inside classes and these classes contain data, behaviour, events and those sort of things that you are going to use in developing your solutions. for example in C# we can create a class this way:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Field</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> firstName<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// Constructor that takes no arguments.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> firstName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span> lastName<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> firstName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> lastName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Method</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> <span class=\"token function\">Greet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> $<span class=\"token string\">\"Hello, { name }. My name is { this.firstName }\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this case we have a class along with properties, constructor. So a class in C# contains data as well as operation as well as events. It will be useful to create same sort of structure in JavaScript. Prior to ES6 there was no such thing as a class in JavaScript, we could simply do everything with functions, we could create classes by using some of the language semantics to create things that look and feels like classes. But they were not classes in the classical sense. for example we used function to do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">,</span> lastName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> firstName\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> lastName\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">greet</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\". My name is \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So what this function does is use the <code class=\"language-text\">this</code> keyword to define new property that represents a person object in this case. And what's interesting here this is what's called a constructor syntax. So this function when called will return an object. By doing this, we can create a new person:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sirwan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Afifi\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>In this case, we can see that it is using the <code class=\"language-text\">new</code> keyword. this keyword is used to find a function with a name, after the <code class=\"language-text\">new</code>, return an object that contained the shape that is defined in the function. Once we have an instance of that, we can get any of the properties that are specified in the constructor syntax function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> firstName <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>firstName</code></pre></div>\n<p>ES6 introduces language support for classes with <code class=\"language-text\">class</code> keyword. So the ES6 equivalent of the <code class=\"language-text\">Person</code> function would be the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">,</span> lastName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> firstName\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> lastName\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">. My name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So we have essentially recreated the same Person data type but with much better syntax. behind the scene the runtime is doing the exactly what we used to do. But now the syntax is clean and expressive. As you can see there is <code class=\"language-text\">constructor</code> in the class definition. the constructor is one of the class members that we can list in the body of a class, just like the other members it is a function, it is a function that automatically invoked when we say <code class=\"language-text\">new</code> and use the class name as a function call:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sirwan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Afifi\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Getters and Setters</h3>\n<p>In a class we can also use getter and setter, they are created using <code class=\"language-text\">get</code> and <code class=\"language-text\">set</code> keyword. get and set allows us to run code on the reading or writing of a property:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ES6 get and set</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">,</span> lastName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_firstName <span class=\"token operator\">=</span> firstName\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_lastName <span class=\"token operator\">=</span> lastName\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_firstName <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_lastName\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">set</span> <span class=\"token function\">firstName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_firstName <span class=\"token operator\">=</span> newName\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">lastName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_lastName <span class=\"token operator\">=</span> newName\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">. My name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> sirwan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sirwan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Afifi\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sirwan<span class=\"token punctuation\">.</span>fullName<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Outputs 'SIRWAN, AFIFI'</span>\n<span class=\"token keyword\">let</span> omid <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Daryoush\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Zandi\"</span><span class=\"token punctuation\">)</span>\nomid<span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> <span class=\"token string\">\"Omid\"</span>\nomid<span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> <span class=\"token string\">\"Kamangar\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>omid<span class=\"token punctuation\">.</span>fullName<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Outputs 'OMID, KAMANGAR'</span></code></pre></div>\n<h3>Inheritance</h3>\n<p>ES6 also gives us an easy syntax to specify and inheritance for relationship. Which is a way we say a class inherits from another class. Now assume that we need another class for modling an <code class=\"language-text\">Employee</code>, since every employee is a person, maybe we will have the <code class=\"language-text\">Employee</code> inherit from a <code class=\"language-text\">Person</code>. In ES6 inheritance is specified using <code class=\"language-text\">extends</code> keyword:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// more features</span>\n  <span class=\"token function\">getWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is working.`</span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> emp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sirwan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Afifi\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>emp<span class=\"token punctuation\">.</span><span class=\"token function\">getWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Outputs 'Sirwan is working.'</span></code></pre></div>\n<p>The only thing is that a lot of features in ES2015 are not supported in the browsers. For example classes are not supported by any browser, now there might be a nightly built of Firefox that supports classes. So instead we have to use a transpiler and there are many transpilers such as <a href=\"http://www.typescriptlang.org\">TypeScript</a>, <a href=\"https://babeljs.io\">Bable</a> and variety of others. I recommend you to use Bable because it has the best support for all of ES2015 features.</p>","excerpt":"Classes In many programming languages a class is a standard unit of work, which means that you normally create all of your code inside…","fields":{"slug":"2015-12-11-Object-Oriented-JavaScript-Part-2"}}},{"node":{"frontmatter":{"title":"Object Oriented JavaScript Part 1","date":"December 10th, 2015","slug":"Object-Oriented-JavaScript-Part-1/"},"html":"<p>Recently I've started to improve my JavaScript skill, So I decided to keep notes about new things I learn from now on.\nSince I'm a C# developer, I'm trying to use my existing knowledge in C# to learn JavaScript.<br>\nAs you know in C# we have something called <a href=\"https://msdn.microsoft.com/en-us/library/bb384062.aspx\">Object and collection initializer</a>. For example we can use object initializer to create name and value pairs for different properties of the object, in this case <code class=\"language-text\">car</code> object:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Chevrolet Corvette\"</span><span class=\"token punctuation\">,</span>\n    Color <span class=\"token operator\">=</span> <span class=\"token string\">\"Red\"</span><span class=\"token punctuation\">,</span>\n    Manufacturer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CarManufacturer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Chevrolet\"</span><span class=\"token punctuation\">,</span>\n        Country <span class=\"token operator\">=</span> <span class=\"token string\">\"USA\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you can see we used object initializer for those embedded objects too.\nAlthough object initializers can be used for anonymous types. So here's the same example which we build with anonymous object:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span>\n    Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Chevrolet Corvette\"</span><span class=\"token punctuation\">,</span>\n    Color <span class=\"token operator\">=</span> <span class=\"token string\">\"Red\"</span><span class=\"token punctuation\">,</span>\n    Manufacturer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span>\n        Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Chevrolet\"</span><span class=\"token punctuation\">,</span>\n        Country <span class=\"token operator\">=</span> <span class=\"token string\">\"USA\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is very similar the way dynamic objects work in JavaScript. So in JavaScript object creation is going to follow this pattern:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Chevrolet Corvette\"</span><span class=\"token punctuation\">,</span>\n  color<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Red\"</span><span class=\"token punctuation\">,</span>\n  manufacturer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Chevrolet\"</span><span class=\"token punctuation\">,</span>\n    country<span class=\"token punctuation\">:</span> <span class=\"token string\">\"USA\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"towing capacity\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"5,952 lbs\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see we use key/value pairs. Actually it's a little different from C# for instance we used colons (<code class=\"language-text\">:</code>) instead of equals (<code class=\"language-text\">=</code>) but generally the syntaxes are similar. In some case you may see the name is embedded in quotes, it's optional but if you're using any reserved characters like space, in this case, you need to surround the name with quotes (like <code class=\"language-text\">towing capacity</code>).</p>\n<p>These dynamic objects that you have defined with this name value pairs allows you to take these objects you are creating and access each the properties you have defined in that name value pair by the name using a simple dot syntax. For example here in JavaScript you can just access the name using dot name convention:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> car<span class=\"token punctuation\">.</span>name</code></pre></div>\n<p>You can also use a bracket syntax, that's why objects are sometimes called associative arrays:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> car<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>This way we can retrieve or set the property values. There are other ways for accessing and retrieving property value that are as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">car<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"Dot syntax\"</span>\ncar<span class=\"token punctuation\">[</span><span class=\"token string\">\"towing capacity\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"String with space\"</span>\ncar<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"String value\"</span>\ncar<span class=\"token punctuation\">[</span>rand<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Random Number\"</span>\ncar<span class=\"token punctuation\">[</span>obj<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Object\"</span>\ncar<span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Even an empty string\"</span></code></pre></div>\n<p>We can also get embedded objects that are the properties of those dynamic objects as well and retrive properties from them:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> manufacturer <span class=\"token operator\">=</span> car<span class=\"token punctuation\">.</span>manufacturer\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> manufacturer<span class=\"token punctuation\">.</span>name\n<span class=\"token keyword\">var</span> country <span class=\"token operator\">=</span> manufacturer<span class=\"token punctuation\">.</span>country</code></pre></div>\n<h3>Malleability</h3>\n<p>As you probably know, One of the key features of JavaScript is that the language is <a href=\"http://blog.jeremymartin.name/2008/03/understanding-loose-typing-in.html\">loosely typed</a> it means that variables are declared without a type. So the objects that you are creating in this way are very malleable. In C# <code class=\"language-text\">ExpandoObject</code> gives you this behavior.</p>\n<blockquote>\n<p>ExpandoObject Represents an object whose members can be dynamically added and removed at run time.</p>\n</blockquote>\n<p>For example in this code we are creating a new object and marking it as dynamic so that we can add members to this <code class=\"language-text\">ExpandoObject</code> as we want:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">dynamic</span> car  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExpandoObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncar<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Chevrolet Corvette\"</span><span class=\"token punctuation\">;</span>\ncar<span class=\"token punctuation\">.</span>Color <span class=\"token operator\">=</span> <span class=\"token string\">\"Red\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>These are being added on-the-fly. It means that these aren't defining the shape ahead of time. We are just saying we are going to add properties to the <code class=\"language-text\">car</code> object. In fact this is pretty much the same way in JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Chevrolet Corvette\"</span><span class=\"token punctuation\">,</span>\n  color<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Red\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can still add another property or function on-the-fly:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">car<span class=\"token punctuation\">[</span><span class=\"token string\">\"towing capacity\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"5,952 lbs\"</span>\ncar<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">model</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Resourses:</p>\n<ul>\n    <li><a href=\"https://pluralsight.com/courses/js4cs\n\">JavaScript for C# Developers by Shawn Wildermuth</a></li>\n    <li><a href=\"https://mauricebutler.wordpress.com/2011/11/07/getting-started-with-javascript-with-a-c-background/\">Getting started with JavaScript with a C# background</a></li>\n    <li><a href=\"https://dzone.com/articles/javascript-c-developers\">JavaScript for C# Developers: Functions are Objects</a></li>\n</ul>","excerpt":"Recently I've started to improve my JavaScript skill, So I decided to keep notes about new things I learn from now on.\nSince I'm a C…","fields":{"slug":"2015-12-10-Object-Oriented-JavaScript-Part-1"}}},{"node":{"frontmatter":{"title":"My first blog post!","date":"November 28th, 2015","slug":"First-Blog-Post"},"html":"<p>Here's my first blog post :) In this blog I'm going to share thing that I learn, hope you enjoy reading my blog :)</p>","excerpt":"Here's my first blog post :) In this blog I'm going to share thing that I learn, hope you enjoy reading my blog :)","fields":{"slug":"2015-11-28-First-Blog-Post"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"limit":6,"skip":30,"numPages":6,"currentPage":6}}}