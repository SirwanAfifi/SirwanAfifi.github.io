{"componentChunkName":"component---src-templates-blog-list-template-js","path":"/page/6","webpackCompilationHash":"a4a24817e791de79e9a5","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"Working remotely","date":"May 3rd, 2017","slug":"Working-remotely/"},"html":"<p>It has been 8 months and so that I have been working remotely for a startup out there. It's been my pleasure to work with a team of great and talented members. over the past few months, I have learned a lot both in terms of technical stuff and working as a team member.</p>\n<p>For some, this might not seem a big deal. But for me, it's a pretty big one. So I thought it would be great to share my experiences so far.</p>\n<h3>New technology, new tools</h3>\n<p>For this project we are using .NET core and ASP.NET MVC core on top of it. The main benefit of using cutting edge technologies is that you always keep yourself updated, but you might argue that working with new and shiny things is overwhelming because the product is not mature enough to work with. But I believe that's also another great benefit because when you encounter a bug you easily open a GitHub issue and report it. So I think it's best of both worlds.</p>\n<h3>Estimation</h3>\n<p>At first, I couldn't deal with an accurate estimation, after a while I figured out that the problem was the task itself, not me, if a task is a big one then estimation most likely will be accurate, so the solution of having an accurate estimation is to break the task into smaller ones.</p>\n<h3>Documentation</h3>\n<p>A key point to have a good documentation is that, it needs to be updated after the requirement is changed. In our case, there are too many changes in requirements, this makes new team members confused. In my opinion, there must be a section called changelog in the documentation so that it will be really easy to know what was the previous changes at first place. you might say it's better to use <code class=\"language-text\">git log</code> but I think sometimes you don't need to go through several file changes in git history in order to understand a small change. Another good thing for new members is having mockups. I have been always a big fan of this type development, because as you know a picture worth a thousand words.</p>\n<h3>Working in different time zones</h3>\n<p>From my point of view working in different time zones makes remote working a little bit difficult, suppose you are given a task, now you have some questions and no one is online, so in this case, you have to leave your messages on Slack or Jira in order to get your questions answered. this is really big deal for small teams.</p>\n<h3>Collaboration</h3>\n<p>Another key point in agile development is collaboration. Working in a team is not just about delivering your product as soon as possible in some sprints. the best part of an agile team is having daily/weekly standup with other members. By other members I mean Mobile developers, Backend developers, Database developers, ... I think the standup shouldn't be held separately. As a web developer, I need to know what's going on in other parts of the application, because I think it gives developers a really good big picture.</p>\n<h3>Conclusion</h3>\n<p>All in all, it has been a great journey for me so far. because working remotely not only improves your technical ability but gives you a cultural perspective.</p>","excerpt":"It has been 8 months and so that I have been working remotely for a startup out there. It's been my pleasure to work with a team of great…","fields":{"slug":"2017-05-03-Working-remotely"}}},{"node":{"frontmatter":{"title":"My first experiences with Linux","date":"February 27th, 2017","slug":"My-first-experiences-with-Linux/"},"html":"<p>Running Window 98 on my PC was my first experience with Windows. in fact, for the last 11 years or so, Windows has been the dominant operating system that I've been using. So, up until now, I have been an avid fan of Windows.</p>\n<blockquote>\n<p>Disclaimer: I'm not going to say that I'm not interested in Windows anymore, I just want to explain my experience with Ubuntu</p>\n</blockquote>\n<p>Windows just works fine for the most part. But, as a developer, I have always felt something is missing. For solving this problem, Microsoft has tried its best bringing in tools like PowerShell and Bash to Windows. But again, with all these great features and tools, as a developer, you think something is missing.</p>\n<p>Two weeks ago, I decided to give Linux a try, So I chose Ubuntu because it's user-friendly and its community is huge. Actually, my goal was to do some experiments with new version of .NET called .NET Core. The experience was great. First, I created a very simple console application on Windows and deployed it as a <a href=\"https://docs.microsoft.com/en-us/dotnet/articles/core/preview3/deploying/#self-contained-deployments-scd\">SCD (Self-Contained Deployment)</a>:</p>\n<img class=\"img-res\" src=\"/img/publish.jpg\" />\n<p>Then, I copied the publish folder on my USB stick and finally, I could run my .NET Core application without installing the .NET runtime on the target machine:</p>\n<img class=\"img-res\" src=\"/img/run_app.png\" />\n<p>As a .NET developer I have been waiting voraciously for such opportunity. So, I think it's the best time to migrate to Linux.</p>\n<p>Actually, I was amazed at the first impression because Linux has everything a developer needs out of the box. Python is already installed on the OS. This is great because there are times you want to write simple scripts, scrap a page or something like that.</p>\n<p>Other cool features of Linux are commands like <a href=\"https://www.gnu.org/software/sed/manual/sed.html\">sed</a> and <a href=\"https://www.gnu.org/software/grep/manual/html_node/index.html\">grep</a>. These tools are great whether you are a developer or a network administrator. for example, suppose that you have following content within a file named <code class=\"language-text\">test.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"AppName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Simple App\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"Website\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sirwan.info\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"UseSqlite\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now you want to replace all occurrence of <code class=\"language-text\">&quot;UseSqlite&quot;: false,</code> to <code class=\"language-text\">&quot;UseSqlite&quot;: true,</code> you can do that simply by typing this command:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cat text<span class=\"token punctuation\">.</span>json <span class=\"token operator\">|</span> sed <span class=\"token string\">'s/\"UseSqlite\": false,/\"UseSqlite\": true,/'</span></code></pre></div>\n<img class=\"img-res\" src=\"/img/sed_command.png\" />\n<p>You can definitely do wide varaity of things using these tools, I just wanted to tell you how much I am excited about these cool stuff.</p>\n<h3>Development on Ubuntu</h3>\n<p>The good news is that .NET Core runs on Windows, Mac and Linux. In order to install .NET Core on Ubuntu you just simply need to navigate to <a href=\"https://www.microsoft.com/net/download\">dot.net</a> site and download the appropriate version. after installing .NET Core, it gives you a CLI called <code class=\"language-text\">dotnet</code> so you can simply create, build and publish your applications using this command, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">dotnet <span class=\"token keyword\">new</span>\ndotnet restore\ndotnet run</code></pre></div>\n<p>You can also use the editor of your choice for developing .NET Core application, personally I prefer to use <a href=\"http://code.visualstudio.com/\">Visual Studio Code</a> or VSCode for short. because it has all great features you need:</p>\n<img class=\"img-res\" src=\"/img/vscode.png\" />\n<p>VSCode is great, But I think using an IDE like Visual Studio gives you the power you need when are developing applications, Unfortunately, there's no official version of Visual Studio for Linux at this time. I hope Microsoft release it for Linux users The only reason that I can't abandon Windows is the lack of Visual Studio So I have to keep using Windows on my main machine.</p>\n<h3>Conclusion</h3>\n<p>As I mentioned Visual Studio is the only reason to not completely abandon Windows, But I will use Ubuntu for sure. This was my first attempt to use Ubuntu and I am very happy about the experience, I would like to hear your ideas about your journey.</p>\n<p>Happy Coding :))</p>","excerpt":"Running Window 98 on my PC was my first experience with Windows. in fact, for the last 11 years or so, Windows has been the dominant…","fields":{"slug":"2017-02-27-My-first-experiences-with-Linux"}}},{"node":{"frontmatter":{"title":"Environments in ASP.NET Core","date":"November 23rd, 2016","slug":"Environments-in-ASP.NET-Core/"},"html":"<p>In ASP.NET Core we can have different hosting environments, this is supported by an environment variable called <code class=\"language-text\">ASPNETCORE_ENVIRONMENT</code>. You can see this value is already set to <code class=\"language-text\">Development</code>:</p>\n<img class=\"img-res\" src=\"/img/environment.jpg\" />\n<p>This value is active as long as you run your application inside Visual Studio, So when you deploy your application you must change this value. Actually, this value comes from a file called <code class=\"language-text\">launchSettings.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"iisSettings\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"windowsAuthentication\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"anonymousAuthentication\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"iisExpress\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"applicationUrl\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"http://localhost:13880/\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"sslPort\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"profiles\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"IIS Express\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"commandName\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"IISExpress\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"launchBrowser\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"environmentVariables\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"ASPNETCORE_ENVIRONMENT\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Development\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"ProjectName\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"commandName\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Project\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"launchBrowser\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"launchUrl\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"http://localhost:5000\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"environmentVariables\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"ASPNETCORE_ENVIRONMENT\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Development\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can determine what the environment is by using <code class=\"language-text\">IHostingEnvironment</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IApplicationBuilder</span> app<span class=\"token punctuation\">,</span>\n\t<span class=\"token class-name\">IHostingEnvironment</span> env<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ILoggerFactory</span> loggerFactory<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tloggerFactory<span class=\"token punctuation\">.</span><span class=\"token function\">AddConsole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">.</span><span class=\"token function\">IsDevelopment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tapp<span class=\"token punctuation\">.</span><span class=\"token function\">UseDeveloperExceptionPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tapp<span class=\"token punctuation\">.</span><span class=\"token function\">UseExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ExceptionHandlerOptions</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tExceptionHandler <span class=\"token operator\">=</span> context <span class=\"token operator\">=></span> context<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Opps!\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// other configurations</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This object also has a method called <code class=\"language-text\">IsEnvironment</code> for using custom environment:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">.</span><span class=\"token function\">IsEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"envName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// some config</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>One interesting thing is that the Startup class itself supports different environments, it means that for each environment you can have both <code class=\"language-text\">Configure</code> and <code class=\"language-text\">ConfigureServices</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureDevelopment</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IApplicationBuilder</span> app<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureServicesDevelopment</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureStaging</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IApplicationBuilder</span> app<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureServicesStaging</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureProduction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IApplicationBuilder</span> app<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureServicesProduction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now you might ask how we can set this environment variable, well there are several ways that you can use, this great <a href=\"http://andrewlock.net/how-to-set-the-hosting-environment-in-asp-net-core/\">post</a> explains them in details.</p>","excerpt":"In ASP.NET Core we can have different hosting environments, this is supported by an environment variable called . You can see this value is…","fields":{"slug":"2016-11-23-Environments-in-ASP.NET-Core"}}},{"node":{"frontmatter":{"title":"Getting to know Singleton pattern in C#","date":"November 8th, 2016","slug":"Getting-to-know-Singletone-Pattern/"},"html":"<p>This pattern helps us to ensure a class has only one instance. The term comes from the <a href=\"https://en.wikipedia.org/wiki/Singleton_(mathematics)\">mathematical concept of a singleton</a>:</p>\n<blockquote>\n<p>In mathematics, a singleton, also known as a unit set,[1] is a set with exactly one element. For example, the set {0} is a singleton.</p>\n</blockquote>\n<p>Eventually we must have a class that only gives us a single instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> sigleInstance <span class=\"token operator\">=</span> MySingletonClass<span class=\"token punctuation\">.</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you can see the only way to access the instance is by calling a public static method called <code class=\"language-text\">GetInstance()</code>, the single object instance under consideration is created only for the first time it is requested. suppose the following class:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySingletonClass</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MySingletonClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now I want to make this class singleton, So the first step is to ensure that no one can instantiate our class for doing so we must make the constrauctor <code class=\"language-text\">private</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySingletonClass</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">MySingletonClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now whenever you want to create a new instance of <code class=\"language-text\">MySingletonClass</code> using <code class=\"language-text\">new</code> keyword, Visual Studio gives you this error:</p>\n<img class=\"img-res\" src=\"/img/singleton_error.jpg\" />\n<p>But we can still instantiate it from within the class. So next step is to create a new variable of type <code class=\"language-text\">MySingletonClass</code> inside the class, this class is going to be the only instance of the class:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySingletonClass</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">MySingletonClass</span> _instance<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token function\">MySingletonClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So we are getting close to implementing the pattern. Now we need a way to get access the single instance. So we need a method like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">MySingletonClass</span> <span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t_instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySingletonClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> _instance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This method instantiates <code class=\"language-text\">MySingletonClass</code> if an instance doesn't already exist, otherwise it return the existing instance. To demonstrate the object lifetime we can print value of <code class=\"language-text\">GetHashCode()</code> fo these objects:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> mySingleInstance   <span class=\"token operator\">=</span> MySingletonClass<span class=\"token punctuation\">.</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mySingleInstance_2 <span class=\"token operator\">=</span> MySingletonClass<span class=\"token punctuation\">.</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mySingleInstance_3 <span class=\"token operator\">=</span> MySingletonClass<span class=\"token punctuation\">.</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mySingleInstance_4 <span class=\"token operator\">=</span> MySingletonClass<span class=\"token punctuation\">.</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>$<span class=\"token string\">\"obj1: {mySingleInstance.GetHashCode()}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>$<span class=\"token string\">\"obj2: {mySingleInstance_2.GetHashCode()} \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>$<span class=\"token string\">\"obj3: {mySingleInstance_3.GetHashCode()} \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>$<span class=\"token string\">\"obj4: {mySingleInstance_4.GetHashCode()} \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<img class=\"img-res\" src=\"/img/singleton_GetHashCode.jpg\" />\n<p>As you can see all of the objects are the same and share the same instance. The problem with this implementation is that, it's not <a href=\"http://csharpindepth.com/Articles/General/Singleton.aspx\">thread-safe</a>; it means that if seperate threads of execution access the <code class=\"language-text\">_instance</code> at the same time, more that one instance of the <code class=\"language-text\">MySingletonClass</code> object may be created. One of the solution is by using .NET 4's <code class=\"language-text\">Lazy&lt;T&gt;</code> type:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySingletonClass</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> Lazy<span class=\"token operator\">&lt;</span>MySingletonClass<span class=\"token operator\">></span> _instance <span class=\"token operator\">=</span>\n\t\t<span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">Lazy</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MySingletonClass</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySingletonClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">MySingletonClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">MySingletonClass</span> <span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n    \t<span class=\"token keyword\">return</span> _instance<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"This pattern helps us to ensure a class has only one instance. The term comes from the mathematical concept of a singleton: In mathematics…","fields":{"slug":"2016-11-08-Getting-to-know-Singletone-Pattern"}}},{"node":{"frontmatter":{"title":"Designing Fluent Interfaces in C#","date":"October 26th, 2016","slug":"Designing-Fluent-Interfaces-in-C/"},"html":"<p>The concept of <a href=\"martinfowler.com/bliki/FluentInterface.html\">Fluent Interface</a> was coined by Martin Fowler to create various objects and wire them up together. This pattern is often used for object configuration and setup. For example in ASP.NET Core applications we have following code for configuring the server:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Hosting<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> aspnetcoreapp\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> host <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebHostBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">UseKestrel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">UseStartup</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Startup</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            host<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see we can chain methods together easily and the intention is to produce an API that is readable and flows. This pattern is heavily used in programming, Here's an example of using this approach in jQuery:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#result\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"background\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is the result\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>For C#, there is LINQ:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> PersonDataSource\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>Age <span class=\"token operator\">></span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">OrderBy</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span>\n\t\tName <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span>\n\t\tLastName <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>LastName\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You might ask how to implement this pattern, well, it is very simple you just need to return <code class=\"language-text\">this</code> during method call. The <code class=\"language-text\">Calculator</code> defined below contains three methods. These methods are returing <code class=\"language-text\">Calculator</code> object using <code class=\"language-text\">this</code> keyword, which allow to chain the methods:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> Initial <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token function\">Calculator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> intial<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tInitial <span class=\"token operator\">=</span> intial<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Calculator</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tInitial <span class=\"token operator\">=</span> Initial <span class=\"token operator\">+</span> x<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Calculator</span> <span class=\"token function\">Divide</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tInitial <span class=\"token operator\">=</span> Initial <span class=\"token operator\">/</span> x<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Calculator</span> <span class=\"token function\">Substract</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tInitial <span class=\"token operator\">=</span> Initial <span class=\"token operator\">-</span> x<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we can use the class this way:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> calc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">Divide</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">Substract</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nSystem<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>calc<span class=\"token punctuation\">.</span>Initial<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you can see this approach makes our code concise and easier to read.</p>","excerpt":"The concept of Fluent Interface was coined by Martin Fowler to create various objects and wire them up together. This pattern is often used…","fields":{"slug":"2016-10-26-Designing-Fluent-Interfaces-in-C#"}}},{"node":{"frontmatter":{"title":"Explicit Interface Implementation","date":"August 12th, 2016","slug":"Explicit-Interface-Implementation/"},"html":"<p>Let's imagine that you have a class with two methods:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VendingMachine</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">InsertCoin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> amount<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>amount <span class=\"token operator\">&lt;</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> <span class=\"token function\">Buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Buy\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now when we want to create an instance of this class and call one of those methods, it executes as expected:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">VendingMachine</span> machine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VendingMachine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmachine<span class=\"token punctuation\">.</span><span class=\"token function\">InsertCoin</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nmachine<span class=\"token punctuation\">.</span><span class=\"token function\">Buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// \"Buy\"</span></code></pre></div>\n<p>Now suppose that we have an interface called <code class=\"language-text\">IVendingMachine</code> that has two methods:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IVendingMachine</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">InsertCoin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">string</span> <span class=\"token function\">Buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We want our class to implements this interface:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VendingMachine</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">IVendingMachine</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">InsertCoin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> amount<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>amount <span class=\"token operator\">&lt;</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> <span class=\"token function\">Buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Buy\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Our class satisfied the interface because it has the methods with the same names. So Visual Studio doesn't give you a compiler error. Now let's imagine that we\nalso want to add interface's methods to this class, So, in this case, we must explicitly prefix the methods with <code class=\"language-text\">IVendingMachine.</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VendingMachine</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">IVendingMachine</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">InsertCoin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> amount<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>amount <span class=\"token operator\">&lt;</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> IVendingMachine<span class=\"token punctuation\">.</span><span class=\"token function\">InsertCoin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> amount<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>amount <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> <span class=\"token function\">Buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Buy\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">string</span> IVendingMachine<span class=\"token punctuation\">.</span><span class=\"token function\">Buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"IVendingMachine Buy\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that Visual Studio can help you to implement interface explicitly by pressing <code class=\"language-text\">Ctrl + .</code> on the name of the interface and select <code class=\"language-text\">Implement interface explicitly</code>:</p>\n<img class=\"img-res\" src=\"/img/explicit_interface_implementation.jpg\" />\nNow, what happens when we call the `InsertCoin` and `Buy` methods? In this case, we should consider two different situations when we create the object:\n<ul>\n<li>Concrete Type</li>\n<li>Interface Variable</li>\n</ul>\n<p>If we want the methods of <code class=\"language-text\">VendingMachine</code> we should create the object with concrete type:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">VendingMachine</span> machine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VendingMachine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmachine<span class=\"token punctuation\">.</span><span class=\"token function\">InsertCoin</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nmachine<span class=\"token punctuation\">.</span><span class=\"token function\">Buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// \"Buy\"</span></code></pre></div>\n<p>If we want the methods of <code class=\"language-text\">IVendingMachine</code> we should create the object with interface variable:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">IVendingMachine</span> machine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VendingMachine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmachine<span class=\"token punctuation\">.</span><span class=\"token function\">InsertCoin</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nmachine<span class=\"token punctuation\">.</span><span class=\"token function\">Buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// \"IVendingMachine Buy\"</span></code></pre></div>","excerpt":"Let's imagine that you have a class with two methods: Now when we want to create an instance of this class and call one of those methods, it…","fields":{"slug":"2016-08-12-Explicit-Interface-Implementation"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"limit":6,"skip":30,"numPages":8,"currentPage":6}}}