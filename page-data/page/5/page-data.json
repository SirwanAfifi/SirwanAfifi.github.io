{"componentChunkName":"component---src-templates-blog-list-template-js","path":"/page/5","webpackCompilationHash":"cea5bdb4dffb7cd45af3","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"Developing Console-based UI in C#","date":"May 2nd, 2018","slug":"Developing-Console-based-UI-in-C/"},"html":"<p>As you know Console Applications don't have graphical user interface or GUI. Instead, they run from Command Line, for example instead of writing a name into a textbox and clicking a button we would instead invoke the Console Application and provide the name as a parameter. In fact, in Console Applications we instead interact with the user using text inputs. For example, we could prompt something like this:</p>\n<img class=\"img-res\" src=\"/img/consoleTest.jpg\" />\n<p>The user can then write a name and hit enter then we can read that text input into our application.</p>\n<p>Wouldn't be better to make it beautiful? This is where we can use <a href=\"https://github.com/migueldeicaza/gui.cs\">Terminal.Gui</a> a cross-platform GUI toolkit:</p>\n<img class=\"img-res\" src=\"/img/guics.png\" alt=\"Sample app\" />\n<blockquote>\n<p>Terminal.Gui is a library intended to create console-based applications using C#. The framework has been designed to make it easy to write applications that will work on monochrome terminals, as well as modern color terminals with mouse support. This library works across Windows, Linux and MacOS.</p>\n</blockquote>\n<p>Using this UI toolkit is pretty simple, all you need to do is adding its package into your project:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dotnet add package Terminal.Gui</code></pre></div>\n<p>The simplest application looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> consoleTest\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> Terminal<span class=\"token punctuation\">.</span>Gui<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> Main <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Application<span class=\"token punctuation\">.</span>Init <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> MessageBox<span class=\"token punctuation\">.</span>Query <span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Question\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Do you like console apps?\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Yes\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"No\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This example shows a prompt and returns an integer value depending on which value was selected by the user (Yes, No, or if they use chose not to make a decision and instead pressed the ESC key):</p>\n<img class=\"img-res\" src=\"/img/firstTerminalUIapp.png\" alt=\"Sample app\" />\n<p>As you can see the first thing to do is calling <code class=\"language-text\">Application.Init ();</code> to actually initialize the application. We can also create a window and then add a menu to it:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Application<span class=\"token punctuation\">.</span>Init <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> top <span class=\"token operator\">=</span> Application<span class=\"token punctuation\">.</span>Top<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Creates the top-level window to show</span>\n<span class=\"token keyword\">var</span> win <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Window</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rect</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">.</span>Frame<span class=\"token punctuation\">.</span>Width<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">.</span>Frame<span class=\"token punctuation\">.</span>Height<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MyApp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntop<span class=\"token punctuation\">.</span>Add <span class=\"token punctuation\">(</span>win<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Creates a menubar, the item \"New\" has a help menu.</span>\n<span class=\"token keyword\">var</span> menu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MenuBar</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MenuBarItem</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">MenuBarItem</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"_File\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MenuItem</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MenuItem</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"_New\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Creates new file\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MenuItem</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"_Close\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MenuItem</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"_Quit\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> top<span class=\"token punctuation\">.</span>Running <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">MenuBarItem</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"_Edit\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MenuItem</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MenuItem</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"_Copy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MenuItem</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"C_ut\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MenuItem</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"_Paste\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntop<span class=\"token punctuation\">.</span>Add <span class=\"token punctuation\">(</span>menu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Add some controls</span>\nwin<span class=\"token punctuation\">.</span>Add <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Label</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Login: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextField</span> <span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Label</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Password: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextField</span> <span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CheckBox</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Remember me\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">RadioGroup</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"_Personal\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"_Company\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Button</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ok\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Button</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cancel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Label</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Press ESC and 9 to activate the menubar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nApplication<span class=\"token punctuation\">.</span>Run <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<img class=\"img-res\" src=\"/img/sampleTerminalUI.png\" alt=\"Sample app\" />\n<p>You can build even complex console-based UI using this toolkit:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Linq<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> NStack<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> Terminal<span class=\"token punctuation\">.</span>Gui<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> TestingGuiCS<span class=\"token punctuation\">.</span>Models<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> TestingGuiCS\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Application<span class=\"token punctuation\">.</span>Init <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> top <span class=\"token operator\">=</span> Application<span class=\"token punctuation\">.</span>Top<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Creates a menubar, the item \"New\" has a help menu.</span>\n            <span class=\"token keyword\">var</span> menu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MenuBar</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MenuBarItem</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">MenuBarItem</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"_File\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MenuItem</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">MenuItem</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"_Quit\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> top<span class=\"token punctuation\">.</span>Running <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            top<span class=\"token punctuation\">.</span>Add <span class=\"token punctuation\">(</span>menu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n            <span class=\"token comment\">// Creates the top-level window to show</span>\n            <span class=\"token keyword\">var</span> win <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Window</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rect</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">.</span>Frame<span class=\"token punctuation\">.</span>Width<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">.</span>Frame<span class=\"token punctuation\">.</span>Height<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Movie Db\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            top<span class=\"token punctuation\">.</span>Add <span class=\"token punctuation\">(</span>win<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Add some controls</span>\n            <span class=\"token keyword\">var</span> txtSearchLbl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Label</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Movie Name: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> txtSearch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextField</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> forKidsOnly <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CheckBox</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"For Kids?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> minimumRatingLbl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Label</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Minimum Rating: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> minimumRatingTxt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextField</span><span class=\"token punctuation\">(</span><span class=\"token number\">41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> searchBtn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Button</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Filter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> allMoviesListView <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListView</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">.</span>Frame<span class=\"token punctuation\">.</span>Width<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MovieDataSource<span class=\"token punctuation\">.</span><span class=\"token function\">GetList</span><span class=\"token punctuation\">(</span>forKidsOnly<span class=\"token punctuation\">.</span>Checked<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            searchBtn<span class=\"token punctuation\">.</span>Clicked <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n\n                <span class=\"token keyword\">double</span> rating <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> isDouble <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">.</span><span class=\"token function\">TryParse</span><span class=\"token punctuation\">(</span>minimumRatingTxt<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> rating<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>minimumRatingTxt<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>isDouble<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    MessageBox<span class=\"token punctuation\">.</span><span class=\"token function\">ErrorQuery</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Rating must be number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    minimumRatingTxt<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> ustring<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                win<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>allMoviesListView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>txtSearch<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>minimumRatingTxt<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    allMoviesListView <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListView</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">.</span>Frame<span class=\"token punctuation\">.</span>Width<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        MovieDataSource<span class=\"token punctuation\">.</span><span class=\"token function\">GetList</span><span class=\"token punctuation\">(</span>forKidsOnly<span class=\"token punctuation\">.</span>Checked<span class=\"token punctuation\">,</span> rating<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    win<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>allMoviesListView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    win<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>allMoviesListView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    win<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ListView</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">.</span>Frame<span class=\"token punctuation\">.</span>Width<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        MovieDataSource<span class=\"token punctuation\">.</span><span class=\"token function\">GetList</span><span class=\"token punctuation\">(</span>forKidsOnly<span class=\"token punctuation\">.</span>Checked<span class=\"token punctuation\">,</span> rating<span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span>\n                            x<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>txtSearch<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> StringComparison<span class=\"token punctuation\">.</span>OrdinalIgnoreCase<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            win<span class=\"token punctuation\">.</span>Add <span class=\"token punctuation\">(</span>\n                txtSearchLbl<span class=\"token punctuation\">,</span>\n                txtSearch<span class=\"token punctuation\">,</span>\n                forKidsOnly<span class=\"token punctuation\">,</span>\n                minimumRatingLbl<span class=\"token punctuation\">,</span>\n                minimumRatingTxt<span class=\"token punctuation\">,</span>\n                searchBtn<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Label</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-------------Search Result--------------\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Application<span class=\"token punctuation\">.</span>Run <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<img class=\"img-res\" src=\"/img/terminalUI.gif\" alt=\"Sample app\" />\n<p>You can grab the working sample project from <a href=\"https://github.com/SirwanAfifi/Console-based-UI\">GitHub</a>.</p>\n<h3>What about cross platform UI frameworks?</h3>\n<p>Developing cross platform UIs is not officially supported by Microsoft, But there are some open source projects out there for doing so:</p>\n<ul>\n<li><a href=\"https://github.com/AvaloniaUI/Avalonia\">Avalonia</a></li>\n<li><a href=\"https://github.com/picoe/Eto\">Eto.Forms</a></li>\n</ul>","excerpt":"As you know Console Applications don't have graphical user interface or GUI. Instead, they run from Command Line, for example instead of…","fields":{"slug":"2018-05-02-Developing-Console-based-UI-in-C#"}}},{"node":{"frontmatter":{"title":"Does making decision matter?","date":"April 27th, 2018","slug":"Does-making-decision-matter"},"html":"<img class=\"img-res\" src=\"/img/decision.jpg\" />\n*Photo by Felix Russell-Saw on Unsplash*\n<p>We make decision all the time, most of these decisions are done unconsciously, others we agonize over, we all have been there agonizing over a difficult or big decision, we always worry about what to do next, in fact we are trying to make the right decision, But in my opinion there’s no such thing as the right thing or the wrong thing, it’s been a big deal for me because making decisions (big and little ones) have been challenging in my life.</p>\n<p>Last Friday I was talking with a friend (<a href=\"http://foad-ansari.ir/\">Foad</a>) about making decisions, he told me about something called Decidophobia or simply fear of making decisions.</p>\n<p>Life is full of options and choices so don’t waste your time to worry about right and wrong decisions JUST take action it’s worth it.</p>","excerpt":"We make decision all the time, most of these decisions are done unconsciously, others we agonize over, we all have been there agonizing over…","fields":{"slug":"2018-04-27-Does-making-decision-matter"}}},{"node":{"frontmatter":{"title":"Running PowerShell on macOS","date":"June 6th, 2017","slug":"Powershell-on-macOS/"},"html":"<p>It's been a while I have been using macOS as my primary operating system, you can read about my expreince <a href=\"http://sirwan.info/archive/2017/06/04/SQL-Server-on-Linux-in-Docker-on-a-Mac/\">here</a>.</p>\n<p>Today I wanted to run a PowerShell script, I searched around and figured out Microsoft has made PowerShell <a href=\"https://github.com/PowerShell/PowerShell\">open source</a> open source and the good news is that PowerShell is now cross-platform! this means that you can also run PowerShell scripts on Linux, macOS.</p>\n<p>Actually to get PowerShell to work all you need to do is installing it using Homebrew:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">brew cask install powershell</code></pre></div>\n<p><em>Before preceding, make sure you have already installed <a href=\"https://caskroom.github.io/\">Homebrew-Cask</a> on your machine.</em></p>\n<blockquote>\n<p>Homebrew-Cask extends Homebrew and brings its elegance, simplicity, and speed to macOS applications and large binaries alike.\nIt only takes 1 line in your shell to reach 3759 Casks maintained by 4856 contributors.</p>\n</blockquote>\n<img class=\"img-res\" src=\"/img/powershell_installation_on_mac.png\" />\n<p>That's it, now <code class=\"language-text\">PowerShell</code> is installed, so you can use it in your terminal:\n<img class=\"img-res\" src=\"/img/powershell_foreach.png\" /></p>\n<p>There's also a great <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.PowerShell\">VSCode extension</a> to write, debug PowerShell scripts:\n<img class=\"img-res\" src=\"/img/powershell_debugging_on_vscode.png\" /></p>","excerpt":"It's been a while I have been using macOS as my primary operating system, you can read about my expreince here. Today I wanted to run a…","fields":{"slug":"2017-06-06-Powershell-on-macOS"}}},{"node":{"frontmatter":{"title":"SQL Server on Linux in Docker on a Mac","date":"June 4th, 2017","slug":"SQL-Server-on-Linux-in-Docker-on-a-Mac/"},"html":"<p>Over the last few months, I have been working on a couple of ASP.NET Core projects, it's been great experience so far becuase I can easily work on <a href=\"http://sirwan.info/My-first-experiences-with-Linux\">different platforms</a> while working on these projects. I recently bought a MacBook Pro and have decided to do .NET projects on macOS since then.</p>\n<p>Fortunately working with projects is not a pain in the neck anymore, with help of <a href=\"https://www.docker.com/what-docker\">Docker</a> you can easily setup up a complex development environment in minutes. It actually simplifies the process of building and shipping, running your apps on differente environments.</p>\n<p>The first challenge I faced when using macOS was connecting to and using SQL Server. Thanks to Docker and SQL Server for Linux. It's an instance of SQL Server as a docker container and it's super-fast so that it runs in seconds.</p>\n<img class=\"img-res\" src=\"/img/docker.png\" />\n<hr>\n<h2>Installing Docker for Mac</h2>\n<p>In order to get Docker to work you will need to install Docker for Mac, you can follow <a href=\"https://docs.docker.com/docker-for-mac\">these steps</a> to install it. Once Docker installation is done, it will automatically be started:\n<br /></p>\n<img class=\"img-res\" src=\"/img/docker-running.png\" />\n<p>You can also run <code class=\"language-text\">docker --version</code> to verify that Docker is working as expected.</p>\n<hr>\n<h2>Pulling and running Docker image</h2>\n<p>Next, you can install and run SQL <a href=\"https://hub.docker.com/r/microsoft/mssql-server-linux\">Server on Linux docker image</a> using following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">docker run -e <span class=\"token string\">'ACCEPT_EULA=Y'</span> -e 'SA_PASSWORD<span class=\"token operator\">=</span>Passowrd’ -p 1433:1433 -d microsoft/mssql-server-linux</code></pre></div>\n<p>This command will install and run the SQL Server image. Now SQL Server is running locally in Docker container:</p>\n<img class=\"img-res\" src=\"/img/sql-server-is-running.png\" />\n<p>You can use its connection string in your ASP.NET Core application:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MvcMovieContext</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">DbContext</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnConfiguring</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DbContextOptionsBuilder</span> optionsBuilder<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        optionsBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">UseSqlServer</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"Data Source=localhost;Initial Catalog=MovieDB;User ID=sa;Password=StrongPassword\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> DbSet<span class=\"token operator\">&lt;</span>Movie<span class=\"token operator\">></span> Movies <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now if we run migration, the <code class=\"language-text\">MovieDB</code> database will be created in the running docker container:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">dotnet ef database update</code></pre></div>\n<h2>Connecting and quering the databse</h2>\n<p>There are several ways to connect and query a database running in Docker container, one way is using a command line tool called <code class=\"language-text\">sqlcmd</code>:</p>\n<img class=\"img-res\" src=\"/img/sqlcmd.png\" />\n<p>Personally I use <code class=\"language-text\">mssql</code> extension for Visual Studio Code. becuase it's really easy to use so you don't have to write your queries in command line mode. If you have not already installed this extension, all you need to do is press <code class=\"language-text\">⌘ + P</code> and type <code class=\"language-text\">ext install mssql</code> then press enter to install it.</p>\n<p>In order to connect and query your database first, you need to write your SQL queries into a <code class=\"language-text\">SQL</code> file in VS Code then press <code class=\"language-text\">⌘ + Shift + P</code> then choose <code class=\"language-text\">Create Connection Profile</code>, follow the prompts to specify the connection properties for the new connection profile. At the end you should have following settings:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"mssql.connections\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"authenticationType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SqlLogin\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"database\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MovieDB\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SA\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"password\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"savePassword\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"profileName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MovieDB\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see <code class=\"language-text\">mssql.connections</code> takes an array, it means that you can define as many connection profiles as you want. Once you defined your profile, you can use it to execute your queries then the result will be shown as a seperate window:</p>\n<img class=\"img-res\" src=\"/img/query_result_mssql.png\" />\n<p>As you can see working with SQL Server on macOS is really straightforward. Something like this was not possible in .NET before but nowadays you can develope .NET applications on OS of your choice. that's why I’m more excited about .NET more than ever.</p>","excerpt":"Over the last few months, I have been working on a couple of ASP.NET Core projects, it's been great experience so far becuase I can easily…","fields":{"slug":"2017-06-04-SQL-Server-on-Linux-in-Docker-on-a-Mac"}}},{"node":{"frontmatter":{"title":"Working remotely","date":"May 3rd, 2017","slug":"Working-remotely/"},"html":"<p>It has been 8 months and so that I have been working remotely for a startup out there. It's been my pleasure to work with a team of great and talented members. over the past few months, I have learned a lot both in terms of technical stuff and working as a team member.</p>\n<p>For some, this might not seem a big deal. But for me, it's a pretty big one. So I thought it would be great to share my experiences so far.</p>\n<h3>New technology, new tools</h3>\n<p>For this project we are using .NET core and ASP.NET MVC core on top of it. The main benefit of using cutting edge technologies is that you always keep yourself updated, but you might argue that working with new and shiny things is overwhelming because the product is not mature enough to work with. But I believe that's also another great benefit because when you encounter a bug you easily open a GitHub issue and report it. So I think it's best of both worlds.</p>\n<h3>Estimation</h3>\n<p>At first, I couldn't deal with an accurate estimation, after a while I figured out that the problem was the task itself, not me, if a task is a big one then estimation most likely will be accurate, so the solution of having an accurate estimation is to break the task into smaller ones.</p>\n<h3>Documentation</h3>\n<p>A key point to have a good documentation is that, it needs to be updated after the requirement is changed. In our case, there are too many changes in requirements, this makes new team members confused. In my opinion, there must be a section called changelog in the documentation so that it will be really easy to know what was the previous changes at first place. you might say it's better to use <code class=\"language-text\">git log</code> but I think sometimes you don't need to go through several file changes in git history in order to understand a small change. Another good thing for new members is having mockups. I have been always a big fan of this type development, because as you know a picture worth a thousand words.</p>\n<h3>Working in different time zones</h3>\n<p>From my point of view working in different time zones makes remote working a little bit difficult, suppose you are given a task, now you have some questions and no one is online, so in this case, you have to leave your messages on Slack or Jira in order to get your questions answered. this is really big deal for small teams.</p>\n<h3>Collaboration</h3>\n<p>Another key point in agile development is collaboration. Working in a team is not just about delivering your product as soon as possible in some sprints. the best part of an agile team is having daily/weekly standup with other members. By other members I mean Mobile developers, Backend developers, Database developers, ... I think the standup shouldn't be held separately. As a web developer, I need to know what's going on in other parts of the application, because I think it gives developers a really good big picture.</p>\n<h3>Conclusion</h3>\n<p>All in all, it has been a great journey for me so far. because working remotely not only improves your technical ability but gives you a cultural perspective.</p>","excerpt":"It has been 8 months and so that I have been working remotely for a startup out there. It's been my pleasure to work with a team of great…","fields":{"slug":"2017-05-03-Working-remotely"}}},{"node":{"frontmatter":{"title":"My first experiences with Linux","date":"February 27th, 2017","slug":"My-first-experiences-with-Linux/"},"html":"<p>Running Window 98 on my PC was my first experience with Windows. in fact, for the last 11 years or so, Windows has been the dominant operating system that I've been using. So, up until now, I have been an avid fan of Windows.</p>\n<blockquote>\n<p>Disclaimer: I'm not going to say that I'm not interested in Windows anymore, I just want to explain my experience with Ubuntu</p>\n</blockquote>\n<p>Windows just works fine for the most part. But, as a developer, I have always felt something is missing. For solving this problem, Microsoft has tried its best bringing in tools like PowerShell and Bash to Windows. But again, with all these great features and tools, as a developer, you think something is missing.</p>\n<p>Two weeks ago, I decided to give Linux a try, So I chose Ubuntu because it's user-friendly and its community is huge. Actually, my goal was to do some experiments with new version of .NET called .NET Core. The experience was great. First, I created a very simple console application on Windows and deployed it as a <a href=\"https://docs.microsoft.com/en-us/dotnet/articles/core/preview3/deploying/#self-contained-deployments-scd\">SCD (Self-Contained Deployment)</a>:</p>\n<img class=\"img-res\" src=\"/img/publish.jpg\" />\n<p>Then, I copied the publish folder on my USB stick and finally, I could run my .NET Core application without installing the .NET runtime on the target machine:</p>\n<img class=\"img-res\" src=\"/img/run_app.png\" />\n<p>As a .NET developer I have been waiting voraciously for such opportunity. So, I think it's the best time to migrate to Linux.</p>\n<p>Actually, I was amazed at the first impression because Linux has everything a developer needs out of the box. Python is already installed on the OS. This is great because there are times you want to write simple scripts, scrap a page or something like that.</p>\n<p>Other cool features of Linux are commands like <a href=\"https://www.gnu.org/software/sed/manual/sed.html\">sed</a> and <a href=\"https://www.gnu.org/software/grep/manual/html_node/index.html\">grep</a>. These tools are great whether you are a developer or a network administrator. for example, suppose that you have following content within a file named <code class=\"language-text\">test.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"AppName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Simple App\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"Website\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sirwan.info\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"UseSqlite\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now you want to replace all occurrence of <code class=\"language-text\">&quot;UseSqlite&quot;: false,</code> to <code class=\"language-text\">&quot;UseSqlite&quot;: true,</code> you can do that simply by typing this command:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cat text<span class=\"token punctuation\">.</span>json <span class=\"token operator\">|</span> sed <span class=\"token string\">'s/\"UseSqlite\": false,/\"UseSqlite\": true,/'</span></code></pre></div>\n<img class=\"img-res\" src=\"/img/sed_command.png\" />\n<p>You can definitely do wide varaity of things using these tools, I just wanted to tell you how much I am excited about these cool stuff.</p>\n<h3>Development on Ubuntu</h3>\n<p>The good news is that .NET Core runs on Windows, Mac and Linux. In order to install .NET Core on Ubuntu you just simply need to navigate to <a href=\"https://www.microsoft.com/net/download\">dot.net</a> site and download the appropriate version. after installing .NET Core, it gives you a CLI called <code class=\"language-text\">dotnet</code> so you can simply create, build and publish your applications using this command, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">dotnet <span class=\"token keyword\">new</span>\ndotnet restore\ndotnet run</code></pre></div>\n<p>You can also use the editor of your choice for developing .NET Core application, personally I prefer to use <a href=\"http://code.visualstudio.com/\">Visual Studio Code</a> or VSCode for short. because it has all great features you need:</p>\n<img class=\"img-res\" src=\"/img/vscode.png\" />\n<p>VSCode is great, But I think using an IDE like Visual Studio gives you the power you need when are developing applications, Unfortunately, there's no official version of Visual Studio for Linux at this time. I hope Microsoft release it for Linux users The only reason that I can't abandon Windows is the lack of Visual Studio So I have to keep using Windows on my main machine.</p>\n<h3>Conclusion</h3>\n<p>As I mentioned Visual Studio is the only reason to not completely abandon Windows, But I will use Ubuntu for sure. This was my first attempt to use Ubuntu and I am very happy about the experience, I would like to hear your ideas about your journey.</p>\n<p>Happy Coding :))</p>","excerpt":"Running Window 98 on my PC was my first experience with Windows. in fact, for the last 11 years or so, Windows has been the dominant…","fields":{"slug":"2017-02-27-My-first-experiences-with-Linux"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"limit":6,"skip":24,"numPages":7,"currentPage":5}}}