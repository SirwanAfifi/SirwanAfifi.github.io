{"componentChunkName":"component---src-templates-blog-list-template-js","path":"/page/5","webpackCompilationHash":"cb3b8dd0f56ad43f9bb4","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"Running PowerShell on macOS","date":"June 6th, 2017","slug":"Powershell-on-macOS/"},"html":"<p>It's been a while I have been using macOS as my primary operating system, you can read about my expreince <a href=\"http://sirwan.info/archive/2017/06/04/SQL-Server-on-Linux-in-Docker-on-a-Mac/\">here</a>.</p>\n<p>Today I wanted to run a PowerShell script, I searched around and figured out Microsoft has made PowerShell <a href=\"https://github.com/PowerShell/PowerShell\">open source</a> open source and the good news is that PowerShell is now cross-platform! this means that you can also run PowerShell scripts on Linux, macOS.</p>\n<p>Actually to get PowerShell to work all you need to do is installing it using Homebrew:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">brew cask install powershell</code></pre></div>\n<p><em>Before preceding, make sure you have already installed <a href=\"https://caskroom.github.io/\">Homebrew-Cask</a> on your machine.</em></p>\n<blockquote>\n<p>Homebrew-Cask extends Homebrew and brings its elegance, simplicity, and speed to macOS applications and large binaries alike.\nIt only takes 1 line in your shell to reach 3759 Casks maintained by 4856 contributors.</p>\n</blockquote>\n<img src=\"/img/powershell_installation_on_mac.png\" />\n<p>That's it, now <code class=\"language-text\">PowerShell</code> is installed, so you can use it in your terminal:\n<img src=\"/img/powershell_foreach.png\" /></p>\n<p>There's also a great <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.PowerShell\">VSCode extension</a> to write, debug PowerShell scripts:\n<img src=\"/img/powershell_debugging_on_vscode.png\" /></p>","excerpt":"It's been a while I have been using macOS as my primary operating system, you can read about my expreince here. Today I wanted to run a…","fields":{"slug":"2017-06-06-Powershell-on-macOS"}}},{"node":{"frontmatter":{"title":"SQL Server on Linux in Docker on a Mac","date":"June 4th, 2017","slug":"SQL-Server-on-Linux-in-Docker-on-a-Mac/"},"html":"<p>Over the last few months, I have been working on a couple of ASP.NET Core projects, it's been great experience so far becuase I can easily work on <a href=\"http://sirwan.info/My-first-experiences-with-Linux\">different platforms</a> while working on these projects. I recently bought a MacBook Pro and have decided to do .NET projects on macOS since then.</p>\n<p>Fortunately working with projects is not a pain in the neck anymore, with help of <a href=\"https://www.docker.com/what-docker\">Docker</a> you can easily setup up a complex development environment in minutes. It actually simplifies the process of building and shipping, running your apps on differente environments.</p>\n<p>The first challenge I faced when using macOS was connecting to and using SQL Server. Thanks to Docker and SQL Server for Linux. It's an instance of SQL Server as a docker container and it's super-fast so that it runs in seconds.</p>\n<img src=\"/img/docker.png\" />\n<hr>\n<h2>Installing Docker for Mac</h2>\n<p>In order to get Docker to work you will need to install Docker for Mac, you can follow <a href=\"https://docs.docker.com/docker-for-mac\">these steps</a> to install it. Once Docker installation is done, it will automatically be started:\n<br /></p>\n<img src=\"/img/docker-running.png\" />\n<p>You can also run <code class=\"language-text\">docker --version</code> to verify that Docker is working as expected.</p>\n<hr>\n<h2>Pulling and running Docker image</h2>\n<p>Next, you can install and run SQL <a href=\"https://hub.docker.com/r/microsoft/mssql-server-linux\">Server on Linux docker image</a> using following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">docker run -e <span class=\"token string\">'ACCEPT_EULA=Y'</span> -e 'SA_PASSWORD<span class=\"token operator\">=</span>Passowrd’ -p 1433:1433 -d microsoft/mssql-server-linux</code></pre></div>\n<p>This command will install and run the SQL Server image. Now SQL Server is running locally in Docker container:</p>\n<img src=\"/img/sql-server-is-running.png\" />\n<p>You can use its connection string in your ASP.NET Core application:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MvcMovieContext</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">DbContext</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">void</span> <span class=\"token function\">OnConfiguring</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DbContextOptionsBuilder</span> optionsBuilder<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        optionsBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">UseSqlServer</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"Data Source=localhost;Initial Catalog=MovieDB;User ID=sa;Password=StrongPassword\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> DbSet<span class=\"token operator\">&lt;</span>Movie<span class=\"token operator\">></span> Movies <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now if we run migration, the <code class=\"language-text\">MovieDB</code> database will be created in the running docker container:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">dotnet ef database update</code></pre></div>\n<h2>Connecting and quering the databse</h2>\n<p>There are several ways to connect and query a database running in Docker container, one way is using a command line tool called <code class=\"language-text\">sqlcmd</code>:</p>\n<img src=\"/img/sqlcmd.png\" />\n<p>Personally I use <code class=\"language-text\">mssql</code> extension for Visual Studio Code. becuase it's really easy to use so you don't have to write your queries in command line mode. If you have not already installed this extension, all you need to do is press <code class=\"language-text\">⌘ + P</code> and type <code class=\"language-text\">ext install mssql</code> then press enter to install it.</p>\n<p>In order to connect and query your database first, you need to write your SQL queries into a <code class=\"language-text\">SQL</code> file in VS Code then press <code class=\"language-text\">⌘ + Shift + P</code> then choose <code class=\"language-text\">Create Connection Profile</code>, follow the prompts to specify the connection properties for the new connection profile. At the end you should have following settings:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"mssql.connections\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"authenticationType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SqlLogin\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"database\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MovieDB\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SA\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"password\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"savePassword\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"profileName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MovieDB\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see <code class=\"language-text\">mssql.connections</code> takes an array, it means that you can define as many connection profiles as you want. Once you defined your profile, you can use it to execute your queries then the result will be shown as a seperate window:</p>\n<img src=\"/img/query_result_mssql.png\" />\n<p>As you can see working with SQL Server on macOS is really straightforward. Something like this was not possible in .NET before but nowadays you can develope .NET applications on OS of your choice. that's why I’m more excited about .NET more than ever.</p>","excerpt":"Over the last few months, I have been working on a couple of ASP.NET Core projects, it's been great experience so far becuase I can easily…","fields":{"slug":"2017-06-04-SQL-Server-on-Linux-in-Docker-on-a-Mac"}}},{"node":{"frontmatter":{"title":"Working remotely","date":"May 3rd, 2017","slug":"Working-remotely/"},"html":"<p>It has been 8 months and so that I have been working remotely for a startup out there. It's been my pleasure to work with a team of great and talented members. over the past few months, I have learned a lot both in terms of technical stuff and working as a team member.</p>\n<p>For some, this might not seem a big deal. But for me, it's a pretty big one. So I thought it would be great to share my experiences so far.</p>\n<h3>New technology, new tools</h3>\n<p>For this project we are using .NET core and ASP.NET MVC core on top of it. The main benefit of using cutting edge technologies is that you always keep yourself updated, but you might argue that working with new and shiny things is overwhelming because the product is not mature enough to work with. But I believe that's also another great benefit because when you encounter a bug you easily open a GitHub issue and report it. So I think it's best of both worlds.</p>\n<h3>Estimation</h3>\n<p>At first, I couldn't deal with an accurate estimation, after a while I figured out that the problem was the task itself, not me, if a task is a big one then estimation most likely will be accurate, so the solution of having an accurate estimation is to break the task into smaller ones.</p>\n<h3>Documentation</h3>\n<p>A key point to have a good documentation is that, it needs to be updated after the requirement is changed. In our case, there are too many changes in requirements, this makes new team members confused. In my opinion, there must be a section called changelog in the documentation so that it will be really easy to know what was the previous changes at first place. you might say it's better to use <code class=\"language-text\">git log</code> but I think sometimes you don't need to go through several file changes in git history in order to understand a small change. Another good thing for new members is having mockups. I have been always a big fan of this type development, because as you know a picture worth a thousand words.</p>\n<h3>Working in different time zones</h3>\n<p>From my point of view working in different time zones makes remote working a little bit difficult, suppose you are given a task, now you have some questions and no one is online, so in this case, you have to leave your messages on Slack or Jira in order to get your questions answered. this is really big deal for small teams.</p>\n<h3>Collaboration</h3>\n<p>Another key point in agile development is collaboration. Working in a team is not just about delivering your product as soon as possible in some sprints. the best part of an agile team is having daily/weekly standup with other members. By other members I mean Mobile developers, Backend developers, Database developers, ... I think the standup shouldn't be held separately. As a web developer, I need to know what's going on in other parts of the application, because I think it gives developers a really good big picture.</p>\n<h3>Conclusion</h3>\n<p>All in all, it has been a great journey for me so far. because working remotely not only improves your technical ability but gives you a cultural perspective.</p>","excerpt":"It has been 8 months and so that I have been working remotely for a startup out there. It's been my pleasure to work with a team of great…","fields":{"slug":"2017-05-03-Working-remotely"}}},{"node":{"frontmatter":{"title":"My first experiences with Linux","date":"February 27th, 2017","slug":"My-first-experiences-with-Linux/"},"html":"<p>Running Window 98 on my PC was my first experience with Windows. in fact, for the last 11 years or so, Windows has been the dominant operating system that I've been using. So, up until now, I have been an avid fan of Windows.</p>\n<blockquote>\n<p>Disclaimer: I'm not going to say that I'm not interested in Windows anymore, I just want to explain my experience with Ubuntu</p>\n</blockquote>\n<p>Windows just works fine for the most part. But, as a developer, I have always felt something is missing. For solving this problem, Microsoft has tried its best bringing in tools like PowerShell and Bash to Windows. But again, with all these great features and tools, as a developer, you think something is missing.</p>\n<p>Two weeks ago, I decided to give Linux a try, So I chose Ubuntu because it's user-friendly and its community is huge. Actually, my goal was to do some experiments with new version of .NET called .NET Core. The experience was great. First, I created a very simple console application on Windows and deployed it as a <a href=\"https://docs.microsoft.com/en-us/dotnet/articles/core/preview3/deploying/#self-contained-deployments-scd\">SCD (Self-Contained Deployment)</a>:</p>\n<img src=\"/img/publish.jpg\" />\n<p>Then, I copied the publish folder on my USB stick and finally, I could run my .NET Core application without installing the .NET runtime on the target machine:</p>\n<img src=\"/img/run_app.png\" />\n<p>As a .NET developer I have been waiting voraciously for such opportunity. So, I think it's the best time to migrate to Linux.</p>\n<p>Actually, I was amazed at the first impression because Linux has everything a developer needs out of the box. Python is already installed on the OS. This is great because there are times you want to write simple scripts, scrap a page or something like that.</p>\n<p>Other cool features of Linux are commands like <a href=\"https://www.gnu.org/software/sed/manual/sed.html\">sed</a> and <a href=\"https://www.gnu.org/software/grep/manual/html_node/index.html\">grep</a>. These tools are great whether you are a developer or a network administrator. for example, suppose that you have following content within a file named <code class=\"language-text\">test.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"AppName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Simple App\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"Website\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sirwan.info\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"UseSqlite\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now you want to replace all occurrence of <code class=\"language-text\">&quot;UseSqlite&quot;: false,</code> to <code class=\"language-text\">&quot;UseSqlite&quot;: true,</code> you can do that simply by typing this command:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cat text<span class=\"token punctuation\">.</span>json <span class=\"token operator\">|</span> sed <span class=\"token string\">'s/\"UseSqlite\": false,/\"UseSqlite\": true,/'</span></code></pre></div>\n<img src=\"/img/sed_command.png\" />\n<p>You can definitely do wide varaity of things using these tools, I just wanted to tell you how much I am excited about these cool stuff.</p>\n<h3>Development on Ubuntu</h3>\n<p>The good news is that .NET Core runs on Windows, Mac and Linux. In order to install .NET Core on Ubuntu you just simply need to navigate to <a href=\"https://www.microsoft.com/net/download\">dot.net</a> site and download the appropriate version. after installing .NET Core, it gives you a CLI called <code class=\"language-text\">dotnet</code> so you can simply create, build and publish your applications using this command, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">dotnet <span class=\"token keyword\">new</span>\ndotnet restore\ndotnet run</code></pre></div>\n<p>You can also use the editor of your choice for developing .NET Core application, personally I prefer to use <a href=\"http://code.visualstudio.com/\">Visual Studio Code</a> or VSCode for short. because it has all great features you need:</p>\n<img src=\"/img/vscode.png\" />\n<p>VSCode is great, But I think using an IDE like Visual Studio gives you the power you need when are developing applications, Unfortunately, there's no official version of Visual Studio for Linux at this time. I hope Microsoft release it for Linux users The only reason that I can't abandon Windows is the lack of Visual Studio So I have to keep using Windows on my main machine.</p>\n<h3>Conclusion</h3>\n<p>As I mentioned Visual Studio is the only reason to not completely abandon Windows, But I will use Ubuntu for sure. This was my first attempt to use Ubuntu and I am very happy about the experience, I would like to hear your ideas about your journey.</p>\n<p>Happy Coding :))</p>","excerpt":"Running Window 98 on my PC was my first experience with Windows. in fact, for the last 11 years or so, Windows has been the dominant…","fields":{"slug":"2017-02-27-My-first-experiences-with-Linux"}}},{"node":{"frontmatter":{"title":"Environments in ASP.NET Core","date":"November 23rd, 2016","slug":"Environments-in-ASP.NET-Core/"},"html":"<p>In ASP.NET Core we can have different hosting environments, this is supported by an environment variable called <code class=\"language-text\">ASPNETCORE_ENVIRONMENT</code>. You can see this value is already set to <code class=\"language-text\">Development</code>:</p>\n<img src=\"/img/environment.jpg\" />\n<p>This value is active as long as you run your application inside Visual Studio, So when you deploy your application you must change this value. Actually, this value comes from a file called <code class=\"language-text\">launchSettings.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"iisSettings\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"windowsAuthentication\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"anonymousAuthentication\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"iisExpress\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"applicationUrl\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"http://localhost:13880/\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"sslPort\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"profiles\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"IIS Express\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"commandName\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"IISExpress\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"launchBrowser\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"environmentVariables\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"ASPNETCORE_ENVIRONMENT\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Development\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"ProjectName\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"commandName\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Project\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"launchBrowser\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"launchUrl\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"http://localhost:5000\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"environmentVariables\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"ASPNETCORE_ENVIRONMENT\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Development\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can determine what the environment is by using <code class=\"language-text\">IHostingEnvironment</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IApplicationBuilder</span> app<span class=\"token punctuation\">,</span>\n\t<span class=\"token class-name\">IHostingEnvironment</span> env<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ILoggerFactory</span> loggerFactory<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tloggerFactory<span class=\"token punctuation\">.</span><span class=\"token function\">AddConsole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">.</span><span class=\"token function\">IsDevelopment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tapp<span class=\"token punctuation\">.</span><span class=\"token function\">UseDeveloperExceptionPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tapp<span class=\"token punctuation\">.</span><span class=\"token function\">UseExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ExceptionHandlerOptions</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tExceptionHandler <span class=\"token operator\">=</span> context <span class=\"token operator\">=></span> context<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Opps!\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// other configurations</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This object also has a method called <code class=\"language-text\">IsEnvironment</code> for using custom environment:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">.</span><span class=\"token function\">IsEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"envName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// some config</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>One interesting thing is that the Startup class itself supports different environments, it means that for each environment you can have both <code class=\"language-text\">Configure</code> and <code class=\"language-text\">ConfigureServices</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureDevelopment</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IApplicationBuilder</span> app<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureServicesDevelopment</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureStaging</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IApplicationBuilder</span> app<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureServicesStaging</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureProduction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IApplicationBuilder</span> app<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureServicesProduction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now you might ask how we can set this environment variable, well there are several ways that you can use, this great <a href=\"http://andrewlock.net/how-to-set-the-hosting-environment-in-asp-net-core/\">post</a> explains them in details.</p>","excerpt":"In ASP.NET Core we can have different hosting environments, this is supported by an environment variable called . You can see this value is…","fields":{"slug":"2016-11-23-Environments-in-ASP.NET-Core"}}},{"node":{"frontmatter":{"title":"Getting to know Singleton pattern in C#","date":"November 8th, 2016","slug":"Getting-to-know-Singletone-Pattern/"},"html":"<p>This pattern helps us to ensure a class has only one instance. The term comes from the <a href=\"https://en.wikipedia.org/wiki/Singleton_(mathematics)\">mathematical concept of a singleton</a>:</p>\n<blockquote>\n<p>In mathematics, a singleton, also known as a unit set,[1] is a set with exactly one element. For example, the set {0} is a singleton.</p>\n</blockquote>\n<p>Eventually we must have a class that only gives us a single instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> sigleInstance <span class=\"token operator\">=</span> MySingletonClass<span class=\"token punctuation\">.</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you can see the only way to access the instance is by calling a public static method called <code class=\"language-text\">GetInstance()</code>, the single object instance under consideration is created only for the first time it is requested. suppose the following class:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySingletonClass</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MySingletonClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now I want to make this class singleton, So the first step is to ensure that no one can instantiate our class for doing so we must make the constrauctor <code class=\"language-text\">private</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySingletonClass</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">MySingletonClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now whenever you want to create a new instance of <code class=\"language-text\">MySingletonClass</code> using <code class=\"language-text\">new</code> keyword, Visual Studio gives you this error:</p>\n<img src=\"/img/singleton_error.jpg\" />\n<p>But we can still instantiate it from within the class. So next step is to create a new variable of type <code class=\"language-text\">MySingletonClass</code> inside the class, this class is going to be the only instance of the class:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySingletonClass</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">MySingletonClass</span> _instance<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token function\">MySingletonClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So we are getting close to implementing the pattern. Now we need a way to get access the single instance. So we need a method like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">MySingletonClass</span> <span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t_instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySingletonClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> _instance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This method instantiates <code class=\"language-text\">MySingletonClass</code> if an instance doesn't already exist, otherwise it return the existing instance. To demonstrate the object lifetime we can print value of <code class=\"language-text\">GetHashCode()</code> fo these objects:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> mySingleInstance   <span class=\"token operator\">=</span> MySingletonClass<span class=\"token punctuation\">.</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mySingleInstance_2 <span class=\"token operator\">=</span> MySingletonClass<span class=\"token punctuation\">.</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mySingleInstance_3 <span class=\"token operator\">=</span> MySingletonClass<span class=\"token punctuation\">.</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mySingleInstance_4 <span class=\"token operator\">=</span> MySingletonClass<span class=\"token punctuation\">.</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>$<span class=\"token string\">\"obj1: {mySingleInstance.GetHashCode()}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>$<span class=\"token string\">\"obj2: {mySingleInstance_2.GetHashCode()} \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>$<span class=\"token string\">\"obj3: {mySingleInstance_3.GetHashCode()} \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>$<span class=\"token string\">\"obj4: {mySingleInstance_4.GetHashCode()} \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<img src=\"/img/singleton_GetHashCode.jpg\" />\n<p>As you can see all of the objects are the same and share the same instance. The problem with this implementation is that, it's not <a href=\"http://csharpindepth.com/Articles/General/Singleton.aspx\">thread-safe</a>; it means that if seperate threads of execution access the <code class=\"language-text\">_instance</code> at the same time, more that one instance of the <code class=\"language-text\">MySingletonClass</code> object may be created. One of the solution is by using .NET 4's <code class=\"language-text\">Lazy&lt;T&gt;</code> type:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySingletonClass</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> Lazy<span class=\"token operator\">&lt;</span>MySingletonClass<span class=\"token operator\">></span> _instance <span class=\"token operator\">=</span>\n\t\t<span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">Lazy</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MySingletonClass</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySingletonClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">MySingletonClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">MySingletonClass</span> <span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n    \t<span class=\"token keyword\">return</span> _instance<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"This pattern helps us to ensure a class has only one instance. The term comes from the mathematical concept of a singleton: In mathematics…","fields":{"slug":"2016-11-08-Getting-to-know-Singletone-Pattern"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"limit":6,"skip":24,"numPages":7,"currentPage":5}}}