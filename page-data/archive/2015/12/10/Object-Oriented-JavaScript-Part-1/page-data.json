{"componentChunkName":"component---src-templates-post-js","path":"/archive/2015/12/10/Object-Oriented-JavaScript-Part-1/","webpackCompilationHash":"c871001d7f3203a6495a","result":{"data":{"markdownRemark":{"frontmatter":{"formattedDate":"2015/12/10","date":"December 10th, 2015","title":"Object Oriented JavaScript Part 1","tags":["C#","JavaScript"],"slug":"Object-Oriented-JavaScript-Part-1/"},"html":"<p>Recently I've started to improve my JavaScript skill, So I decided to keep notes about new things I learn from now on.\nSince I'm a C# developer, I'm trying to use my existing knowledge in C# to learn JavaScript.<br>\nAs you know in C# we have something called <a href=\"https://msdn.microsoft.com/en-us/library/bb384062.aspx\">Object and collection initializer</a>. For example we can use object initializer to create name and value pairs for different properties of the object, in this case <code class=\"language-text\">car</code> object:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Chevrolet Corvette\"</span><span class=\"token punctuation\">,</span>\n    Color <span class=\"token operator\">=</span> <span class=\"token string\">\"Red\"</span><span class=\"token punctuation\">,</span>\n    Manufacturer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CarManufacturer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Chevrolet\"</span><span class=\"token punctuation\">,</span>\n        Country <span class=\"token operator\">=</span> <span class=\"token string\">\"USA\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you can see we used object initializer for those embedded objects too.\nAlthough object initializers can be used for anonymous types. So here's the same example which we build with anonymous object:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span>\n    Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Chevrolet Corvette\"</span><span class=\"token punctuation\">,</span>\n    Color <span class=\"token operator\">=</span> <span class=\"token string\">\"Red\"</span><span class=\"token punctuation\">,</span>\n    Manufacturer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span>\n        Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Chevrolet\"</span><span class=\"token punctuation\">,</span>\n        Country <span class=\"token operator\">=</span> <span class=\"token string\">\"USA\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is very similar the way dynamic objects work in JavaScript. So in JavaScript object creation is going to follow this pattern:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Chevrolet Corvette\"</span><span class=\"token punctuation\">,</span>\n  color<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Red\"</span><span class=\"token punctuation\">,</span>\n  manufacturer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Chevrolet\"</span><span class=\"token punctuation\">,</span>\n    country<span class=\"token punctuation\">:</span> <span class=\"token string\">\"USA\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"towing capacity\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"5,952 lbs\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see we use key/value pairs. Actually it's a little different from C# for instance we used colons (<code class=\"language-text\">:</code>) instead of equals (<code class=\"language-text\">=</code>) but generally the syntaxes are similar. In some case you may see the name is embedded in quotes, it's optional but if you're using any reserved characters like space, in this case, you need to surround the name with quotes (like <code class=\"language-text\">towing capacity</code>).</p>\n<p>These dynamic objects that you have defined with this name value pairs allows you to take these objects you are creating and access each the properties you have defined in that name value pair by the name using a simple dot syntax. For example here in JavaScript you can just access the name using dot name convention:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> car<span class=\"token punctuation\">.</span>name</code></pre></div>\n<p>You can also use a bracket syntax, that's why objects are sometimes called associative arrays:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> car<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>This way we can retrieve or set the property values. There are other ways for accessing and retrieving property value that are as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">car<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"Dot syntax\"</span>\ncar<span class=\"token punctuation\">[</span><span class=\"token string\">\"towing capacity\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"String with space\"</span>\ncar<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"String value\"</span>\ncar<span class=\"token punctuation\">[</span>rand<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Random Number\"</span>\ncar<span class=\"token punctuation\">[</span>obj<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Object\"</span>\ncar<span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Even an empty string\"</span></code></pre></div>\n<p>We can also get embedded objects that are the properties of those dynamic objects as well and retrive properties from them:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> manufacturer <span class=\"token operator\">=</span> car<span class=\"token punctuation\">.</span>manufacturer\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> manufacturer<span class=\"token punctuation\">.</span>name\n<span class=\"token keyword\">var</span> country <span class=\"token operator\">=</span> manufacturer<span class=\"token punctuation\">.</span>country</code></pre></div>\n<h3>Malleability</h3>\n<p>As you probably know, One of the key features of JavaScript is that the language is <a href=\"http://blog.jeremymartin.name/2008/03/understanding-loose-typing-in.html\">loosely typed</a> it means that variables are declared without a type. So the objects that you are creating in this way are very malleable. In C# <code class=\"language-text\">ExpandoObject</code> gives you this behavior.</p>\n<blockquote>\n<p>ExpandoObject Represents an object whose members can be dynamically added and removed at run time.</p>\n</blockquote>\n<p>For example in this code we are creating a new object and marking it as dynamic so that we can add members to this <code class=\"language-text\">ExpandoObject</code> as we want:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">dynamic</span> car  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExpandoObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncar<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Chevrolet Corvette\"</span><span class=\"token punctuation\">;</span>\ncar<span class=\"token punctuation\">.</span>Color <span class=\"token operator\">=</span> <span class=\"token string\">\"Red\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>These are being added on-the-fly. It means that these aren't defining the shape ahead of time. We are just saying we are going to add properties to the <code class=\"language-text\">car</code> object. In fact this is pretty much the same way in JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Chevrolet Corvette\"</span><span class=\"token punctuation\">,</span>\n  color<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Red\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can still add another property or function on-the-fly:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">car<span class=\"token punctuation\">[</span><span class=\"token string\">\"towing capacity\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"5,952 lbs\"</span>\ncar<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">model</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Resourses:</p>\n<ul>\n    <li><a href=\"https://pluralsight.com/courses/js4cs\n\">JavaScript for C# Developers by Shawn Wildermuth</a></li>\n    <li><a href=\"https://mauricebutler.wordpress.com/2011/11/07/getting-started-with-javascript-with-a-c-background/\">Getting started with JavaScript with a C# background</a></li>\n    <li><a href=\"https://dzone.com/articles/javascript-c-developers\">JavaScript for C# Developers: Functions are Objects</a></li>\n</ul>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"2015-12-10-Object-Oriented-JavaScript-Part-1"}}}