{"componentChunkName":"component---src-templates-post-js","path":"/archive/2019/09/18/Importing-JSON-files-into-SQL-Server/","webpackCompilationHash":"d0bef707c4df015807cc","result":{"data":{"markdownRemark":{"frontmatter":{"formattedDate":"2019/09/18","date":"September 18th, 2019","title":"Importing JSON files into SQL Server","tags":["SQL Server","TSQL"],"slug":"Importing-JSON-files-into-SQL-Server/"},"html":"<p>I was assigned to a task to import a <a href=\"https://en.wikipedia.org/wiki/GeoJSON\">GeoJSON</a> file into a SQL Server database. The file was pretty big; I couldn't even open the file in an editor. At first, I wanted to write a simple program (with C# or Python) to open the file and then loop through the entries, parse each one of the entry and then save it into the database. But it would have taken time if I followed that process. All I wanted to do was save a JSON file right into the database. That's where I gave <code class=\"language-text\">OPENROWSET</code> a try. Everything went well, and I successfully saved the file into the database:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@GeoJSON</span> nvarchar<span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@GeoJSON</span> <span class=\"token operator\">=</span> BulkColumn\n <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">OPENROWSET</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">BULK</span> <span class=\"token string\">'C:\\areas.json'</span><span class=\"token punctuation\">,</span> SINGLE_CLOB<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> j\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dbo<span class=\"token punctuation\">.</span>Areas <span class=\"token punctuation\">(</span>Area<span class=\"token punctuation\">,</span>Coordinates<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SELECT</span>\n\tArea<span class=\"token punctuation\">,</span>\n\tCoordinates\n<span class=\"token keyword\">FROM</span>\n    OPENJSON<span class=\"token punctuation\">(</span><span class=\"token variable\">@GeoJSON</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'$.features'</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">WITH</span> <span class=\"token punctuation\">(</span>\n                 Area <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token string\">'$.properties.name'</span><span class=\"token punctuation\">,</span>\n                 Coordinates nvarchar<span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span> <span class=\"token string\">'$.geometry.coordinates'</span> <span class=\"token keyword\">as</span> JSON\n                 <span class=\"token punctuation\">)</span></code></pre></div>\n<p>As you might already know, the <code class=\"language-text\">OPENROWSET</code> is a table value function which returns a table with a single column called <code class=\"language-text\">Bulk</code>. What above code does is first open the JSON file and assign it to a variable called <code class=\"language-text\">GeoJSON</code>. Then I used another table value column called <code class=\"language-text\">OPENJSON</code> to parse the JSON. The first thing we can do is to set our root element, which is <code class=\"language-text\">features</code> in my case. Then elements can be referenced with the prefix <code class=\"language-text\">$</code>. There are two important things to mention. First, if you want to save a JSON element into a string column you will need to make sure the column type is <code class=\"language-text\">nvarchar(max)</code> and you add <code class=\"language-text\">as JSON</code> inside the <code class=\"language-text\">WITH</code> clause for that specific column.</p>\n<p>You can also build a geography value if you have a column with that type:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@GeoJSON</span> nvarchar<span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@GeoJSON</span> <span class=\"token operator\">=</span> BulkColumn\n <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">OPENROWSET</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">BULK</span> <span class=\"token string\">'C:\\areas.json'</span><span class=\"token punctuation\">,</span> SINGLE_CLOB<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> j\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dbo<span class=\"token punctuation\">.</span>Areas <span class=\"token punctuation\">(</span>Area<span class=\"token punctuation\">,</span>Coordinates<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SELECT</span>\n\tArea<span class=\"token punctuation\">,</span>\n\tCoordinates<span class=\"token punctuation\">,</span>\n    geography::STPointFromText<span class=\"token punctuation\">(</span><span class=\"token string\">'POINT ('</span> <span class=\"token operator\">+</span> Longitude <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> Latitude <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4326</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> Geography<span class=\"token punctuation\">,</span>\n    Longitude<span class=\"token punctuation\">,</span>\n    Latitude\n<span class=\"token keyword\">FROM</span>\n    OPENJSON<span class=\"token punctuation\">(</span><span class=\"token variable\">@GeoJSON</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'$.features'</span><span class=\"token punctuation\">)</span>\n             <span class=\"token keyword\">WITH</span> <span class=\"token punctuation\">(</span>\n                 Area <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token string\">'$.properties.name'</span><span class=\"token punctuation\">,</span>\n                 Coordinates nvarchar<span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span> <span class=\"token string\">'$.geometry.coordinates'</span> <span class=\"token keyword\">as</span> JSON<span class=\"token punctuation\">,</span>\n                 Longitude <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token string\">'$.lon'</span><span class=\"token punctuation\">,</span>\n                 Latitude <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token string\">'$.lat'</span>\n                 <span class=\"token punctuation\">)</span></code></pre></div>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"2019-09-18-Importing-JSON-files-into-SQL-SERVER"}}}