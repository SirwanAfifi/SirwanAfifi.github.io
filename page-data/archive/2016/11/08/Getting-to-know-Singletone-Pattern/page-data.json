{"componentChunkName":"component---src-templates-post-js","path":"/archive/2016/11/08/Getting-to-know-Singletone-Pattern/","webpackCompilationHash":"6f4e4e119aa0b4c4cdbb","result":{"data":{"markdownRemark":{"frontmatter":{"formattedDate":"2016/11/08","date":"November 8th, 2016","title":"Getting to know Singleton pattern in C#","tags":["C#","Design Patterns"],"slug":"Getting-to-know-Singletone-Pattern/"},"html":"<p>This pattern helps us to ensure a class has only one instance. The term comes from the <a href=\"https://en.wikipedia.org/wiki/Singleton_(mathematics)\">mathematical concept of a singleton</a>:</p>\n<blockquote>\n<p>In mathematics, a singleton, also known as a unit set,[1] is a set with exactly one element. For example, the set {0} is a singleton.</p>\n</blockquote>\n<p>Eventually we must have a class that only gives us a single instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> sigleInstance <span class=\"token operator\">=</span> MySingletonClass<span class=\"token punctuation\">.</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you can see the only way to access the instance is by calling a public static method called <code class=\"language-text\">GetInstance()</code>, the single object instance under consideration is created only for the first time it is requested. suppose the following class:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySingletonClass</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MySingletonClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now I want to make this class singleton, So the first step is to ensure that no one can instantiate our class for doing so we must make the constrauctor <code class=\"language-text\">private</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySingletonClass</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">MySingletonClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now whenever you want to create a new instance of <code class=\"language-text\">MySingletonClass</code> using <code class=\"language-text\">new</code> keyword, Visual Studio gives you this error:</p>\n<img class=\"img-res\" src=\"/img/singleton_error.jpg\" />\n<p>But we can still instantiate it from within the class. So next step is to create a new variable of type <code class=\"language-text\">MySingletonClass</code> inside the class, this class is going to be the only instance of the class:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySingletonClass</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">MySingletonClass</span> _instance<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token function\">MySingletonClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So we are getting close to implementing the pattern. Now we need a way to get access the single instance. So we need a method like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">MySingletonClass</span> <span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t_instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySingletonClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> _instance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This method instantiates <code class=\"language-text\">MySingletonClass</code> if an instance doesn't already exist, otherwise it return the existing instance. To demonstrate the object lifetime we can print value of <code class=\"language-text\">GetHashCode()</code> fo these objects:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> mySingleInstance   <span class=\"token operator\">=</span> MySingletonClass<span class=\"token punctuation\">.</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mySingleInstance_2 <span class=\"token operator\">=</span> MySingletonClass<span class=\"token punctuation\">.</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mySingleInstance_3 <span class=\"token operator\">=</span> MySingletonClass<span class=\"token punctuation\">.</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mySingleInstance_4 <span class=\"token operator\">=</span> MySingletonClass<span class=\"token punctuation\">.</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>$<span class=\"token string\">\"obj1: {mySingleInstance.GetHashCode()}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>$<span class=\"token string\">\"obj2: {mySingleInstance_2.GetHashCode()} \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>$<span class=\"token string\">\"obj3: {mySingleInstance_3.GetHashCode()} \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>$<span class=\"token string\">\"obj4: {mySingleInstance_4.GetHashCode()} \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<img class=\"img-res\" src=\"/img/singleton_GetHashCode.jpg\" />\n<p>As you can see all of the objects are the same and share the same instance. The problem with this implementation is that, it's not <a href=\"http://csharpindepth.com/Articles/General/Singleton.aspx\">thread-safe</a>; it means that if seperate threads of execution access the <code class=\"language-text\">_instance</code> at the same time, more that one instance of the <code class=\"language-text\">MySingletonClass</code> object may be created. One of the solution is by using .NET 4's <code class=\"language-text\">Lazy&lt;T&gt;</code> type:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySingletonClass</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> Lazy<span class=\"token operator\">&lt;</span>MySingletonClass<span class=\"token operator\">></span> _instance <span class=\"token operator\">=</span>\n\t\t<span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">Lazy</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MySingletonClass</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySingletonClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">MySingletonClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">MySingletonClass</span> <span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n    \t<span class=\"token keyword\">return</span> _instance<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"2016-11-08-Getting-to-know-Singletone-Pattern"}}}