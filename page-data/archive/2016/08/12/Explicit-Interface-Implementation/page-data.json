{"componentChunkName":"component---src-templates-post-js","path":"/archive/2016/08/12/Explicit-Interface-Implementation/","webpackCompilationHash":"f50d9fa33e15cfc8a0b8","result":{"data":{"markdownRemark":{"frontmatter":{"formattedDate":"2016/08/12","date":"August 12th, 2016","title":"Explicit Interface Implementation","tags":["C#"],"slug":"Explicit-Interface-Implementation/"},"html":"<p>Let's imagine that you have a class with two methods:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VendingMachine</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">InsertCoin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> amount<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>amount <span class=\"token operator\">&lt;</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> <span class=\"token function\">Buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Buy\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now when we want to create an instance of this class and call one of those methods, it executes as expected:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">VendingMachine</span> machine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VendingMachine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmachine<span class=\"token punctuation\">.</span><span class=\"token function\">InsertCoin</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nmachine<span class=\"token punctuation\">.</span><span class=\"token function\">Buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// \"Buy\"</span></code></pre></div>\n<p>Now suppose that we have an interface called <code class=\"language-text\">IVendingMachine</code> that has two methods:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IVendingMachine</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">InsertCoin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">string</span> <span class=\"token function\">Buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We want our class to implements this interface:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VendingMachine</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">IVendingMachine</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">InsertCoin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> amount<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>amount <span class=\"token operator\">&lt;</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> <span class=\"token function\">Buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Buy\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Our class satisfied the interface because it has the methods with the same names. So Visual Studio doesn't give you a compiler error. Now let's imagine that we\nalso want to add interface's methods to this class, So, in this case, we must explicitly prefix the methods with <code class=\"language-text\">IVendingMachine.</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VendingMachine</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">IVendingMachine</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">InsertCoin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> amount<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>amount <span class=\"token operator\">&lt;</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> IVendingMachine<span class=\"token punctuation\">.</span><span class=\"token function\">InsertCoin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> amount<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>amount <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> <span class=\"token function\">Buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Buy\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">string</span> IVendingMachine<span class=\"token punctuation\">.</span><span class=\"token function\">Buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"IVendingMachine Buy\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that Visual Studio can help you to implement interface explicitly by pressing <code class=\"language-text\">Ctrl + .</code> on the name of the interface and select <code class=\"language-text\">Implement interface explicitly</code>:</p>\n<img src=\"/img/explicit_interface_implementation.jpg\" />\nNow, what happens when we call the `InsertCoin` and `Buy` methods? In this case, we should consider two different situations when we create the object:\n<ul>\n<li>Concrete Type</li>\n<li>Interface Variable</li>\n</ul>\n<p>If we want the methods of <code class=\"language-text\">VendingMachine</code> we should create the object with concrete type:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">VendingMachine</span> machine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VendingMachine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmachine<span class=\"token punctuation\">.</span><span class=\"token function\">InsertCoin</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nmachine<span class=\"token punctuation\">.</span><span class=\"token function\">Buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// \"Buy\"</span></code></pre></div>\n<p>If we want the methods of <code class=\"language-text\">IVendingMachine</code> we should create the object with interface variable:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">IVendingMachine</span> machine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VendingMachine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmachine<span class=\"token punctuation\">.</span><span class=\"token function\">InsertCoin</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nmachine<span class=\"token punctuation\">.</span><span class=\"token function\">Buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// \"IVendingMachine Buy\"</span></code></pre></div>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"2016-08-12-Explicit-Interface-Implementation"}}}