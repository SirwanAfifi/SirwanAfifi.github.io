{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"Hosting a WCF Service as a Windows Service Using Topshelf","date":"March 7th, 2019","slug":"/posts/Hosting-WCF-Service/"},"html":"<p>You might be wondering why I am blogging about WCF. Is it still relevant? This is part of a legacy WCF project, and I am responsible for adding some functionalities to it, I like it though. By the way, it's been a long time since it went out of fashion, but many large enterprise applications still use it.</p>\n<p>As you know, WCF services need to run in a host process so when clients want to consume the services we need to make sure the services are alive. The host process needs to provide a host, and this host is responsible for setting up the services and listening for incoming messages then creating instances of the service and respond to the client by dispatching a call to the service class. As I mentioned in a legacy application we wanted to host our services as a Windows Service, this app had been using a Console application, but the problem with Console applications is that you need to make sure the app is open all the time. For example, if the server gets restarted you should manually open the app, you could say we should add this app as a startup process so whenever the system boots up this app is opened but we can achieve a better result by writing a Windows service instead. Windows services are a great way to run code in the background; this means that we don’t need a Console Application to run the application. Once you installed the service it keeps running, we can control how to start the service for example when can set it to automatically started when the system boots or be configured when a user logs in. Both of these approaches are considered as two hosting options because they are self-hosted applications; it means that both are running inside a .NET process.</p>\n<h2>Installing Topshelf</h2>\n<p>Topshelf is an open source .NET Windows Service library, it makes the process of creating Windows services much easier for us so that we can only focus on the service functionality as opposed to setting up the boilerplate service code. To install TopShelf all we need to do is installing its NuGet package:</p>\n<pre><code>Install-Package Topshelf\n</code></pre>\n<p>The next step is wrapping your service functionality inside a class with two methods <code>Start</code> and <code>Stop</code> these methods are going to be used by TopShelf to start and stop the service:</p>\n<pre><code class=\"language-csharp\">public class MyService\n{\n    private ServiceHost usersHost;\n\n    public bool Start()\n    {\n\n        try\n        {\n            usersHost = new ServiceHost(typeof(UsersService.UsersService));\n\n            usersHost.Open();\n            Console.WriteLine(\"Service Running...\");\n            Console.WriteLine(\"Press a key to quit\");\n\n            return true;\n        }\n        catch (Exception ex)\n        {\n\n            return false;\n        }\n        finally\n        {\n            usersHost.Close();\n        }\n    }\n\n    public bool Stop()\n    {\n        usersHost.Close();\n\n        return true;\n    }\n}\n</code></pre>\n<p>The next step is adding this class to TopShelf for creating our Windows Service:</p>\n<pre><code class=\"language-csharp\">public class Program\n{\n    static void Main(string[] args)\n    {\n        HostFactory.Run(serviceConfig =>\n        {\n            serviceConfig.Service&#x3C;MyService>(serviceInstance =>\n            {\n                serviceInstance.ConstructUsing(() => new MyService());\n                serviceInstance.WhenStarted(execute => execute.Start());\n                serviceInstance.WhenStopped(execute => execute.Stop());\n            });\n\n            serviceConfig.SetServiceName(\"My Service\");\n            serviceConfig.SetDisplayName(\"My Service\");\n            serviceConfig.SetDescription(\"Hosting WCF services\");\n\n            serviceConfig.StartAutomatically();\n        });\n    }\n}\n</code></pre>\n<h2>Installing our service into Windows</h2>\n<ul>\n<li>Run Command Prompt as Admin</li>\n<li>cd into to bin\\Debug folder</li>\n<li>{AssebmlyName}.exe install</li>\n</ul>\n<h2>Adding NLog</h2>\n<p>We can add logging functionality to the mix using NLog, for doing so we first need to add the following package:</p>\n<pre><code>Install-Package Topshelf.NLog\n</code></pre>\n<p>The next step is to add the following configuration to <code>app.config</code> file:</p>\n<pre><code class=\"language-xml\">&#x3C;configSections>\n   &#x3C;section name=\"nlog\" type=\"NLog.Config.ConfigSectionHandler, NLog\"/>\n&#x3C;/configSections>\n\n&#x3C;nlog>\n    &#x3C;targets>\n      &#x3C;target name=\"consoleTarget\" type=\"Console\" />\n    &#x3C;/targets>\n    &#x3C;rules>\n      &#x3C;logger name=\"*\" minlevel=\"Debug\" writeTo=\"consoleTarget\" />\n    &#x3C;/rules>\n&#x3C;/nlog>\n</code></pre>\n<p>Then we need to register NLog service in the <code>Program.cs</code> file:</p>\n<pre><code class=\"language-csharp\">public class Program\n{\n    static void Main(string[] args)\n    {\n        HostFactory.Run(serviceConfig =>\n        {\n            serviceConfig.UseNLog();\n\n            // as before\n        });\n    }\n}\n</code></pre>\n<p>Now we can use the logger in our service:</p>\n<pre><code class=\"language-csharp\">public class MyService\n{\n    // our service declarations\n\n    private static readonly LogWriter _log = HostLogger.Get&#x3C;MyService>();\n\n     public bool Start()\n        {\n            try\n            {\n               _log.Info(\"Starting services\");\n</code></pre>","excerpt":"You might be wondering why I am blogging about WCF. Is it still relevant? This is part of a legacy WCF project, and I am responsible for…"}},{"node":{"frontmatter":{"title":"What's Elasticsearch","date":"December 5th, 2018","slug":"/posts/elasric-search/"},"html":"<p>Wikipedia:</p>\n<blockquote>\n<p>Elasticsearch is a search engine based on the Lucene library. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface and schema-free JSON documents. Elasticsearch is developed in Java and is released as open source under the terms of the Apache License. Official clients are available in Java, .NET (C#), PHP, Python, Apache Groovy, Ruby and many other languages.5 According to the DB-Engines ranking, Elasticsearch is the most popular enterprise search engine followed by Apache Solr, also based on Lucene.</p>\n</blockquote>\n<p>Executing SELECT * FROM .... all the time consumes a lot of CPU also it doesn't have index, One solution would be using FTS (Full Text Search) in RDBMS but in NoSQL world If you need a high performance search engine you'd better use Elasticsearch.</p>\n<img class=\"center-image\" src=\"/media/elastic_stack.jpg\" alt=\"Elastic Stack\" width=\"700\">\n<h3>History</h3>\n<ul>\n<li>\n<p>1999 - Lucene</p>\n<ul>\n<li>It helped all search engines back then index the data that they were adjusting from the internet and provide reasonable ways of retrieving that information based fuzzy matching.</li>\n</ul>\n</li>\n<li>\n<p>2004 - Compass</p>\n<ul>\n<li>Built on top of Lucene, the same services but in a more scalable manner, idea was to provide a distributed search solution.</li>\n</ul>\n</li>\n<li>\n<p>2010 - Elasticsearch</p>\n<ul>\n<li>Distributed, RESTful search and analytical engine</li>\n</ul>\n</li>\n</ul>\n<h3>Use cases</h3>\n<ul>\n<li>Security/log analytics</li>\n<li>\n<p>Marketing = Use this data to find things:</p>\n<ul>\n<li>How people find our website?</li>\n<li>Where they came from?</li>\n<li>What device they are using?</li>\n<li>What part of the world they are coming from?</li>\n</ul>\n</li>\n<li>Search = ES was built with idea of great search engine</li>\n</ul>\n<h3>Concepts</h3>\n<ul>\n<li>Near Real Time (NRT)</li>\n<li>\n<p>Cluster:</p>\n<ul>\n<li>collection of our nodes</li>\n<li>has a unique name</li>\n</ul>\n</li>\n<li>\n<p>Node:</p>\n<ul>\n<li>part of the cluster to store the data</li>\n<li>has a unique name</li>\n</ul>\n</li>\n<li>\n<p>Index:</p>\n<ul>\n<li>a collection of similar documents</li>\n</ul>\n</li>\n<li>\n<p>Type:</p>\n<ul>\n<li>a category or a partition of your index</li>\n</ul>\n</li>\n<li>\n<p>Document:</p>\n<ul>\n<li>in JSON format</li>\n<li>customer</li>\n<li>event</li>\n</ul>\n</li>\n</ul>\n<h3>Querying</h3>\n<ul>\n<li>\n<p>Simple query:</p>\n<ul>\n<li>get all accounts: GET bank/account/_search</li>\n<li>\n<p>get all accounts in state of CA:</p>\n<pre><code class=\"language-js\">GET bank/account/_search\n{\n\"query\": {\n  \"match\": {\n      \"state\": \"CA\"\n  }\n}\n}\n</code></pre>\n<p>- multiple conditions:</p>\n<pre><code class=\"language-js\">GET bank/account/_search\n{\n\"query\": {\n  \"bool\": {\n      \"state\": \"CA\"\n  }\n}\n}\n</code></pre>\n</li>\n<li>boost: 3 = three times more important than state</li>\n<li><code>_score</code>: How ES identifies the relevance of a document based on your search query</li>\n</ul>\n</li>\n</ul>\n<h3>Bulk loading data into Elasticsearch</h3>\n<p>_bulk: The endpoint for bulk api, this is where we send request to when we want to bulk load data. it expects new-line delimited JSON data (including a new-line at the very end, which is important, otherwise we'll get errors). It allows us to <code>Index</code>, <code>Create</code>, <code>Delete</code>, <code>Update</code>. When using this we need to make sure we are using <code>--data-binary</code> flag from the curl command.</p>\n<ul>\n<li>/_bulk</li>\n<li>new-line JSON</li>\n<li>Index, Create, Delete, Update</li>\n<li>--data-binary</li>\n</ul>\n<h4>How to bulk load data</h4>\n<ul>\n<li>Create a file that has some data in it:</li>\n</ul>\n<pre><code class=\"language-js\">{ \"index\" : { \"_index\" : \"indexName\", \"_type\" : \"typeName\", \"_id\": \"1\" }}\n{\"title\":\"Web Developer II\",\"author\":\"Chrysler Clerk\",\"content\":\"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Proin risus. Praesent lectus.\",\"publishedDate\":\"2018-02-03T17:51:14Z\"}\n</code></pre>\n<ul>\n<li>Load the data into Elasticsearch using curl:</li>\n</ul>\n<pre><code class=\"language-js\">curl -s -H \"Content-Type: application/x-ndjson\" -XPOST localhost:9200/_bulk --data-binary \"@reqs\"; echo\n</code></pre>","excerpt":"Wikipedia: Elasticsearch is a search engine based on the Lucene library. It provides a distributed, multitenant-capable full-text search…"}},{"node":{"frontmatter":{"title":"GraphQL","date":"October 28th, 2018","slug":"/posts/graphql/"},"html":"<p>Recently I have been working on a node stack project as a full stack JavaScript developer, it's a great experience because I'm working with talented developers. We use TypeScript on both backend and frontend which is great because I'm coming from a .NET background and couldn’t be happier; Well we have types for our JS code :) But sometimes TypeScript drives me crazy for example when working with existing React libraries there are no type declarations and a lot of TypeScript’s benefits disappear so we have to write our own <code>.d.ts</code> file but it is worth it :) On the backend we use GraphQL for our APIs, so in this post, I explain my observation about this technology.</p>\n<h3>What's GraphQL?</h3>\n<img class=\"center-image\" src=\"/media/graphql.jpg\" alt=\"GraphQL\" width=\"700\">\n<p>GraphQL is a query language for any kind of API and can fulfil any queries across multiple databases. The main benefit of using it is that you can ask for exactly what you want and you will get the result and nothing else. In this case, clients describe what they want their data and shape of it. The good point is that requests are validated against so-called <code>Schema</code>, we create this schema on our server, it basically describes the functionality available to our clients, inside this schema, we define our type definitions:</p>\n<pre><code class=\"language-js\">type User {\n    id: ID!\n    firstName: String\n    lastName: String\n    age: Int\n}\n\ntype Query {\n    users: [User]\n}\n</code></pre>\n<p>In the schema, we need a top-level type called <code>Query</code>. The server defines the queries it can accept. So, in this case, we're saying we need to return a list of users, the result is an array of type User.</p>\n<h3>Resolvers</h3>\n<p>Now we need a <code>Resolver</code> to figure out what we get back when we call <code>users</code> query. Resolvers are basically some functions that respond to queries and mutations, they are the functions that give us the results from a query.</p>\n<pre><code class=\"language-js\">const root = {\n  users: () => {\n    return [\n      { id: 1, firstName: \"Sirwan\", lastName: \"Afifi\", age: 29 },\n      { id: 2, firstName: \"User 2\", lastName: \"lastName2\", age: 20 },\n      { id: 3, firstName: \"User 3\", lastName: \"lastName3\", age: 20 },\n      { id: 4, firstName: \"User 4\", lastName: \"lastName4\", age: 20 },\n      { id: 5, firstName: \"User 5\", lastName: \"lastName5\", age: 20 },\n      { id: 6, firstName: \"User 6\", lastName: \"lastName6\", age: 20 },\n      { id: 7, firstName: \"User 7\", lastName: \"lastName7\", age: 20 },\n      { id: 8, firstName: \"User 8\", lastName: \"lastName8\", age: 20 }\n    ];\n  }\n};\n</code></pre>\n<p>Now we can query the <code>users</code> to get the result, the query gets parsed and executed against a data source on the server and the server sends back the result as JSON:</p>\n<img class=\"center-image\" src=\"/media/graphiQL.png\" alt=\"GraphiQL\" width=\"700\">\n<p>As you can see we have intellisense for our API. In fact, GraphQL is more like TypeScript for our API, by using it we have awesome static type analyze. In traditional REST we had many requests but with GraphQL we only have one single endpoint.</p>\n<h3>Mutation types</h3>\n<p>The query type is responsible for defining what will return when we call the query. With mutation type, we can mutate (change, create) data.</p>\n<pre><code class=\"language-js\">input UserInput {\n    id: ID!\n    firstName: String\n    lastName: String\n    age: Int\n}\n\ntype Mutation {\n    createUser(input: UserInput): User\n}\n</code></pre>\n<p>The great point about a mutation is that we mutate something and we also ask for something in the result, that's why we can specify a return type for a mutation, in this case, it's <code>User</code>:</p>\n<img class=\"center-image\" src=\"/media/graphQL-mutation.png\" alt=\"GraphiQL\" width=\"700\">\n<p>GraphQL is a convenient way for a client to communicate with the server, There is much more to talk about this technology so I will pick up again in my next article.</p>","excerpt":"Recently I have been working on a node stack project as a full stack JavaScript developer, it's a great experience because I'm working with…"}},{"node":{"frontmatter":{"title":"React Hooks","date":"October 27th, 2018","slug":"/posts/react-hooks/"},"html":"<p>Hooks are a new feature that is coming up in React v16.7.0-alpha, it's a really great feature, I am so excited about this new feature. The goal is to use all functionalities you can do in class components in functional style components, We heavily use functional components in our project so in order to use things like State we have two options: re-writing our component in a class component or simply use a great package called <code>react-powerplug</code>:</p>\n<pre><code class=\"language-typescript\">import * as React from \"react\";\nimport { State } from \"react-powerplug\";\n\nconst Example = () => {\n  return (\n    &#x3C;State\n      initial={{\n        count: 0\n      }}\n    >\n      {({ state, setState }) => (\n        &#x3C;div>\n          &#x3C;p>You clicked {state.count} times&#x3C;/p>\n          &#x3C;button onClick={() => setState({ count: state.count + 1 })}>\n            Click me\n          &#x3C;/button>\n        &#x3C;/div>\n      )}\n    &#x3C;/State>\n  );\n};\n\nexport { Example };\n</code></pre>\n<p>This is really great, but we don't need to have this anymore because one of the feature of Hooks in the new version of React is using state inside a functional component, so we'd some something like this to get the same result:</p>\n<pre><code class=\"language-typescript\">import { useState } from \"react\";\nimport * as React from \"react\";\n\nexport interface ReactHookProps {}\n\nconst ReactHook = (props: ReactHookProps) => {\n  const [count, setCount] = useState(0);\n\n  return (\n    &#x3C;div>\n      &#x3C;h1>Hello From ReactHook Component&#x3C;/h1>\n      &#x3C;p>You clicked {count} times&#x3C;/p>\n      &#x3C;button onClick={() => setCount(count + 1)}>Click me&#x3C;/button>\n    &#x3C;/div>\n  );\n};\n\nexport { ReactHook };\n</code></pre>\n<p>As you can see, by calling <code>useState</code> and passing a default value, it gives you two property one for <code>get</code> and the other for <code>set</code>. The interesting point about <code>useState</code> is that we can have multiple states inside the component:</p>\n<pre><code class=\"language-typescript\">const [person, setPerson] = useState({\n  firstName: \"Sirwan\",\n  lastName: \"Afifi\",\n  age: 29\n});\n</code></pre>\n<p>Working with state is just one of <code>Hooks</code> functionalities, I will try to blog about the other features too.</p>\n<p>You can grab the working sample project from <a href=\"https://github.com/SirwanAfifi/react-hooks.git\">GitHub</a>.</p>\n<p>Happy coding :)</p>","excerpt":"Hooks are a new feature that is coming up in React v16.7.0-alpha, it's a really great feature, I am so excited about this new feature. The…"}},{"node":{"frontmatter":{"title":"Shahriban - My first Hackathon project (Challenges, Lessons Learned)","date":"June 25th, 2018","slug":"/posts/shahriban/"},"html":"<img class=\"center-image\" src=\"/media/poster-hackathon.jpg\" alt=\"Hackathon Event\" width=\"700\">\n<blockquote>\n<p>Image courtesy of <a href=\"http://www.liveh2h.com/media/liveh2h-announces-global-collaboration-hackathon-developer-event/\">LiveH2H</a></p>\n</blockquote>\n<p>As you probably know, Hackathon is an event that programmers, designers, entrepreneurs to get together for a short period of time to collaborate on a project. The cool part of this event is delivering tasks rapidly, In fact, it's more like a Marathon for programmers. I have never participated in a hackathon before but I always wanted to give it a try because it is something I have been wanting to do for a long time. Several weeks ago I had the opportunity to participate in such event with my friends <a href=\"https://sohailabbasi.com/\">Sohail</a> and <a href=\"http://chirokydil.blogfa.com/\">Arash</a> from <a href=\"http://www.kurdsoftware.com/\">Kurdsoftware</a> group. By the way, the event was not supposed to be like a competitive sort of events, We just wanted to do something. In this blog post, I am going to share challenges we faced over the course of the event.</p>\n<h3>Challenge #1</h3>\n<p>The first challenge for us was picking a project to implement so we decided to brainstorm as many ideas as possible then we tried to write them down. At this point, we had a big picture of all potential ideas. At the end of the day we ended up to an interesting one, <a href=\"https://shahriban.com/\">Shahriban</a>; the idea was to implement a platform for reporting local issues in a city. it's more like a collaborative culture, something a citizen should do but does not have to do, to make their community better. Our goal was to encourage citizens across our city to be involved in process of improving the city. You can read more about Shahriban here(<a href=\"https://sohailabbasi.com/shahriban-social-capital-iran/\">English</a>, <a href=\"http://foad-ansari.ir/%d8%b4%d9%87%d8%b1%db%8c-%d8%a8%d8%a7%d9%86-%d9%86%da%af%d9%87%d8%a8%d8%a7%d9%86-%d8%b4%d9%87%d8%b1/\">Persian</a>, <a href=\"http://chirokydil.blogfa.com/post/71\">Kurdish</a>):</p>\n<img class=\"center-image\" src=\"/media/shahriban_homepage.png\" alt=\"Shahriban\" width=\"700\">\n<h3>Challenge #2</h3>\n<p>The next challenge after choosing the project was the technical side of it, Since we have different types of skills, we were not sure what language/platform to use to implement the project. we decided to keep it simple and follow <a href=\"https://en.wikipedia.org/wiki/KISS_principle\">KISS principle</a> and use something like Wordpress but the problem is that customizing Wordpress takes time and it's not simple as it sounds. So at the end, we decided to implement it from scratch so we picked PHP for the backend and Vue.js for the frontend. Sohail and Arash worked on the backend and used <a href=\"https://github.com/mevdschee/php-crud-api\">php-crud-api</a>; a single file PHP script that adds a REST API to a SQL database, So at this point we had a fully fledged RESTful API and the process went very smoothly, we had everything at our disposal quickly. On the frontend, I picked Vue.js because getting up and running with Vue.js is really simple. So I used Vue CLI to generate the project. Over the course of 2 hours we had everything in place:</p>\n<img class=\"center-image\" src=\"/media/shahriban_vue_project.png\" alt=\"Shahriban\" width=\"700\">\n<h3>Challenge #3</h3>\n<p>The last challenge was to implement an app, Since Telegram is the most popular instant messaging app in Iran, we decided to develop a bot to do the job for us. This was really great because we didn't have to implement an app for Android, iOS:</p>\n<img class=\"center-image\" src=\"/media/shahriban_screenshots.png\" alt=\"Shahriban\" width=\"700\">\n<p>By the way, there are some restrictions to access Telegram in Iran, Perhaps we should have developed a native app for both Android and iOS. But the problem is that at the time this was not possible for us because we didn't have an app developer in our team, I have developed some native Android apps in the past but my main focus these days is on the web so I wasn't able to do that. If you want to contribute and are interested in, or you know someone who is interested in please let us know.</p>\n<h3>Conclusion</h3>\n<p>The whole experience was really great, we learned a lot in the process and feel a lot more confident and prepared for future events. Also in addition to the experience, I think this is a best opportunity to have a little bit impact in our community.</p>","excerpt":"Image courtesy of LiveH2H As you probably know, Hackathon is an event that programmers, designers, entrepreneurs to get together for a short…"}},{"node":{"frontmatter":{"title":"Uploading file in Vue.js","date":"June 4th, 2018","slug":"/posts/uploading-file-in-vue.js/"},"html":"<p>In this blog post I am going to show you how you can upload file using Vue.js. On the backend we will use ASP.NET Core MVC to expose an endpoint to the client to receive file. Let's say we have a HTML form for saving a coffee, this form contains a file input to accept coffee's image:</p>\n<img src=\"/media/vue-upload-file.png\" alt=\"Vue Upload File\" width=\"750\">\n<p>To allow the user to pick a file we need to have a reference to the file input field using <code>ref</code> attribute then we can easily access this input using <code>$refs</code> object inside our Vue instance this is like selecting an element using jQuery:</p>\n<pre><code class=\"language-html\">&#x3C;input required type=\"file\" ref=\"image\" />\n</code></pre>\n<p>As you can see we named this input <code>image</code> so we can access the element this way:</p>\n<pre><code class=\"language-js\">this.\\$refs.image\n</code></pre>\n<p>Before we can submit the form we can encapsulate functionality inside a service:</p>\n<pre><code class=\"language-js\">import axios from \"axios\";\n\nclass CoffeeService {\n  saveCoffee(coffee: any, file: any): any {\n    const formData = new FormData();\n    for (const key in coffee) {\n      if (coffee.hasOwnProperty(key)) {\n        formData.append(key, coffee[key]);\n      }\n    }\n    formData.append(file.name, file);\n\n    return axios.post(\"/Coffees/SaveCoffee\", formData);\n  }\n}\n\n// Export a singletone instance in the global namespace\nexport const coffeeService = new CoffeeService();\n</code></pre>\n<p>This service has a method called <code>saveCoffee</code> which accepts two parameters one is the coffee itself and the second one is uploaded file then we are using <code>FormData</code> to combine these data together and sending it to the server using <code>axios</code> library. Keep in mind, this method returns a promise which means that the caller can use <code>then</code> syntax to get server's response. So inside the <code>CoffeeComponent</code> we can use <code>Coffeeservice</code> like this:</p>\n<pre><code class=\"language-html\">&#x3C;template>\n  &#x3C;div class=\"container\">\n    &#x3C;h3>Add a new Coffee&#x3C;/h3>\n    &#x3C;form v-on:submit.prevent=\"submitted\">\n      &#x3C;div class=\"form-group\">\n        &#x3C;label class=\"control-label\">Coffee Name&#x3C;/label>\n        &#x3C;input\n          required\n          type=\"text\"\n          class=\"form-control\"\n          name=\"Name\"\n          v-model=\"model.name\"\n        />\n      &#x3C;/div>\n\n      &#x3C;div class=\"form-group\">\n        &#x3C;label class=\"control-label\">Coffee Type&#x3C;/label>\n        &#x3C;select\n          class=\"form-control\"\n          name=\"CoffeeType\"\n          v-model=\"model.coffeeType\"\n        >\n          &#x3C;option\n            v-for=\"coffeeType in coffeeTypes\"\n            :value=\"coffeeType.value\"\n            v-bind:key=\"coffeeType.value\"\n            >{{ coffeeType.name }}&#x3C;/option\n          >\n        &#x3C;/select>\n      &#x3C;/div>\n\n      &#x3C;div class=\"form-group\">\n        &#x3C;label class=\"control-label\">Coffee Image&#x3C;/label>\n        &#x3C;input\n          required\n          type=\"file\"\n          multiple\n          class=\"form-control\"\n          name=\"Image\"\n          @change=\"fileChange\"\n          ref=\"image\"\n        />\n      &#x3C;/div>\n\n      &#x3C;button class=\"btn btn-primary\" type=\"submit\">Save&#x3C;/button>\n    &#x3C;/form>\n  &#x3C;/div>\n&#x3C;/template>\n\n&#x3C;script lang=\"ts\">\n  import Vue from \"vue\";\n  import { Component, Prop, Watch } from \"vue-property-decorator\";\n  import { coffeeService } from \"../services/CoffeeService\";\n  /// &#x3C;reference path=\"./toaster.d.ts\" />\n\n  @Component({\n    components: { UploadFileSimpleComponent }\n  })\n  export default class UploadFileSimpleComponent extends Vue {\n    coffeeTypes = [\n      { name: \"Espresso\", value: 0 },\n      { name: \"Latte\", value: 1 },\n      { name: \"Mocha\", value: 2 }\n    ];\n\n    model = {};\n\n    submitted() {\n      coffeeService\n        .saveCoffee(this.model, (&#x3C;any>this.$refs.image).files)\n        .then(function(response: any) {\n          toastr.success(response.data);\n        })\n        .catch(function(error: any) {\n          toastr.error(error);\n        });\n    }\n  }\n&#x3C;/script>\n</code></pre>\n<h3>Showing upload progress</h3>\n<p>Now we want to show upload progress, axios makes this easy all we need to do is add a third argument to the <code>post</code> method, this argument is actually an object, inside this object we can configure the request inside this object we have access to an event handler called <code>onUploadProgress</code> which we can do the calculation. let's change the <code>CoffeeService</code> to this:</p>\n<pre><code class=\"language-js\">import axios from \"axios\";\nimport { eventBus } from \"../main\";\n\nclass CoffeeService {\n  saveCoffee(coffee: any, file: any): any {\n    const formData = new FormData();\n    for (const key in coffee) {\n      if (coffee.hasOwnProperty(key)) {\n        formData.append(key, coffee[key]);\n      }\n    }\n\n    formData.append(file.name, file);\n\n    let startTime = Date.now();\n\n    return axios.post(\"/Coffees/SaveCoffee\", formData, {\n      onUploadProgress: uploadEvent => {\n        const queueProgress = Math.round(\n          (uploadEvent.loaded / uploadEvent.total) * 100\n        );\n        const timeElapsed = Date.now() - startTime;\n        const uploadSpeedFirst = uploadEvent.loaded / (timeElapsed / 1000);\n        const uploadTimeRemaining = Math.ceil(\n          (uploadEvent.total - uploadEvent.loaded) / uploadSpeedFirst\n        );\n        const uploadTimeElapsed = Math.ceil(timeElapsed / 1000);\n        const uploadSpeed = uploadSpeedFirst / 1024 / 1024;\n\n        eventBus.$emit(\"uploadData\", {\n          queueProgress,\n          uploadTimeRemaining,\n          uploadTimeElapsed,\n          uploadSpeed\n        });\n      }\n    });\n  }\n}\n\n// Export a singletone instance in the global namespace\nexport const coffeeService = new CoffeeService();\n</code></pre>\n<p>Inside the method we construct an object, this object will notify all subscribers with current progress. This notification is done using <code>$emit</code> method. We also need to update the template to show this progress:</p>\n<pre><code class=\"language-html\">&#x3C;div v-if=\"uploadDetails.queueProgress > 0\">\n  &#x3C;table class=\"table\">\n    &#x3C;thead>\n      &#x3C;tr>\n        &#x3C;th width=\"15%\">Event&#x3C;/th>\n        &#x3C;th>Status&#x3C;/th>\n      &#x3C;/tr>\n    &#x3C;/thead>\n    &#x3C;tbody>\n      &#x3C;tr>\n        &#x3C;td>&#x3C;strong>Elapsed time&#x3C;/strong>&#x3C;/td>\n        &#x3C;td nowrap>{{uploadDetails.uploadTimeElapsed | number}} second(s)&#x3C;/td>\n      &#x3C;/tr>\n      &#x3C;tr>\n        &#x3C;td>&#x3C;strong>Remaining time&#x3C;/strong>&#x3C;/td>\n        &#x3C;td nowrap>{{uploadDetails.uploadTimeRemaining | number}} second(s)&#x3C;/td>\n      &#x3C;/tr>\n      &#x3C;tr>\n        &#x3C;td>&#x3C;strong>Upload speed&#x3C;/strong>&#x3C;/td>\n        &#x3C;td nowrap>{{uploadDetails.uploadSpeed | number}} MB/s&#x3C;/td>\n      &#x3C;/tr>\n      &#x3C;tr>\n        &#x3C;td>&#x3C;strong>Queue progress&#x3C;/strong>&#x3C;/td>\n        &#x3C;td>\n          &#x3C;div\n            class=\"progress-bar progress-bar-info progress-bar-striped\"\n            role=\"progressbar\"\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            :aria-valuenow=\"uploadDetails.queueProgress\"\n            :style=\"{ 'width': uploadDetails.queueProgress + '%' }\"\n          >\n            {{uploadDetails.queueProgress}}%\n          &#x3C;/div>\n        &#x3C;/td>\n      &#x3C;/tr>\n    &#x3C;/tbody>\n  &#x3C;/table>\n&#x3C;/div>\n</code></pre>\n<p>The backend is a simple MVC controller, all it does is uploading the file and saving the coffee into the database:</p>\n<pre><code class=\"language-csharp\">public async Task&#x3C;IActionResult> SaveCoffee(Coffee coffee)\n{\n// Uploading files\nvar fileName = await UploadFiles();\n\n    // Saving data\n    coffee.Image = fileName;\n    _coffeeService.Add(coffee);\n    _coffeeService.SaveChanges();\n\n    return Json(\"Coffee has been saved!\");\n\n}\n\nprivate async Task&#x3C;string> UploadFiles()\n{\nvar uploadsRootFolder = Path.Combine(\\_environment.WebRootPath, \"uploads\");\nif (!Directory.Exists(uploadsRootFolder))\n{\nDirectory.CreateDirectory(uploadsRootFolder);\n}\n\n    var files = Request.Form.Files;\n    foreach (var file in files)\n\n    {\n        if (file == null || file.Length == 0)\n        {\n            continue;\n        }\n\n        var filePath = Path.Combine(uploadsRootFolder, file.FileName);\n        using (var fileStream = new FileStream(filePath, FileMode.Create))\n        {\n            await file.CopyToAsync(fileStream).ConfigureAwait(false);\n            return file.FileName;\n        }\n    }\n\n    return string.Empty;\n\n}\n</code></pre>\n<img src=\"/media/upload-file-vue.gif\" alt=\"Upload file using Vue.js\" width=\"700\">\n<p>You can grab the working sample project from <a href=\"https://github.com/SirwanAfifi/vue-experiments\">GitHub</a>.</p>","excerpt":"In this blog post I am going to show you how you can upload file using Vue.js. On the backend we will use ASP.NET Core MVC to expose an…"}},{"node":{"frontmatter":{"title":"TypeScript and Vue.js","date":"May 28th, 2018","slug":"/posts/typescript-and-vue.js"},"html":"<img src=\"/media/vuepost.png\" alt=\"Webpack\" width=\"750\">\n<p>You might be wondering why do we need to worry about yet another framework when we already know there are things like Angular, React, ... the answer is simplicity. I have used Angular in some of my previous projects by Angular I mean the first version of it (AngularJS 1.x) but these days I feel like Angular team is going to force developers to migrate to Angular (2, 3, 4, 5, 6, ...). I really like Vue.js, it's really a great one because I think Vue.js is Declarative, Easy to Maintain and Powerful.\nAlso, the integration between Vue and TypeScript is really good. Just like other frameworks Vue also has CLI which helps you to scaffold your project quickly. In this blog post, I would like to show how to combine Vue.js with TypeScript inside an ASP.NET Core 2.x application.</p>\n<h3>Project Setup</h3>\n<p>The easiest way to get started is by using dotnet cli tool to create a project:</p>\n<pre><code class=\"language-bash\">dotnet new mvc --name aspnet-vue-typescript\n</code></pre>\n<p>Then cd to that directory and then use <code>code .</code> to open VSCode. At this point the project structure looks like this:</p>\n<img src=\"/media/dotnet-new.png\" alt=\"Sample app\" width=\"700\">\n<p>To get started with our client side code we need to install some packages, for doing so we need <code>package.json</code> file:</p>\n<pre><code class=\"language-json\">{\n  \"name\": \"aspnet-vue-typescript\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &#x26;&#x26; exit 1\"\n  },\n  \"author\": \"Sirwan Afifi\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"ts-loader\": \"^4.3.0\",\n    \"typescript\": \"^2.8.3\",\n    \"vue\": \"^2.5.16\",\n    \"vue-class-component\": \"^6.2.0\",\n    \"vue-property-decorator\": \"^6.1.0\",\n    \"webpack\": \"^4.9.1\",\n    \"webpack-dev-server\": \"^3.1.4\"\n  },\n  \"devDependencies\": {\n    \"aspnet-webpack\": \"^2.0.3\",\n    \"css-loader\": \"^0.28.11\",\n    \"file-loader\": \"^1.1.11\",\n    \"sass-loader\": \"^7.0.1\",\n    \"style-loader\": \"^0.21.0\",\n    \"vue-loader\": \"^15.2.1\",\n    \"vue-template-compiler\": \"^2.5.16\",\n    \"webpack-cli\": \"^2.1.4\",\n    \"webpack-hot-middleware\": \"^2.22.2\"\n  }\n}\n</code></pre>\n<p>Once you installed this packages using <code>npm install</code>, we'll create our <code>webpack.config.js</code> file:</p>\n<pre><code class=\"language-js\">let webpack = require(\"webpack\");\nconst VueLoaderPlugin = require(\"vue-loader/lib/plugin\");\nlet path = require(\"path\");\n\nmodule.exports = {\n  entry: {\n    main: \"./ClientApp/main\"\n  },\n  output: {\n    path: path.resolve(__dirname, \"wwwroot\", \"js\"),\n    filename: \"[name].js\",\n    publicPath: \"/js/\"\n  },\n  module: {\n    rules: [\n      { test: /\\.vue$/, loader: \"vue-loader\" },\n      {\n        test: /\\.tsx?$/,\n        loader: \"ts-loader\",\n        exclude: /node_modules/,\n        options: { appendTsSuffixTo: [/\\.vue$/] }\n      }\n    ]\n  },\n  resolve: {\n    extensions: [\".tsx\", \".ts\", \".js\"],\n    alias: {\n      vue$: \"vue/dist/vue.esm.js\" // 'vue/dist/vue.common.js' for webpack 1\n    }\n  },\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        commons: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          name: \"main\",\n          chunks: \"all\"\n        }\n      }\n    }\n  },\n  plugins: [new VueLoaderPlugin()]\n};\n</code></pre>\n<p>As you can see we're telling webpack where the entry point is, so create a new directory inside the project called <code>ClientApp</code>, this directory contains all Vue's related files, Inside this directory, create a ts file called <code>main.ts</code> this file is going to be our entry point:</p>\n<pre><code class=\"language-js\">import Vue from \"vue\";\nimport MyComponent from \"./components/MyComponent.vue\";\n\nVue.config.productionTip = false;\n\nconst v = new Vue({\n  el: \"#app\",\n  data() {\n    return {\n      name: \"Sirwan\"\n    };\n  },\n  components: {\n    MyComponent\n  }\n});\n</code></pre>\n<p>Next, we have specified the output which is <code>bundle.js</code> file, this file doesn't yet exist, it's going to be created by webpack. Then we have specified TypeScript loader for webpack. Next thing left to do is adding <code>tsconfig.json</code> file to the project:</p>\n<pre><code class=\"language-js\">{\n    \"compilerOptions\": {\n        \"sourceMap\": true,\n        \"noImplicitReturns\": true,\n        \"noImplicitAny\": true,\n        \"experimentalDecorators\": true,\n        \"emitDecoratorMetadata\": true,\n        \"target\": \"es5\",\n        \"strict\": true,\n        \"module\": \"es2015\",\n        \"moduleResolution\": \"node\",\n        \"lib\": [\n            \"es2016\",\n            \"dom\"\n        ]\n    },\n    \"exclude\": [\n        \"node_modules\",\n        \"wwwroot\"\n    ]\n}\n</code></pre>\n<p>At this point if you run <code>npx webpack</code> you'll see the bundle file:</p>\n<img src=\"/media/npx-webpack.png\" alt=\"Webpack\" width=\"700\">\n<p>Now we can add a script reference inside <code>Views/Shared/_Layout.cshtml</code> to <code>bundle.js</code> file:</p>\n<pre><code class=\"language-html\">&#x3C;script src=\"~/js/bundle.js\" asp-append-version=\"true\">&#x3C;/script>\n</code></pre>\n<p>Now we can use Vue inside our views:</p>\n<pre><code class=\"language-csharp\">@{\n    ViewData[\"Title\"] = \"Home Page\";\n}\n\n&#x3C;div class=\"jumbotron\">\n  &#x3C;h1 class=\"display-4\">Hello, {{ name }}&#x3C;/h1>\n&#x3C;/div>\n</code></pre>\n<h3>Hot Module Replacement</h3>\n<p>Webpack has something called Hot <a href=\"https://webpack.js.org/concepts/hot-module-replacement/\">Module Replacement</a>:</p>\n<blockquote>\n<p>Hot Module Replacement (HMR) exchanges, adds, or removes modules while an application is running, without a full reload. This can significantly speed up development in a few ways:\nRetain application state which is lost during a full reload.\nSave valuable development time by only updating what's changed.\nTweak styling faster -- almost comparable to changing styles in the browser's debugger.</p>\n</blockquote>\n<p>For adding this functionality we need to install <code>webpack-hot-middleware</code> package:</p>\n<pre><code class=\"language-bash\">npm i -D webpack-hot-middleware\n</code></pre>\n<p>Then we need to register this component into MVC's HTTP request pipeline in the <code>Configure</code> method, for doing this we need to install <a href=\"https://www.nuget.org/packages/Microsoft.AspNetCore.SpaServices\">Microsoft.AspNetCore.SpaServices</a>:</p>\n<pre><code class=\"language-csharp\">app.UseWebpackDevMiddleware(new WebpackDevMiddlewareOptions\n{\n    HotModuleReplacement = true\n});\n</code></pre>\n<p>This middleware looks for webpack file and automatically executes it for us when we change client side code:</p>\n<img src=\"/media/reload-webpack.gif\" alt=\"Webpack\" width=\"700\">","excerpt":"You might be wondering why do we need to worry about yet another framework when we already know there are things like Angular, React…"}},{"node":{"frontmatter":{"title":"Developing Console-based UI in C#","date":"May 2nd, 2018","slug":"/posts/developing-console-based-ui-in-c"},"html":"<p>As you know Console Applications don't have graphical user interface or GUI. Instead, they run from Command Line, for example instead of writing a name into a textbox and clicking a button we would instead invoke the Console Application and provide the name as a parameter. In fact, in Console Applications we instead interact with the user using text inputs. For example, we could prompt something like this:</p>\n<img src=\"/media/consoleTest.jpg\" width=\"700\">\n<p>The user can then write a name and hit enter then we can read that text input into our application.</p>\n<p>Wouldn't be better to make it beautiful? This is where we can use <a href=\"https://github.com/migueldeicaza/gui.cs\">Terminal.Gui</a> a cross-platform GUI toolkit:</p>\n<img src=\"/media/guics.png\" alt=\"Sample app\" width=\"700\">\n<blockquote>\n<p>Terminal.Gui is a library intended to create console-based applications using C#. The framework has been designed to make it easy to write applications that will work on monochrome terminals, as well as modern color terminals with mouse support. This library works across Windows, Linux and MacOS.</p>\n</blockquote>\n<p>Using this UI toolkit is pretty simple, all you need to do is adding its package into your project:</p>\n<pre><code>dotnet add package Terminal.Gui\n</code></pre>\n<p>The simplest application looks like this:</p>\n<pre><code class=\"language-csharp\">using System;\n\nnamespace consoleTest\n{\n    using Terminal.Gui;\n\n    class Demo {\n        static int Main ()\n        {\n            Application.Init ();\n\n            var n = MessageBox.Query (50, 7,\n                \"Question\", \"Do you like console apps?\", \"Yes\", \"No\");\n\n            return n;\n        }\n    }\n}\n</code></pre>\n<p>This example shows a prompt and returns an integer value depending on which value was selected by the user (Yes, No, or if they use chose not to make a decision and instead pressed the ESC key):</p>\n<img src=\"/media/firstTerminalUIapp.png\" alt=\"Sample app\" width=\"700\">\n<p>As you can see the first thing to do is calling <code>Application.Init ();</code> to actually initialize the application. We can also create a window and then add a menu to it:</p>\n<pre><code class=\"language-csharp\">Application.Init ();\nvar top = Application.Top;\n\n// Creates the top-level window to show\nvar win = new Window (new Rect (0, 1, top.Frame.Width, top.Frame.Height-1), \"MyApp\");\ntop.Add (win);\n\n// Creates a menubar, the item \"New\" has a help menu.\nvar menu = new MenuBar (new MenuBarItem [] {\n    new MenuBarItem (\"_File\", new MenuItem [] {\n        new MenuItem (\"_New\", \"Creates new file\", ()=> {}),\n        new MenuItem (\"_Close\", \"\", () => {}),\n        new MenuItem (\"_Quit\", \"\", () => { top.Running = false; })\n    }),\n    new MenuBarItem (\"_Edit\", new MenuItem [] {\n        new MenuItem (\"_Copy\", \"\", null),\n        new MenuItem (\"C_ut\", \"\", null),\n        new MenuItem (\"_Paste\", \"\", null)\n    })\n});\ntop.Add (menu);\n\n// Add some controls\nwin.Add (\n    new Label (3, 2, \"Login: \"),\n    new TextField (14, 2, 40, \"\"),\n    new Label (3, 4, \"Password: \"),\n    new TextField (14, 4, 40, \"\") {  },\n    new CheckBox (3, 6, \"Remember me\"),\n    new RadioGroup (3, 8, new [] { \"_Personal\", \"_Company\" }),\n    new Button (3, 14, \"Ok\"),\n    new Button (10, 14, \"Cancel\"),\n    new Label (3, 18, \"Press ESC and 9 to activate the menubar\"));\n\nApplication.Run ();\n</code></pre>\n<img src=\"/media/sampleTerminalUI.png\" alt=\"Sample app\" width=\"700\">\n<p>You can build even complex console-based UI using this toolkit:</p>\n<pre><code class=\"language-csharp\">using System;\nusing System.Linq;\nusing NStack;\nusing Terminal.Gui;\nusing TestingGuiCS.Models;\n\nnamespace TestingGuiCS\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Application.Init ();\n            var top = Application.Top;\n\n            // Creates a menubar, the item \"New\" has a help menu.\n            var menu = new MenuBar (new MenuBarItem [] {\n                new MenuBarItem (\"_File\", new MenuItem [] {\n                    new MenuItem (\"_Quit\", \"\", () => { top.Running = false; })\n                })\n            });\n            top.Add (menu);\n\n\n            // Creates the top-level window to show\n            var win = new Window (new Rect (0, 1, top.Frame.Width, top.Frame.Height-1), \"Movie Db\");\n            top.Add (win);\n\n            // Add some controls\n            var txtSearchLbl = new Label(3, 1, \"Movie Name: \");\n            var txtSearch = new TextField(15, 1, 30, \"\");\n            var forKidsOnly = new CheckBox(3, 3, \"For Kids?\");\n            var minimumRatingLbl = new Label(25, 3, \"Minimum Rating: \");\n            var minimumRatingTxt = new TextField(41, 3, 10, \"\");\n            var searchBtn = new Button(3, 5, \"Filter\");\n            var allMoviesListView = new ListView(new Rect(4, 8, top.Frame.Width, 200), MovieDataSource.GetList(forKidsOnly.Checked, 0).ToList());\n            searchBtn.Clicked = () =>\n            {\n\n                double rating = 0;\n                var isDouble = double.TryParse(minimumRatingTxt.Text.ToString(), out rating);\n                if(!string.IsNullOrEmpty(minimumRatingTxt.Text.ToString()) &#x26;&#x26; !isDouble)\n                {\n                    MessageBox.ErrorQuery(30, 6, \"Error\", \"Rating must be number\");\n                    minimumRatingTxt.Text = ustring.Empty;\n                    return;\n                }\n\n                win.Remove(allMoviesListView);\n                if (string.IsNullOrEmpty(txtSearch.Text.ToString()) || string.IsNullOrEmpty(minimumRatingTxt.Text.ToString()))\n                {\n                    allMoviesListView = new ListView(new Rect(4, 8, top.Frame.Width, 200),\n                        MovieDataSource.GetList(forKidsOnly.Checked, rating).ToList());\n                    win.Add(allMoviesListView);\n                }\n                else\n                {\n                    win.Remove(allMoviesListView);\n                    win.Add(new ListView(new Rect(4, 8, top.Frame.Width, 200),\n                        MovieDataSource.GetList(forKidsOnly.Checked, rating)\n                            .Where(x =>\n                            x.Name.Contains(txtSearch.Text.ToString(), StringComparison.OrdinalIgnoreCase)\n                        ).ToList()));\n                }\n\n            };\n            win.Add (\n                txtSearchLbl,\n                txtSearch,\n                forKidsOnly,\n                minimumRatingLbl,\n                minimumRatingTxt,\n                searchBtn,\n                new Label (3, 7, \"-------------Search Result--------------\")\n            );\n\n            Application.Run ();\n        }\n    }\n}\n</code></pre>\n<img src=\"/media/terminalUI.gif\" alt=\"Sample app\" width=\"700\">\n<p>You can grab the working sample project from <a href=\"https://github.com/SirwanAfifi/Console-based-UI\">GitHub</a>.</p>\n<h3>What about cross platform UI frameworks?</h3>\n<p>Developing cross platform UIs is not officially supported by Microsoft, But there are some open source projects out there for doing so:</p>\n<ul>\n<li><a href=\"https://github.com/AvaloniaUI/Avalonia\">Avalonia</a></li>\n<li><a href=\"https://github.com/picoe/Eto\">Eto.Forms</a></li>\n</ul>","excerpt":"As you know Console Applications don't have graphical user interface or GUI. Instead, they run from Command Line, for example instead of…"}},{"node":{"frontmatter":{"title":"Does making decision matter?","date":"April 27th, 2018","slug":"/posts/does-making-decision-matter"},"html":"<img src=\"/media/decision.jpg\" width=\"500\">\n*Photo by Felix Russell-Saw on Unsplash*\n<p>We make decision all the time, most of these decisions are done unconsciously, others we agonize over, we all have been there agonizing over a difficult or big decision, we always worry about what to do next, in fact we are trying to make the right decision, But in my opinion there’s no such thing as the right thing or the wrong thing, it’s been a big deal for me because making decisions (big and little ones) have been challenging in my life.</p>\n<p>Last Friday I was talking with a friend (<a href=\"http://foad-ansari.ir/\">Foad</a>) about making decisions, he told me about something called Decidophobia or simply fear of making decisions.</p>\n<p>Life is full of options and choices so don’t waste your time to worry about right and wrong decisions JUST take action it’s worth it.</p>","excerpt":"We make decision all the time, most of these decisions are done unconsciously, others we agonize over, we all have been there agonizing over…"}},{"node":{"frontmatter":{"title":"Running PowerShell on macOS","date":"June 6th, 2017","slug":"/posts/powershell-on-macOS"},"html":"<p>It's been a while I have been using macOS as my primary operating system, you can read about my expreince <a href=\"http://sirwan.info/archive/2017/06/04/SQL-Server-on-Linux-in-Docker-on-a-Mac/\">here</a>.</p>\n<p>Today I wanted to run a PowerShell script, I searched around and figured out Microsoft has made PowerShell <a href=\"https://github.com/PowerShell/PowerShell\">open source</a> open source and the good news is that PowerShell is now cross-platform! this means that you can also run PowerShell scripts on Linux, macOS.</p>\n<p>Actually to get PowerShell to work all you need to do is installing it using Homebrew:</p>\n<pre><code class=\"language-js\">brew cask install powershell\n</code></pre>\n<p><em>Before preceding, make sure you have already installed <a href=\"https://caskroom.github.io/\">Homebrew-Cask</a> on your machine.</em></p>\n<blockquote>\n<p>Homebrew-Cask extends Homebrew and brings its elegance, simplicity, and speed to macOS applications and large binaries alike.\nIt only takes 1 line in your shell to reach 3759 Casks maintained by 4856 contributors.</p>\n</blockquote>\n<img width=\"900\" src=\"/media/powershell_installation_on_mac.png\">\n<p>That's it, now <code>PowerShell</code> is installed, so you can use it in your terminal:\n<img width=\"900\" src=\"/media/powershell_foreach.png\"></p>\n<p>There's also a great <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.PowerShell\">VSCode extension</a> to write, debug PowerShell scripts:\n<img width=\"900\" src=\"/media/powershell_debugging_on_vscode.png\"></p>","excerpt":"It's been a while I have been using macOS as my primary operating system, you can read about my expreince here. Today I wanted to run a…"}},{"node":{"frontmatter":{"title":"SQL Server on Linux in Docker on a Mac","date":"June 4th, 2017","slug":"/posts/sql-server-on-linux-in-docker-on-a-mac"},"html":"<p>Over the last few months, I have been working on a couple of ASP.NET Core projects, it's been great experience so far becuase I can easily work on <a href=\"http://sirwan.info/My-first-experiences-with-Linux\">different platforms</a> while working on these projects. I recently bought a MacBook Pro and have decided to do .NET projects on macOS since then.</p>\n<p>Fortunately working with projects is not a pain in the neck anymore, with help of <a href=\"https://www.docker.com/what-docker\">Docker</a> you can easily setup up a complex development environment in minutes. It actually simplifies the process of building and shipping, running your apps on differente environments.</p>\n<p>The first challenge I faced when using macOS was connecting to and using SQL Server. Thanks to Docker and SQL Server for Linux. It's an instance of SQL Server as a docker container and it's super-fast so that it runs in seconds.</p>\n<img src=\"/media/docker.png\">\n<hr>\n<h2>Installing Docker for Mac</h2>\n<p>In order to get Docker to work you will need to install Docker for Mac, you can follow <a href=\"https://docs.docker.com/docker-for-mac\">these steps</a> to install it. Once Docker installation is done, it will automatically be started:\n<br /></p>\n<img width=\"400\" src=\"/media/docker-running.png\">\n<p>You can also run <code>docker --version</code> to verify that Docker is working as expected.</p>\n<hr>\n<h2>Pulling and running Docker image</h2>\n<p>Next, you can install and run SQL <a href=\"https://hub.docker.com/r/microsoft/mssql-server-linux\">Server on Linux docker image</a> using following command:</p>\n<pre><code class=\"language-shell\">docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=Passowrd’ -p 1433:1433 -d microsoft/mssql-server-linux\n</code></pre>\n<p>This command will install and run the SQL Server image. Now SQL Server is running locally in Docker container:</p>\n<img width=\"800\" src=\"/media/sql-server-is-running.png\">\n<p>You can use its connection string in your ASP.NET Core application:</p>\n<pre><code class=\"language-csharp\">public class MvcMovieContext : DbContext\n{\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        optionsBuilder.UseSqlServer(@\"Data Source=localhost;Initial Catalog=MovieDB;User ID=sa;Password=StrongPassword\");\n    }\n\n    public DbSet&#x3C;Movie> Movies { get; set; }\n}\n</code></pre>\n<p>Now if we run migration, the <code>MovieDB</code> database will be created in the running docker container:</p>\n<pre><code class=\"language-shell\">dotnet ef database update\n</code></pre>\n<h2>Connecting and quering the databse</h2>\n<p>There are several ways to connect and query a database running in Docker container, one way is using a command line tool called <code>sqlcmd</code>:</p>\n<img width=\"800\" src=\"/media/sqlcmd.png\">\n<p>Personally I use <code>mssql</code> extension for Visual Studio Code. becuase it's really easy to use so you don't have to write your queries in command line mode. If you have not already installed this extension, all you need to do is press <code>⌘ + P</code> and type <code>ext install mssql</code> then press enter to install it.</p>\n<p>In order to connect and query your database first, you need to write your SQL queries into a <code>SQL</code> file in VS Code then press <code>⌘ + Shift + P</code> then choose <code>Create Connection Profile</code>, follow the prompts to specify the connection properties for the new connection profile. At the end you should have following settings:</p>\n<pre><code class=\"language-json\">{\n  \"mssql.connections\": [\n    {\n      \"authenticationType\": \"SqlLogin\",\n      \"server\": \"localhost\",\n      \"database\": \"MovieDB\",\n      \"user\": \"SA\",\n      \"password\": \"\",\n      \"savePassword\": true,\n      \"profileName\": \"MovieDB\"\n    }\n  ]\n}\n</code></pre>\n<p>As you can see <code>mssql.connections</code> takes an array, it means that you can define as many connection profiles as you want. Once you defined your profile, you can use it to execute your queries then the result will be shown as a seperate window:</p>\n<img width=\"800\" src=\"/media/query_result_mssql.png\">\n<p>As you can see working with SQL Server on macOS is really straightforward. Something like this was not possible in .NET before but nowadays you can develope .NET applications on OS of your choice. that's why I’m more excited about .NET more than ever.</p>","excerpt":"Over the last few months, I have been working on a couple of ASP.NET Core projects, it's been great experience so far becuase I can easily…"}},{"node":{"frontmatter":{"title":"Working remotely","date":"May 3rd, 2017","slug":"/posts/working-remotely"},"html":"<p>It has been 8 months and so that I have been working remotely for a startup out there. It's been my pleasure to work with a team of great and talented members. over the past few months, I have learned a lot both in terms of technical stuff and working as a team member.</p>\n<p>For some, this might not seem a big deal. But for me, it's a pretty big one. So I thought it would be great to share my experiences so far.</p>\n<h3>New technology, new tools</h3>\n<p>For this project we are using .NET core and ASP.NET MVC core on top of it. The main benefit of using cutting edge technologies is that you always keep yourself updated, but you might argue that working with new and shiny things is overwhelming because the product is not mature enough to work with. But I believe that's also another great benefit because when you encounter a bug you easily open a GitHub issue and report it. So I think it's best of both worlds.</p>\n<h3>Estimation</h3>\n<p>At first, I couldn't deal with an accurate estimation, after a while I figured out that the problem was the task itself, not me, if a task is a big one then estimation most likely will be accurate, so the solution of having an accurate estimation is to break the task into smaller ones.</p>\n<h3>Documentation</h3>\n<p>A key point to have a good documentation is that, it needs to be updated after the requirement is changed. In our case, there are too many changes in requirements, this makes new team members confused. In my opinion, there must be a section called changelog in the documentation so that it will be really easy to know what was the previous changes at first place. you might say it's better to use <code>git log</code> but I think sometimes you don't need to go through several file changes in git history in order to understand a small change. Another good thing for new members is having mockups. I have been always a big fan of this type development, because as you know a picture worth a thousand words.</p>\n<h3>Working in different time zones</h3>\n<p>From my point of view working in different time zones makes remote working a little bit difficult, suppose you are given a task, now you have some questions and no one is online, so in this case, you have to leave your messages on Slack or Jira in order to get your questions answered. this is really big deal for small teams.</p>\n<h3>Collaboration</h3>\n<p>Another key point in agile development is collaboration. Working in a team is not just about delivering your product as soon as possible in some sprints. the best part of an agile team is having daily/weekly standup with other members. By other members I mean Mobile developers, Backend developers, Database developers, ... I think the standup shouldn't be held separately. As a web developer, I need to know what's going on in other parts of the application, because I think it gives developers a really good big picture.</p>\n<h3>Conclusion</h3>\n<p>All in all, it has been a great journey for me so far. because working remotely not only improves your technical ability but gives you a cultural perspective.</p>","excerpt":"It has been 8 months and so that I have been working remotely for a startup out there. It's been my pleasure to work with a team of great…"}},{"node":{"frontmatter":{"title":"My first experiences with Linux","date":"February 27th, 2017","slug":"/posts/my-first-experiences-with-linux"},"html":"<p>Running Window 98 on my PC was my first experience with Windows. in fact, for the last 11 years or so, Windows has been the dominant operating system that I've been using. So, up until now, I have been an avid fan of Windows.</p>\n<blockquote>\n<p>Disclaimer: I'm not going to say that I'm not interested in Windows anymore, I just want to explain my experience with Ubuntu</p>\n</blockquote>\n<p>Windows just works fine for the most part. But, as a developer, I have always felt something is missing. For solving this problem, Microsoft has tried its best bringing in tools like PowerShell and Bash to Windows. But again, with all these great features and tools, as a developer, you think something is missing.</p>\n<p>Two weeks ago, I decided to give Linux a try, So I chose Ubuntu because it's user-friendly and its community is huge. Actually, my goal was to do some experiments with new version of .NET called .NET Core. The experience was great. First, I created a very simple console application on Windows and deployed it as a <a href=\"https://docs.microsoft.com/en-us/dotnet/articles/core/preview3/deploying/#self-contained-deployments-scd\">SCD (Self-Contained Deployment)</a>:</p>\n<img width=\"800\" src=\"/media/publish.jpg\">\n<p>Then, I copied the publish folder on my USB stick and finally, I could run my .NET Core application without installing the .NET runtime on the target machine:</p>\n<img src=\"/media/run_app.png\">\n<p>As a .NET developer I have been waiting voraciously for such opportunity. So, I think it's the best time to migrate to Linux.</p>\n<p>Actually, I was amazed at the first impression because Linux has everything a developer needs out of the box. Python is already installed on the OS. This is great because there are times you want to write simple scripts, scrap a page or something like that.</p>\n<p>Other cool features of Linux are commands like <a href=\"https://www.gnu.org/software/sed/manual/sed.html\">sed</a> and <a href=\"https://www.gnu.org/software/grep/manual/html_node/index.html\">grep</a>. These tools are great whether you are a developer or a network administrator. for example, suppose that you have following content within a file named <code>test.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"AppName\": \"Simple App\",\n  \"Website\": \"sirwan.info\",\n  \"UseSqlite\": false\n}\n</code></pre>\n<p>Now you want to replace all occurrence of <code>\"UseSqlite\": false,</code> to <code>\"UseSqlite\": true,</code> you can do that simply by typing this command:</p>\n<pre><code class=\"language-js\">cat text.json | sed 's/\"UseSqlite\": false,/\"UseSqlite\": true,/'\n</code></pre>\n<img src=\"/media/sed_command.png\">\n<p>You can definitely do wide varaity of things using these tools, I just wanted to tell you how much I am excited about these cool stuff.</p>\n<h3>Development on Ubuntu</h3>\n<p>The good news is that .NET Core runs on Windows, Mac and Linux. In order to install .NET Core on Ubuntu you just simply need to navigate to <a href=\"https://www.microsoft.com/net/download\">dot.net</a> site and download the appropriate version. after installing .NET Core, it gives you a CLI called <code>dotnet</code> so you can simply create, build and publish your applications using this command, for example:</p>\n<pre><code class=\"language-csharp\">dotnet new\ndotnet restore\ndotnet run\n</code></pre>\n<p>You can also use the editor of your choice for developing .NET Core application, personally I prefer to use <a href=\"http://code.visualstudio.com/\">Visual Studio Code</a> or VSCode for short. because it has all great features you need:</p>\n<img src=\"/media/vscode.png\" width=\"800\">\n<p>VSCode is great, But I think using an IDE like Visual Studio gives you the power you need when are developing applications, Unfortunately, there's no official version of Visual Studio for Linux at this time. I hope Microsoft release it for Linux users The only reason that I can't abandon Windows is the lack of Visual Studio So I have to keep using Windows on my main machine.</p>\n<h3>Conclusion</h3>\n<p>As I mentioned Visual Studio is the only reason to not completely abandon Windows, But I will use Ubuntu for sure. This was my first attempt to use Ubuntu and I am very happy about the experience, I would like to hear your ideas about your journey.</p>\n<p>Happy Coding :))</p>","excerpt":"Running Window 98 on my PC was my first experience with Windows. in fact, for the last 11 years or so, Windows has been the dominant…"}},{"node":{"frontmatter":{"title":"Environments in ASP.NET Core","date":"November 23rd, 2016","slug":"/posts/environments-in-asp.net-core"},"html":"<p>In ASP.NET Core we can have different hosting environments, this is supported by an environment variable called <code>ASPNETCORE_ENVIRONMENT</code>. You can see this value is already set to <code>Development</code>:</p>\n<img src=\"/media/environment.jpg\" width=\"600\">\n<p>This value is active as long as you run your application inside Visual Studio, So when you deploy your application you must change this value. Actually, this value comes from a file called <code>launchSettings.json</code>:</p>\n<pre><code class=\"language-csharp\">{\n  \"iisSettings\": {\n    \"windowsAuthentication\": false,\n    \"anonymousAuthentication\": true,\n    \"iisExpress\": {\n      \"applicationUrl\": \"http://localhost:13880/\",\n      \"sslPort\": 0\n    }\n  },\n  \"profiles\": {\n    \"IIS Express\": {\n      \"commandName\": \"IISExpress\",\n      \"launchBrowser\": true,\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    },\n    \"ProjectName\": {\n      \"commandName\": \"Project\",\n      \"launchBrowser\": true,\n      \"launchUrl\": \"http://localhost:5000\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    }\n  }\n}\n</code></pre>\n<p>You can determine what the environment is by using <code>IHostingEnvironment</code>:</p>\n<pre><code class=\"language-csharp\">public void Configure(IApplicationBuilder app,\n    IHostingEnvironment env, ILoggerFactory loggerFactory)\n{\n    loggerFactory.AddConsole();\n\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n    else\n    {\n        app.UseExceptionHandler(new ExceptionHandlerOptions\n        {\n            ExceptionHandler = context => context.Response.WriteAsync(\"Opps!\")\n        });\n    }\n\n    // other configurations\n}\n</code></pre>\n<p>This object also has a method called <code>IsEnvironment</code> for using custom environment:</p>\n<pre><code class=\"language-csharp\">if (env.IsEnvironment(\"envName\"))\n{\n    // some config\n}\n</code></pre>\n<p>One interesting thing is that the Startup class itself supports different environments, it means that for each environment you can have both <code>Configure</code> and <code>ConfigureServices</code>:</p>\n<pre><code class=\"language-csharp\">public void ConfigureDevelopment(IApplicationBuilder app, .....\npublic void ConfigureServicesDevelopment(IServiceCollection services)\n\npublic void ConfigureStaging(IApplicationBuilder app, .....\npublic void ConfigureServicesStaging(IServiceCollection services)\n\npublic void ConfigureProduction(IApplicationBuilder app, .....\npublic void ConfigureServicesProduction(IServiceCollection services)\n</code></pre>\n<p>Now you might ask how we can set this environment variable, well there are several ways that you can use, this great <a href=\"http://andrewlock.net/how-to-set-the-hosting-environment-in-asp-net-core/\">post</a> explains them in details.</p>","excerpt":"In ASP.NET Core we can have different hosting environments, this is supported by an environment variable called ASPNETCORE_ENVIRONMENT. You…"}},{"node":{"frontmatter":{"title":"Getting to know Singleton pattern in C#","date":"November 8th, 2016","slug":"/posts/getting-to-know-singletone-pattern"},"html":"<p>This pattern helps us to ensure a class has only one instance. The term comes from the <a href=\"https://en.wikipedia.org/wiki/Singleton_(mathematics)\">mathematical concept of a singleton</a>:</p>\n<blockquote>\n<p>In mathematics, a singleton, also known as a unit set,[1] is a set with exactly one element. For example, the set {0} is a singleton.</p>\n</blockquote>\n<p>Eventually we must have a class that only gives us a single instance:</p>\n<pre><code class=\"language-csharp\">var sigleInstance = MySingletonClass.GetInstance();\n</code></pre>\n<p>As you can see the only way to access the instance is by calling a public static method called <code>GetInstance()</code>, the single object instance under consideration is created only for the first time it is requested. suppose the following class:</p>\n<pre><code class=\"language-csharp\">public class MySingletonClass\n{\n    public MySingletonClass()\n    {\n\n    }\n}\n</code></pre>\n<p>Now I want to make this class singleton, So the first step is to ensure that no one can instantiate our class for doing so we must make the constrauctor <code>private</code>:</p>\n<pre><code class=\"language-csharp\">public class MySingletonClass\n{\n    private MySingletonClass()\n    {\n\n    }\n}\n</code></pre>\n<p>Now whenever you want to create a new instance of <code>MySingletonClass</code> using <code>new</code> keyword, Visual Studio gives you this error:</p>\n<img src=\"/media/singleton_error.jpg\" width=\"500\">\n<p>But we can still instantiate it from within the class. So next step is to create a new variable of type <code>MySingletonClass</code> inside the class, this class is going to be the only instance of the class:</p>\n<pre><code class=\"language-csharp\">public class MySingletonClass\n{\n    private static MySingletonClass _instance;\n\n    private MySingletonClass() { }\n}\n</code></pre>\n<p>So we are getting close to implementing the pattern. Now we need a way to get access the single instance. So we need a method like this:</p>\n<pre><code class=\"language-csharp\">public static MySingletonClass GetInstance()\n{\n    if (_instance == null)\n    {\n        _instance = new MySingletonClass();\n    }\n    return _instance;\n}\n</code></pre>\n<p>This method instantiates <code>MySingletonClass</code> if an instance doesn't already exist, otherwise it return the existing instance. To demonstrate the object lifetime we can print value of <code>GetHashCode()</code> fo these objects:</p>\n<pre><code class=\"language-csharp\">var mySingleInstance   = MySingletonClass.GetInstance();\nvar mySingleInstance_2 = MySingletonClass.GetInstance();\nvar mySingleInstance_3 = MySingletonClass.GetInstance();\nvar mySingleInstance_4 = MySingletonClass.GetInstance();\n\nConsole.WriteLine($\"obj1: {mySingleInstance.GetHashCode()}\");\nConsole.WriteLine($\"obj2: {mySingleInstance_2.GetHashCode()} \");\nConsole.WriteLine($\"obj3: {mySingleInstance_3.GetHashCode()} \");\nConsole.WriteLine($\"obj4: {mySingleInstance_4.GetHashCode()} \");\n</code></pre>\n<img src=\"/media/singleton_GetHashCode.jpg\">\n<p>As you can see all of the objects are the same and share the same instance. The problem with this implementation is that, it's not <a href=\"http://csharpindepth.com/Articles/General/Singleton.aspx\">thread-safe</a>; it means that if seperate threads of execution access the <code>_instance</code> at the same time, more that one instance of the <code>MySingletonClass</code> object may be created. One of the solution is by using .NET 4's <code>Lazy&#x3C;T></code> type:</p>\n<pre><code class=\"language-csharp\">public class MySingletonClass\n{\n    private static readonly Lazy&#x3C;MySingletonClass> _instance =\n        new Lazy&#x3C;MySingletonClass>(() => new MySingletonClass());\n\n    private MySingletonClass() { }\n\n    public static MySingletonClass GetInstance()\n    {\n        return _instance.Value;\n    }\n\n}\n</code></pre>","excerpt":"This pattern helps us to ensure a class has only one instance. The term comes from the mathematical concept of a singleton: In mathematics…"}},{"node":{"frontmatter":{"title":"Designing Fluent Interfaces in C#","date":"October 26th, 2016","slug":"/posts/designing-fluent-interfaces-in-c"},"html":"<p>The concept of <a href=\"martinfowler.com/bliki/FluentInterface.html\">Fluent Interface</a> was coined by Martin Fowler to create various objects and wire them up together. This pattern is often used for object configuration and setup. For example in ASP.NET Core applications we have following code for configuring the server:</p>\n<pre><code class=\"language-csharp\">using System;\nusing Microsoft.AspNetCore.Hosting;\n\nnamespace aspnetcoreapp\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var host = new WebHostBuilder()\n                .UseKestrel()\n                .UseStartup&#x3C;Startup>()\n                .Build();\n\n            host.Run();\n        }\n    }\n}\n</code></pre>\n<p>As you can see we can chain methods together easily and the intention is to produce an API that is readable and flows. This pattern is heavily used in programming, Here's an example of using this approach in jQuery:</p>\n<pre><code class=\"language-js\">$(\"#result\")\n  .css(\"background\", \"yellow\")\n  .width(200)\n  .height(200)\n  .text(\"This is the result\");\n</code></pre>\n<p>For C#, there is LINQ:</p>\n<pre><code class=\"language-csharp\">var person = PersonDataSource\n    .Where(p => p.Age > 20)\n    .OrderBy(p => p.Name)\n    .Select(p => new {\n        Name = p.Name,\n        LastName = p.LastName\n});\n</code></pre>\n<p>You might ask how to implement this pattern, well, it is very simple you just need to return <code>this</code> during method call. The <code>Calculator</code> defined below contains three methods. These methods are returing <code>Calculator</code> object using <code>this</code> keyword, which allow to chain the methods:</p>\n<pre><code class=\"language-csharp\">public class Calculator\n{\n    public int Initial { get; private set; }\n    public Calculator(int intial)\n    {\n        Initial = intial;\n    }\n\n    public Calculator Add(int x)\n    {\n        Initial = Initial + x;\n        return this;\n    }\n\n    public Calculator Divide(int x)\n    {\n        Initial = Initial / x;\n        return this;\n    }\n\n    public Calculator Substract(int x)\n    {\n        Initial = Initial - x;\n        return this;\n    }\n}\n</code></pre>\n<p>Now we can use the class this way:</p>\n<pre><code class=\"language-csharp\">var calc = new Calculator(5)\n            .Add(5)\n            .Divide(5)\n            .Substract(2);\n\nSystem.Console.WriteLine(calc.Initial);\n</code></pre>\n<p>As you can see this approach makes our code concise and easier to read.</p>","excerpt":"The concept of Fluent Interface was coined by Martin Fowler to create various objects and wire them up together. This pattern is often used…"}},{"node":{"frontmatter":{"title":"Explicit Interface Implementation","date":"August 12th, 2016","slug":"/posts/explicit-interface-implementation"},"html":"<p>Let's imagine that you have a class with two methods:</p>\n<pre><code class=\"language-csharp\">public class VendingMachine\n{\n    public bool InsertCoin(float amount)\n    {\n        if (amount &#x3C; 500)\n        {\n            return false;\n        }\n        return true;\n    }\n\n    public string Buy()\n    {\n        return \"Buy\";\n    }\n}\n</code></pre>\n<p>Now when we want to create an instance of this class and call one of those methods, it executes as expected:</p>\n<pre><code class=\"language-csharp\">VendingMachine machine = new VendingMachine();\nmachine.InsertCoin(5); // false\nmachine.Buy();         // \"Buy\"\n</code></pre>\n<p>Now suppose that we have an interface called <code>IVendingMachine</code> that has two methods:</p>\n<pre><code class=\"language-csharp\">public interface IVendingMachine\n{\n    bool InsertCoin(float amount);\n    string Buy();\n}\n</code></pre>\n<p>We want our class to implements this interface:</p>\n<pre><code class=\"language-csharp\">public class VendingMachine : IVendingMachine\n{\n    public bool InsertCoin(float amount)\n    {\n        if (amount &#x3C; 500)\n        {\n            return false;\n        }\n        return true;\n    }\n\n    public string Buy()\n    {\n        return \"Buy\";\n    }\n}\n</code></pre>\n<p>Our class satisfied the interface because it has the methods with the same names. So Visual Studio doesn't give you a compiler error. Now let's imagine that we\nalso want to add interface's methods to this class, So, in this case, we must explicitly prefix the methods with <code>IVendingMachine.</code>:</p>\n<pre><code class=\"language-csharp\">public class VendingMachine : IVendingMachine\n{\n    public bool InsertCoin(float amount)\n    {\n        if (amount &#x3C; 500)\n        {\n            return false;\n        }\n        return true;\n    }\n\n    bool IVendingMachine.InsertCoin(float amount)\n    {\n        if (amount &#x3C; 300)\n        {\n            return true;\n        }\n        return false;\n    }\n\n    public string Buy()\n    {\n        return \"Buy\";\n    }\n\n    string IVendingMachine.Buy()\n    {\n        return \"IVendingMachine Buy\";\n    }\n}\n</code></pre>\n<p>Note that Visual Studio can help you to implement interface explicitly by pressing <code>Ctrl + .</code> on the name of the interface and select <code>Implement interface explicitly</code>:</p>\n<img src=\"/media/explicit_interface_implementation.jpg\" width=\"800\">\nNow, what happens when we call the `InsertCoin` and `Buy` methods? In this case, we should consider two different situations when we create the object:\n<ul>\n<li>Concrete Type</li>\n<li>Interface Variable</li>\n</ul>\n<p>If we want the methods of <code>VendingMachine</code> we should create the object with concrete type:</p>\n<pre><code class=\"language-csharp\">VendingMachine machine = new VendingMachine();\nmachine.InsertCoin(5); // false\nmachine.Buy();         // \"Buy\"\n</code></pre>\n<p>If we want the methods of <code>IVendingMachine</code> we should create the object with interface variable:</p>\n<pre><code class=\"language-csharp\">IVendingMachine machine = new VendingMachine();\nmachine.InsertCoin(5); // true\nmachine.Buy();         // \"IVendingMachine Buy\"\n</code></pre>","excerpt":"Let's imagine that you have a class with two methods: Now when we want to create an instance of this class and call one of those methods, it…"}},{"node":{"frontmatter":{"title":"Delegates in C#","date":"July 2nd, 2016","slug":"/posts/delegates"},"html":"<p>Lately I have been studying some topics in C# in order to improve myself. I think <a href=\"https://msdn.microsoft.com/en-us/library/ms173171.aspx\">Delegate</a> is one of those topics which is kinda difficult for beginners to initiate with. So, in order to make it clear how it works, I'm going to make some explanations in this post.</p>\n<h3>What are Delegates?</h3>\n<p>Delegate was introduced in C# 1. Think of it as a simply being a placeholder for functions that'll be called at some point in time. Assume you want to declare a variable that is a reference to a specific method. In this case, the variable encapsulates some executable code and you can invoke the variable just like an actual method. In doing so, we need to create a delegate</p>\n<h3>Defining a Delegate</h3>\n<p>Delegates are created using <code>delegate</code> keyword along with the function signature:</p>\n<pre><code class=\"language-csharp\">delegate int Sum(int a, int b);\n</code></pre>\n<p>As you can see we are defining a delegate called <code>Sum</code> that is compatible with any method with an <code>int</code> return type with two parameters. Actually we defined a type that we can use to create variables and point those variables to methods that have the same signature and same return type.\nThe type defenition for a delegate describes the method that we want to call:</p>\n<pre><code class=\"language-csharp\">int Add(int a, int b) => a + b;\n</code></pre>\n<p>Now we can assign a method to the delegate variable. This assignment creates a delegate instance:</p>\n<pre><code class=\"language-csharp\">Sum s = Add;\n</code></pre>\n<p>Now we can invoke the delegate instance in the same way as a method:</p>\n<pre><code class=\"language-csharp\">int result = s(5, 6);\n</code></pre>\n<h3>Advantages of Delegate</h3>\n<ul>\n<li>Delegates are type safe, It means that the C# compiler checks the function signatures of a Delegate when you use them at runtime.</li>\n<li>Can be used to define callback functions.</li>\n<li>Can be dynamically switched at runtime.</li>\n</ul>\n<h3>Real World example</h3>\n<p>Suppose that you want to implement something like a <a href=\"https://msdn.microsoft.com/en-us/library/system.web.ui.webcontrols.repeater(v=vs.85).aspx\">Repeater</a> control in your ASP.NET MVC application, As you probably know a Repeater is(was) server side databound control in ASP.NET WebForm for displaying information, It had a lot of flexability becuase you had complete control over the your markup.</p>\n<pre><code class=\"language-csharp\">public static class Helpers\n{\n    public delegate HelperResult ItemTemplate&#x3C;T>(T input);\n\n    public static HelperResult Repeater&#x3C;T>(this HtmlHelper html,\n      IEnumerable&#x3C;T> items,\n      ItemTemplate&#x3C;T> itemTemplate,\n      ItemTemplate&#x3C;T> alternatingitemTemplate = null)\n    {\n        return new HelperResult(writer =>\n        {\n            int i = 0;\n            foreach (var item in items)\n            {\n                var func = i % 2 == 0 ? itemTemplate : alternatingitemTemplate;\n                func(item).WriteTo(writer);\n                i++;\n            }\n        });\n    }\n}\n</code></pre>\n<p>As you can see we emulated the <code>ItemTemplate</code> and <code>AlternatingItemTemplate</code> using a delegate. In this case user can pass the data and the data will be rendered inside the view. In this case the delegates act like callback.<br>\nThe <code>ItemTemplate</code> delegate in our example can be replaced with <code>Func</code> delegate:</p>\n<pre><code class=\"language-csharp\">Func&#x3C;T, HelperResult> itemTemplate,\nFunc&#x3C;T, HelperResult> alternatingitemTemplate = null\n</code></pre>\n<p>Now we can use our helper inside any view:</p>\n<pre><code class=\"language-html\">&#x3C;table>\n  &#x3C;tr>\n    &#x3C;td>Id&#x3C;/td>\n    &#x3C;td>Name&#x3C;/td>\n  &#x3C;/tr>\n  @Html.Repeater(Model, @\n  &#x3C;tr>\n    &#x3C;td>@item.Title&#x3C;/td>\n    &#x3C;td>@item.Price&#x3C;/td>\n  &#x3C;/tr>\n  , @\n  &#x3C;tr class=\"alert-info\">\n    &#x3C;td>@item.Title&#x3C;/td>\n    &#x3C;td>@item.Price&#x3C;/td>\n  &#x3C;/tr>\n  )\n&#x3C;/table>\n</code></pre>\n<p>If you run the application you can see the result:</p>\n<img src=\"/media/repeater.jpg\" width=\"500\">\n<p>You can check out the <a href=\"https://github.com/SirwanAfifi/using_delegates\">GitHub repository</a> for this post.</p>","excerpt":"Lately I have been studying some topics in C# in order to improve myself. I think Delegate is one of those topics which is kinda difficult…"}},{"node":{"frontmatter":{"title":"Thinking out of the box to become a better programmer","date":"June 11th, 2016","slug":"/posts/thinking-out-of-the-box-to-become-a-better-programmer"},"html":"<img src=\"/media/Thinking_Man.jpg\" width=\"350\">\n*Image courtesy of [http://goo.gl/iu68gq](http://goo.gl/iu68gq)*\n<p>Today I was talking with a friend of mine about thinking, The topic is interesting and I wanted to share it with you because as a programmer we are always thinking and trying to find solutions. Actually it's a good habit when you want to learn something new, instead of taking action and delve into the details, you should think about that and break it down into several pieces then construct it as a big picture. Once you get familiar to it you can start trying to figure out each individual piece, By doing so you will become great in your field.</p>\n<img src=\"/media/think-outside-the-box.jpg\" width=\"500\">\n*Image courtesy of [http://goo.gl/Xi2Cn4](http://goo.gl/Xi2Cn4)*\n<p>On the other hand, thinking isn't the only thing for being an expert in programming. Suppose that you are given a challenging feature to implement in a team you're working with, you might spend days and days trying to implement this feature and each time you fail and stuck in it then you try to find a solution on the net or asking questions on Stackoverflow. I'm not saying you shouldn't google about your problem, What I'm saying is that you should understand the problem, This is where a Thinking out of the box's metaphor comes into play.</p>\n<p>This is very helpful because when you ran into a problem you should first think about it in a new or a different prespective, For example you can put yourself in end user's place and try to figure it out. Once you understand it, you can start coding the feature. By doing so you can help yourself and believe me it works like a charm and you don't need to post off-topic questions every single day on Stackoverflow anymore, Instead when you run into a serious problem, you can post your question and get extra votes :)</p>\n<p>So thinking out of the box helps us to think like a programmer, It also helps you to approach problems in new ways.</p>","excerpt":"Today I was talking with a friend of mine about thinking, The topic is interesting and I wanted to share it with you because as a programmer…"}},{"node":{"frontmatter":{"title":"Why AngularJS?","date":"April 17th, 2016","slug":"/posts/why-angular"},"html":"<p>I wanted to share a few thoughts about AngularJS</p>\n<h3>Introduction</h3>\n<p>AngularJS is a MV* framework for writing manageable, clean, full-featured applications in the browser with JavaScript , It's also incredibly easy to learn for those who already have HTML and JavaScript experience. Angular's goal was to create a way for designers to be able to do HTML design using components. One thing that I like about Angular is that, it's an opinionated MV* framework, It means that it tells you what are the certain ways of doing things, Some people might argue that it's somehow a limitation for a framework such as Angular because it solves fewer problems, but I think at least it assures to not having spaghetti code.</p>\n<h3>How I got into AngularJS</h3>\n<p>I have been sitting on the fence for far too long to chose a great JavaScript framework. Finally a couple of years ago I decided to use AngularJS and it caught my attention. It actually made me cursious to learn more about it. I started to use AngularJS for some parts of my application. At the time Angular team were working on the next version of the framework So I stopped using it because I heard that the next version is a different framework. Now I have come to conclusion that it's better to stick with Angular 1.x, then I can switch to Angular 2 in a right time.</p>\n<h3>AngularJS Benefites</h3>\n<p>Angular has lots of great features from testability and two-way binding, to more vague concepts. For me the best thing about Angular is that it has a flat learning curve So you can get the most of it. All being said here are the some of my favorite features and benefits of Angular:</p>\n<ul>\n<li>Code Reduction: Angular reduces the amount of code that developers write.</li>\n<li>Two Way Binding</li>\n<li>Beautiful syntax and higher level APIs</li>\n</ul>\n<p>For example take a look this piece of code written in raw JavaScript:</p>\n<pre><code class=\"language-js\">document.getElementById(\"btn\").addEventListener(\"click\", function(el) {\n  alert(\"clicked!\");\n});\n</code></pre>\n<p>Whereas with Angular you can simple achieve same goal this way:</p>\n<pre><code class=\"language-js\">&#x3C;button id=\"btn\" ng-click=\"handleClick()\">\n  Click Me\n&#x3C;/button>;\n\n$scope.handleClick = function() {\n  console.log(\"clicked!\");\n};\n</code></pre>\n<p>As you can see the Angular code is less complex.</p>\n<ul>\n<li>Popularity</li>\n<li>Testability<br>\nAngular was designed with testing in mind. So you can test any components of your application easily through both <a href=\"https://docs.angularjs.org/guide/unit-testing\">unit testing</a> and <a href=\"https://docs.angularjs.org/guide/e2e-testing\">end to end</a> testing. For unit testing you can use a component called <a href=\"https://docs.angularjs.org/api/ngMock\">ngMock</a> and for e2e testing you can use <a href=\"https://github.com/angular/protractor\">Protractor</a>. It is worthwhile to mention that for both cases you can run your tests using a tool called Karma.</li>\n</ul>\n<h3>AngularJS gotchas</h3>\n<p>Although Angular is a great framework but it has some problems that you can run into trouble with it. Here are some of them:</p>\n<ul>\n<li>SEO<br>\nFor dealing with this issue we can use server side rendering or use a <a href=\"https://prerender.io/\">prerenderer</a>,</li>\n<li>Performance<br>\nOne thing that causes performance problem in Angular is having too many bindings. If performance is important you can consider using a different rendering engine.</li>\n<li>External Events and Digest Cycle</li>\n</ul>\n<h3>Conclusion</h3>\n<p>Even though Angular 2 is coming, But Angular 1 is still a thing and I think Angular 1 will be supported for a long time to come.</p>","excerpt":"I wanted to share a few thoughts about AngularJS Introduction AngularJS is a MV* framework for writing manageable, clean, full-featured…"}},{"node":{"frontmatter":{"title":"Asynchronous Execution in JavaScript","date":"February 12th, 2016","slug":"/posts/asynchronous-execution-in-javaScript"},"html":"<p>As you know browsers are typically single threaded, It means that the browser can only be doing either update the UI or executing JavaScript at any given time. It actually incapable of doing theme simultaneously.</p>\n<p>As I mentioned when JavaScript is executing code, the UI is unable to respond to the user. So, our goal as a developer is to build a highly responsive UI. For doing that you could create smaller unit of work and use JavaScript timers to return execution to the next event in the queue:</p>\n<pre><code class=\"language-js\">function buffer(items, iterFn, callback) {\n  var i = 0,\n    len = items.length;\n  setTimeout(function() {\n    var result;\n\n    for (\n      var start = +new Date();\n      i &#x3C; len &#x26;&#x26; result !== false &#x26;&#x26; +new Date() - start &#x3C; 50;\n      i++\n    ) {\n      result = iterFn.call(items[i], items[i], i);\n    }\n\n    if (i &#x3C; len &#x26;&#x26; result !== false) {\n      setTimeout(arguments.callee, 20);\n    } else {\n      callback(items);\n    }\n  }, 20);\n}\n</code></pre>\n<p>Assume that we want to pull down some data from the server, Then the data is going to be processed through an array loop, And we are going to build some DOM elements:</p>\n<pre><code class=\"language-js\">@{\n    ViewBag.Title = \"Home Page\";\n}\n&#x3C;ul>&#x3C;/ul>\n@section scripts\n{\n    &#x3C;script>\n        $(document).ready(function () {\n            $.get('@Url.Action(\"Date\")', function (result) {\n                var html = '';\n\n                buffer(result, function (item) {\n                    html += '&#x3C;li>' + item + '&#x3C;/li>';\n                }, function () {\n                    $('ul').append(html);\n                });\n            });\n        });\n    &#x3C;/script>\n}\n</code></pre>\n<p>Also the action method is like this:</p>\n<pre><code class=\"language-csharp\">public JsonResult Date()\n{\n    var data = Enumerable.Range(0, 50000);\n\n    return Json(data, JsonRequestBehavior.AllowGet);\n}\n</code></pre>\n<p>The <code>buffer</code> method works like a charm but using <code>setTimeout</code> is considered to be a bad practice. So that's where the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\">Web Workers</a> come into play.</p>\n<h3>Web Workers</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\">MDN</a>:</p>\n<blockquote>\n<p>Web Workers provide a simple means for web content to run scripts in background threads. The worker thread can perform tasks without interfering with the user interface. In addition, they can perform I/O using XMLHttpRequest (although the responseXML and channel attributes are always null). Once created, a worker can send messages to the JavaScript code that created it by posting messages to an event handler specified by that code (and vice versa.) This article provides a detailed introduction to using web workers.</p>\n</blockquote>\n<p>Well, Web Wrokers bring background threading to browsers. It is a best option if you have intense processing that needs to happen in your browser. Since Workers run in another global context so there's a few restrictions that you have to keep in mind, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers\">Here</a> you can see the list of functions and classes available to Web Workers. So your favorite JavaScript library may not work with workers.</p>\n<p>So let's rewrite our example with Web Workers:</p>\n<pre><code class=\"language-js\">&#x3C;ul id=\"result\">Hello&#x3C;/ul>\n@section scripts\n{\n    &#x3C;script>\n        $(function () {\n            var _worker;\n\n            _worker = new Worker('@Url.Content(\"~/Scripts/getData.js\")');\n            _worker.addEventListener(\"message\", messageHander, false);\n            _worker.postMessage(\"fetch\");\n\n            function messageHander(e) {\n                $(\"#result\").html(e.data);\n            }\n\n        });\n    &#x3C;/script>\n}\n</code></pre>\n<p>As you can see I instantiated a worker, Then I setup an event listener for message, So when data comes in from the AJAX call, we will inject the result into html of a container called <code>result</code>.<br>\nHere you see the worker:</p>\n<pre><code class=\"language-js\">function messageHandler(e) {\n  if (e.data === \"fetch\") {\n    fetch();\n  }\n}\n\nfunction fetch() {\n  var xmlhttp = new XMLHttpRequest();\n  xmlhttp.onreadystatechange = function() {\n    if (xmlhttp.readyState == 4 &#x26;&#x26; xmlhttp.status == 200) {\n      var html = \"\";\n      var res = JSON.parse(xmlhttp.responseText);\n      for (var i = 0; i &#x3C; res.length; i++) {\n        html += \"&#x3C;li>\" + res[i] + \"&#x3C;/li>\";\n      }\n      postMessage(html);\n    }\n  };\n\n  xmlhttp.open(\"GET\", \"/Home/Date\", false);\n  xmlhttp.send();\n}\naddEventListener(\"message\", messageHandler, true);\n</code></pre>\n<p>Inside the fetch content we used typical AJAX call because in Web Workers you can not use a third-party library it means that there's no access to non-thread safe components, So you have to use a native <code>XMLHttpRequest</code> in your worker. Now if you run the code you will see that now that's pretty fast even quite a bit faster than before.</p>\n<p>You can see the sample code <a href=\"https://github.com/SirwanAfifi/asynchronous-execution-in-js\">in the GitHub repository</a></p>","excerpt":"As you know browsers are typically single threaded, It means that the browser can only be doing either update the UI or executing JavaScript…"}},{"node":{"frontmatter":{"title":"Object Oriented JavaScript Part 2","date":"December 11th, 2015","slug":"/posts/object-oriented-javaScript-part-2"},"html":"<h3>Classes</h3>\n<p>In many programming languages a <a href=\"https://en.wikipedia.org/wiki/Class_(computer_programming)\">class</a> is a standard unit of work, which means that you normally create all of your code inside classes and these classes contain data, behaviour, events and those sort of things that you are going to use in developing your solutions. for example in C# we can create a class this way:</p>\n<pre><code class=\"language-csharp\">public class Person\n{\n    // Field\n    public string firstName;\n    // Constructor that takes no arguments.\n    public Person(string firstName, string lastName)\n    {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n    // Method\n    public string Greet(string name)\n    {\n        return $\"Hello, { name }. My name is { this.firstName }\"\n    }\n}\n</code></pre>\n<p>In this case we have a class along with properties, constructor. So a class in C# contains data as well as operation as well as events. It will be useful to create same sort of structure in JavaScript. Prior to ES6 there was no such thing as a class in JavaScript, we could simply do everything with functions, we could create classes by using some of the language semantics to create things that look and feels like classes. But they were not classes in the classical sense. for example we used function to do this:</p>\n<pre><code class=\"language-js\">function Person(firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n}\nPerson.prototype.greet = function(name) {\n  return \"Hello, \" + name + \". My name is \" + this.firstName;\n};\n</code></pre>\n<p>So what this function does is use the <code>this</code> keyword to define new property that represents a person object in this case. And what's interesting here this is what's called a constructor syntax. So this function when called will return an object. By doing this, we can create a new person:</p>\n<pre><code class=\"language-js\">var person = new Person(\"Sirwan\", \"Afifi\");\n</code></pre>\n<p>In this case, we can see that it is using the <code>new</code> keyword. this keyword is used to find a function with a name, after the <code>new</code>, return an object that contained the shape that is defined in the function. Once we have an instance of that, we can get any of the properties that are specified in the constructor syntax function:</p>\n<pre><code class=\"language-js\">var firstName = person.firstName;\n</code></pre>\n<p>ES6 introduces language support for classes with <code>class</code> keyword. So the ES6 equivalent of the <code>Person</code> function would be the following:</p>\n<pre><code class=\"language-js\">class Person {\n  constructor(firstName, lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n\n  greet(name) {\n    return `Hello, ${name}. My name is ${this.firstName}`;\n  }\n}\n</code></pre>\n<p>So we have essentially recreated the same Person data type but with much better syntax. behind the scene the runtime is doing the exactly what we used to do. But now the syntax is clean and expressive. As you can see there is <code>constructor</code> in the class definition. the constructor is one of the class members that we can list in the body of a class, just like the other members it is a function, it is a function that automatically invoked when we say <code>new</code> and use the class name as a function call:</p>\n<pre><code class=\"language-js\">var person = new Person(\"Sirwan\", \"Afifi\");\n</code></pre>\n<h3>Getters and Setters</h3>\n<p>In a class we can also use getter and setter, they are created using <code>get</code> and <code>set</code> keyword. get and set allows us to run code on the reading or writing of a property:</p>\n<pre><code class=\"language-js\">// ES6 get and set\nclass Person {\n  constructor(firstName, lastName) {\n    this._firstName = firstName;\n    this._lastName = lastName;\n  }\n\n  get fullName() {\n    var result = this._firstName + \", \" + this._lastName;\n    return result.toUpperCase();\n  }\n\n  set firstName(newName) {\n    this._firstName = newName;\n  }\n  set lastName(newName) {\n    this._lastName = newName;\n  }\n  greet(name) {\n    return `Hello, ${name}. My name is ${this._firstName}`;\n  }\n}\nlet sirwan = new Person(\"Sirwan\", \"Afifi\");\nconsole.log(sirwan.fullName); // Outputs 'SIRWAN, AFIFI'\nlet omid = new Person(\"Daryoush\", \"Zandi\");\nomid.firstName = \"Omid\";\nomid.lastName = \"Kamangar\";\nconsole.log(omid.fullName); // Outputs 'OMID, KAMANGAR'\n</code></pre>\n<h3>Inheritance</h3>\n<p>ES6 also gives us an easy syntax to specify and inheritance for relationship. Which is a way we say a class inherits from another class. Now assume that we need another class for modling an <code>Employee</code>, since every employee is a person, maybe we will have the <code>Employee</code> inherit from a <code>Person</code>. In ES6 inheritance is specified using <code>extends</code> keyword:</p>\n<pre><code class=\"language-js\">class Employee extends Person {\n  // more features\n  getWork() {\n    return `${this._firstName} is working.`;\n  }\n}\n\nlet emp = new Employee(\"Sirwan\", \"Afifi\");\nconsole.log(emp.getWork()); // Outputs 'Sirwan is working.'\n</code></pre>\n<p>The only thing is that a lot of features in ES2015 are not supported in the browsers. For example classes are not supported by any browser, now there might be a nightly built of Firefox that supports classes. So instead we have to use a transpiler and there are many transpilers such as <a href=\"http://www.typescriptlang.org\">TypeScript</a>, <a href=\"https://babeljs.io\">Bable</a> and variety of others. I recommend you to use Bable because it has the best support for all of ES2015 features.</p>","excerpt":"Classes In many programming languages a class is a standard unit of work, which means that you normally create all of your code inside…"}},{"node":{"frontmatter":{"title":"Object Oriented JavaScript Part 1","date":"December 10th, 2015","slug":"/posts/object-oriented-javaScript-part-1/"},"html":"<p>Recently I've started to improve my JavaScript skill, So I decided to keep notes about new things I learn from now on.\nSince I'm a C# developer, I'm trying to use my existing knowledge in C# to learn JavaScript.<br>\nAs you know in C# we have something called <a href=\"https://msdn.microsoft.com/en-us/library/bb384062.aspx\">Object and collection initializer</a>. For example we can use object initializer to create name and value pairs for different properties of the object, in this case <code>car</code> object:</p>\n<pre><code class=\"language-csharp\">var car = new Car()\n{\n    Name = \"Chevrolet Corvette\",\n    Color = \"Red\",\n    Manufacturer = new CarManufacturer()\n    {\n        Name = \"Chevrolet\",\n        Country = \"USA\"\n    }\n};\n</code></pre>\n<p>As you can see we used object initializer for those embedded objects too.\nAlthough object initializers can be used for anonymous types. So here's the same example which we build with anonymous object:</p>\n<pre><code class=\"language-csharp\">var car = new {\n    Name = \"Chevrolet Corvette\",\n    Color = \"Red\",\n    Manufacturer = new {\n        Name = \"Chevrolet\",\n        Country = \"USA\"\n    }\n};\n</code></pre>\n<p>This is very similar the way dynamic objects work in JavaScript. So in JavaScript object creation is going to follow this pattern:</p>\n<pre><code class=\"language-js\">var car = {\n  name: \"Chevrolet Corvette\",\n  color: \"Red\",\n  manufacturer: {\n    name: \"Chevrolet\",\n    country: \"USA\"\n  },\n  \"towing capacity\": \"5,952 lbs\"\n};\n</code></pre>\n<p>As you can see we use key/value pairs. Actually it's a little different from C# for instance we used colons (<code>:</code>) instead of equals (<code>=</code>) but generally the syntaxes are similar. In some case you may see the name is embedded in quotes, it's optional but if you're using any reserved characters like space, in this case, you need to surround the name with quotes (like <code>towing capacity</code>).</p>\n<p>These dynamic objects that you have defined with this name value pairs allows you to take these objects you are creating and access each the properties you have defined in that name value pair by the name using a simple dot syntax. For example here in JavaScript you can just access the name using dot name convention:</p>\n<pre><code class=\"language-js\">var name = car.name;\n</code></pre>\n<p>You can also use a bracket syntax, that's why objects are sometimes called associative arrays:</p>\n<pre><code class=\"language-js\">var name = car[\"name\"];\n</code></pre>\n<p>This way we can retrieve or set the property values. There are other ways for accessing and retrieving property value that are as follows:</p>\n<pre><code class=\"language-js\">car.color = \"Dot syntax\";\ncar[\"towing capacity\"] = \"String with space\";\ncar[str] = \"String value\";\ncar[rand] = \"Random Number\";\ncar[obj] = \"Object\";\ncar[\"\"] = \"Even an empty string\";\n</code></pre>\n<p>We can also get embedded objects that are the properties of those dynamic objects as well and retrive properties from them:</p>\n<pre><code class=\"language-js\">var manufacturer = car.manufacturer;\nvar name = manufacturer.name;\nvar country = manufacturer.country;\n</code></pre>\n<h3>Malleability</h3>\n<p>As you probably know, One of the key features of JavaScript is that the language is <a href=\"http://blog.jeremymartin.name/2008/03/understanding-loose-typing-in.html\">loosely typed</a> it means that variables are declared without a type. So the objects that you are creating in this way are very malleable. In C# <code>ExpandoObject</code> gives you this behavior.</p>\n<blockquote>\n<p>ExpandoObject Represents an object whose members can be dynamically added and removed at run time.</p>\n</blockquote>\n<p>For example in this code we are creating a new object and marking it as dynamic so that we can add members to this <code>ExpandoObject</code> as we want:</p>\n<pre><code class=\"language-csharp\">dynamic car  = new ExpandoObject();\ncar.Name = \"Chevrolet Corvette\";\ncar.Color = \"Red\";\n</code></pre>\n<p>These are being added on-the-fly. It means that these aren't defining the shape ahead of time. We are just saying we are going to add properties to the <code>car</code> object. In fact this is pretty much the same way in JavaScript:</p>\n<pre><code class=\"language-js\">var car = {\n  name: \"Chevrolet Corvette\",\n  color: \"Red\"\n};\n</code></pre>\n<p>We can still add another property or function on-the-fly:</p>\n<pre><code class=\"language-js\">car[\"towing capacity\"] = \"5,952 lbs\";\ncar.model = function() {\n  var s = this.name;\n};\n</code></pre>\n<p>Resourses:</p>\n<ul>\n    <li><a href=\"https://pluralsight.com/courses/js4cs\n\">JavaScript for C# Developers by Shawn Wildermuth</a></li>\n    <li><a href=\"https://mauricebutler.wordpress.com/2011/11/07/getting-started-with-javascript-with-a-c-background/\">Getting started with JavaScript with a C# background</a></li>\n    <li><a href=\"https://dzone.com/articles/javascript-c-developers\">JavaScript for C# Developers: Functions are Objects</a></li>\n</ul>","excerpt":"Recently I've started to improve my JavaScript skill, So I decided to keep notes about new things I learn from now on.\nSince I'm a C…"}},{"node":{"frontmatter":{"title":"My first blog post!","date":"November 28th, 2015","slug":"/posts/my-first-blog-post"},"html":"<p>Here's my first blog post :) In this blog I'm going to share thing that I learn, hope you enjoy reading my blog :)</p>","excerpt":"Here's my first blog post :) In this blog I'm going to share thing that I learn, hope you enjoy reading my blog :)"}}]}}}