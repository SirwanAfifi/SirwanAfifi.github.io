{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"Morse code","date":"July 8th, 2019","slug":"Programming-challenges-morse-code/"},"html":"<img class=\"center-image\" src=\"/img/morse_code.png\" alt=\"Morse Code table\" width=\"600\">\n<p>Morse Code is a set of dots and dashes (short mark, dot or 'dit' (·) and longer mark, dash or 'dah' (-)). Basically, it's a character encoding scheme for transmitting cryptographic messages which used in telecommunication. Think of it as the early version of texting. The system is named after the American artist Samuel Finley Breese Morse who co-developed an electrical telegraph system at the beginning of 1836. In fact it was heavily used for (secret) transmissions during WWI and WWII. Different combination of dots and dashes will produce different letters it also means that different combination of letters will be eventually your encoded messages.</p>\n<img class=\"center-image\" src=\"/img/International_Morse_Code.svg\" alt=\"Morse Code table\" width=\"700\">\n<p>I thought it might be a good idea to write my name in Morse code to see how it looks like. Since I am a lazy developer, so I ended up writing a React application to do the job for me:</p>\n<img class=\"center-image\" src=\"/img/morse_code_translator.gif\" alt=\"Morse Code video\" width=\"700\">\n<p>Here's the implementation in JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> language <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  alphabets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">A</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">B</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">C</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">D</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">E</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">F</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">G</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">H</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">I</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">J</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">K</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">M</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">N</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">L</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">N</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">O</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">P</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">Q</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−•−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">R</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">S</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">T</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">U</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">V</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">W</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">X</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−••−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">Y</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">Z</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−••\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  numeral<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−−−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•••−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•••••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"6\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−••••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"7\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−•••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"8\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−−••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"9\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−−−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−−−−\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  punctuations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"•\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−•−•−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\",\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−••−−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"?\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−−••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\":\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−−−•••\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\";\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•−•−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"−\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−••••−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−••−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'\"'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−••−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−−−−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•−−•\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\")\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•−−•−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"=\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"−•••−\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−•−•\"</span><span class=\"token punctuation\">,</span>\n    $<span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−••−\"</span><span class=\"token punctuation\">,</span>\n    q<span class=\"token punctuation\">:</span> <span class=\"token string\">\"•−•−••\"</span><span class=\"token punctuation\">,</span>\n    _<span class=\"token punctuation\">:</span> <span class=\"token string\">\"••−−•−\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">translateToMorseCode</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">input</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> inputArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>input<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> morseCode <span class=\"token operator\">=</span> inputArray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span>\n      language<span class=\"token punctuation\">.</span>alphabets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span>\n      language<span class=\"token punctuation\">.</span>numeral<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span>\n      language<span class=\"token punctuation\">.</span>punctuations<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> code <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> morseCode<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">translateToEnglish</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">input</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> inputArray <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> engWord <span class=\"token operator\">=</span> inputArray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span>\n      Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">.</span>alphabets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> language<span class=\"token punctuation\">.</span>alphabets<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> i\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span>\n      Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">.</span>punctuations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> language<span class=\"token punctuation\">.</span>punctuations<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> i\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span>\n      Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">.</span>numeral<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> language<span class=\"token punctuation\">.</span>numeral<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> i\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">?</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> engWord<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Since the original idea of Morse Code was to signal the message in a form perceptible to the human senses, such as sound waves or visible light, so I have added the ability to play a sound while coding the message:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> output<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">of</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">translateToMorseCode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> <span class=\"token string\">\"•\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">playSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> <span class=\"token string\">\"−\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">playSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">playSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> output<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>output <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> i <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can grab the working sample project from <a href=\"https://github.com/SirwanAfifi/morse\">GitHub</a>.</p>","excerpt":"Morse Code is a set of dots and dashes (short mark, dot or 'dit' (·) and longer mark, dash or 'dah' (-)). Basically, it's a character…","fields":{"slug":"2019-07-08-Programming-challenges-morse-code"}}},{"node":{"frontmatter":{"title":"Calling Stored Procedures using Dapper","date":"June 7th, 2019","slug":"Calling-Stored-Procedures/"},"html":"<p>Today I wanted to call a Stored Procedure using Entity Framework Core. It is possible using <code class=\"language-text\">DbSet.FromSql()</code> method, which is one of the powerful features of Entity Framework Core. It gives us the ability to run RAW SQL queries directly against a database:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> blogs <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>Blogs\n    <span class=\"token punctuation\">.</span><span class=\"token function\">FromSql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CALL GetBlogs\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But the problem is that the column names in the result set must match the column names that properties are mapped to. So, for example, given this Stored Procedure:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DEFINER</span><span class=\"token operator\">=</span><span class=\"token punctuation\">`</span>root<span class=\"token punctuation\">`</span><span class=\"token variable\">@`%`</span> <span class=\"token keyword\">PROCEDURE</span> <span class=\"token punctuation\">`</span>GetBlogs<span class=\"token punctuation\">`</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span>\n\t<span class=\"token keyword\">select</span> <span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>Rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> average<span class=\"token punctuation\">,</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>Rating<span class=\"token punctuation\">)</span><span class=\"token keyword\">as</span> minimum<span class=\"token punctuation\">,</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>Rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> maximum\n\t<span class=\"token keyword\">from</span> blogs\n<span class=\"token keyword\">END</span></code></pre></div>\n<p>In this case, your model must be exactly the same as the result set. Otherwise, you'd get an exception. Most of our Stored Procedure use some Aggregate functions. So I had to find another solution for it which was using Dapper. As you probably know, Dapper is nothing but a set of extension methods on top of <code class=\"language-text\">IDbConnection</code>. So to use it, you will need to install <code class=\"language-text\">Dapper</code> and register it using built-in IoC container in your ASP.NET Core application:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddTransient</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IDbConnection</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySqlConnection</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">.</span><span class=\"token function\">GetConnectionString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyConnection\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then you can use it inside your services:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IDbConnection</span> _dbConnection<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MyService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IDbConnection</span> dbConnection<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _dbConnection <span class=\"token operator\">=</span> dbConnection<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> Task<span class=\"token operator\">&lt;</span>IEnumerable<span class=\"token operator\">&lt;</span>BlogViewModel<span class=\"token operator\">>></span> <span class=\"token function\">GetBlogs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> authorId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> query <span class=\"token operator\">=</span> _dbConnection<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">QueryAsync</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BlogViewModel</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GetBlogs\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> AuthorId <span class=\"token operator\">=</span> authorId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            commandType<span class=\"token punctuation\">:</span> CommandType<span class=\"token punctuation\">.</span>StoredProcedure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> query<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"Today I wanted to call a Stored Procedure using Entity Framework Core. It is possible using  method, which is one of the powerful features…","fields":{"slug":"2019-06-07-Calling-Stored-Procedures"}}},{"node":{"frontmatter":{"title":"Highlighting Current Link in Razor Pages","date":"May 31st, 2019","slug":"Razor-Pages-Highlight-Current-Link/"},"html":"<p>Let's say you have several pages in your Razor Pages application. Now you want to make the menu items active depending on the page you are currently on:</p>\n<img class=\"center-image\" src=\"/img/active_menu.png\" alt=\"Active menu\" width=\"700\">\n<p>The solution is pretty simple; all you need to do is checking the request path in <code class=\"language-text\">_Layout</code> file. To access the Request object, you need to inject <code class=\"language-text\">IHttpContextAccessor</code> in the layout file. Before injecting this interface into our view we must register it in <code class=\"language-text\">ConfigureServices</code> method in Startup class:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IHttpContextAccessor</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpContextAccessor</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>Note</em>: If you are using ASP.NET Core 2.1+ you can use <code class=\"language-text\">AddHttpContextAccessor</code> helper extension method to correctly register the <code class=\"language-text\">IHttpContextAccessor</code> with the correct lifetime (singleton):</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddHttpContextAccessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we should be able to access current <code class=\"language-text\">HttpContext</code> inside our views:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">@inject Microsoft.AspNetCore.Http.IHttpContextAccessor Accessor\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Layout<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/css/shared.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    @RenderSection(\"styles\", false)\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>header-shadow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>container is-fluid header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nav</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>navbar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>navbar-menu navbar-end<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>mainNavMenu<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                    &lt;a class=\"navbar-item @(Accessor.HttpContext.Request.Path.Value == \"/\" ? \"nav-item-selected\" : \"\" )\" href=\"/\">Home<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n                    &lt;a class=\"navbar-item @(Accessor.HttpContext.Request.Path.Value == \"/Services\" ? \"nav-item-selected\" : \"\" )\" href=\"/Services\">Services<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n                    &lt;a class=\"navbar-item @(Accessor.HttpContext.Request.Path.Value == \"/About\" ? \"nav-item-selected\" : \"\" )\" href=\"/About\">About Us<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n                    &lt;a class=\"navbar-item @(Accessor.HttpContext.Request.Path.Value == \"/Contact\" ? \"nav-item-selected\" : \"\" )\" href=\"/Contact\">Contact<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nav</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span>\n\n    @RenderBody()\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>","excerpt":"Let's say you have several pages in your Razor Pages application. Now you want to make the menu items active depending on the page you are…","fields":{"slug":"2019-05-31-Razor-Pages-Highlight-Current-Link"}}}]}}}